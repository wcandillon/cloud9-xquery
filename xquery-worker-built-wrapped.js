// Wrapped in JavaScript, to avoid cross-origin restrictions, created using wrap-in-js.sh
define(function() {
return '\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/utils.js\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'  var Utils = exports.Utils = {\n' +
'    convertPosition: function(code, begin, end)\n' +
'    {\n' +
'      var before = code.substring(0, begin);\n' +
'      var after  = code.substring(0, end);\n' +
'      var startline = before.split("\\n").length;\n' +
'      var startcolumn = begin - before.lastIndexOf("\\n");\n' +
'      var endline = after.split("\\n").length;\n' +
'      var endcolumn = end - after.lastIndexOf("\\n");\n' +
'      return {sl: startline - 1, sc: startcolumn - 1, el: endline - 1, ec: endcolumn - 1};\n' +
'    },\n' +
'\n' +
'    findNode: function(ast, pos) {\n' +
'      var p = ast.pos;\n' +
'      if(Utils.inRange(p, pos) === true) {\n' +
'        for(var i in ast.children) {\n' +
'          var child = ast.children[i];\n' +
'          var n = Utils.findNode(child, pos);\n' +
'          if(n !== null)\n' +
'            return n;\n' +
'        }\n' +
'        return ast;\n' +
'      } else {\n' +
'        return null;\n' +
'      }\n' +
'    },\n' +
'    \n' +
'    inRange: function(p, pos, exclusive) {\n' +
'        if(p && p.sl <= pos.line && pos.line <= p.el) {\n' +
'            if(p.sl < pos.line && pos.line < p.el)\n' +
'                return true;\n' +
'            else if(p.sl == pos.line && pos.line < p.el)\n' +
'                return p.sc <= pos.col;\n' +
'            else if(p.sl == pos.line && p.el === pos.line)\n' +
'                return p.sc <= pos.col && pos.col <= p.ec + (exclusive ? 1 : 0);\n' +
'            else if(p.sl < pos.line && p.el === pos.line)\n' +
'                return pos.col <= p.ec + (exclusive ? 1 : 0);\n' +
'        }\n' +
'    },\n' +
'\n' +
'    removeParentPtr: function(ast)\n' +
'    {\n' +
'      if(ast.getParent !== undefined) {\n' +
'        delete ast.getParent;\n' +
'      }\n' +
'      for(var i in ast.children) {\n' +
'       var child = ast.children[i];\n' +
'       Utils.removeParentPtr(child);\n' +
'      }\n' +
'    }\n' +
'  };\n' +
'});\n' +
'\n' +
'/**\n' +
' * Cloud9 Language Foundation\n' +
' *\n' +
' * @copyright 2011, Ajax.org B.V.\n' +
' * @license GPLv3 <http://www.gnu.org/licenses/gpl.txt>\n' +
' */\n' +
'define(\'xquery_completion.js\',[\'require\',\'exports\',\'module\',\'ext/codecomplete/complete_util\',\'lib/utils.js\'],function(require, exports, module) {\n' +
'\n' +
'var completeUtil = require("ext/codecomplete/complete_util");\n' +
'var Utils = require(\'lib/utils.js\').Utils;\n' +
'\n' +
'var uriRegex = /[a-zA-Z_0-9\\/\\.:\\-#]/;\n' +
'\n' +
'var char = "-._A-Za-z0-9:\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02ff\\u0300-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203f\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";\n' +
'var nameChar = "[" + char + "]";\n' +
'var varChar = "[" + char + "\\\\$]";\n' +
'var nameCharRegExp = new RegExp(nameChar);\n' +
'var varCharRegExp = new RegExp(varChar);\n' +
'\n' +
'var varDeclLabels = {\n' +
'  "LetBinding": "Let binding",\n' +
'  "Param": "Function parameter",\n' +
'  "QuantifiedExpr": "Quantified expression binding",\n' +
'  "VarDeclStatement": "Local variable",\n' +
'  "ForBinding": "For binding",\n' +
'  "TumblingWindowClause": "Tumbling window binding",\n' +
'  "WindowVars": "Window variable",\n' +
'  "SlidingWindowClause": "Sliding window binding",\n' +
'  "PositionalVar": "Positional variable",\n' +
'  "CurrentItem": "Current item",\n' +
'  "PreviousItem": "Previous item",\n' +
'  "NextItem": "Next item",\n' +
'  "CountClause": "Count binding",\n' +
'  "GroupingVariable": "Grouping variable",\n' +
'  "VarDecl": "Module variable"\n' +
'};\n' +
'\n' +
'function completeURI(line, pos, builtin) {\n' +
'    var identifier = completeUtil.retrievePreceedingIdentifier(line, pos.column, uriRegex);\n' +
'    var matches = completeUtil.findCompletions(identifier, Object.keys(builtin));\n' +
'    return matches.map(function(uri) {\n' +
'      var module = builtin[uri];\n' +
'      return {\n' +
'          doc: module.doc,\n' +
'          docUrl: "http://www.zorba-xquery.com/html/xqdoc/" + uri.substring(7).replace(/\\//g, "_") + ".html",\n' +
'          icon: "package",\n' +
'          isFunction: false,\n' +
'          name: uri,\n' +
'          priority: 4,\n' +
'          replaceText: uri,\n' +
'          identifierRegex: uriRegex\n' +
'      };\n' +
'    });\n' +
'};\n' +
'\n' +
'\n' +
'function completeSchemaURI(line, pos, builtin) {\n' +
'    var identifier = completeUtil.retrievePreceedingIdentifier(line, pos.column, uriRegex);\n' +
'    var matches = completeUtil.findCompletions(identifier, Object.keys(builtin));\n' +
'    return matches.map(function(uri) {\n' +
'      var module = builtin[uri];\n' +
'      return {\n' +
'          doc: module.doc,\n' +
'//          docUrl: module.docUrl,\n' +
'          icon: "package",\n' +
'          isFunction: false,\n' +
'          name: uri,\n' +
'          priority: 4,\n' +
'          replaceText: uri,\n' +
'          identifierRegex: uriRegex\n' +
'      };\n' +
'    });\n' +
'};\n' +
'\n' +
'function completePath(line, pos, paths) {\n' +
'    var identifier = completeUtil.retrievePreceedingIdentifier(line, pos.column, uriRegex);\n' +
'    var matches = completeUtil.findCompletions(identifier, paths);\n' +
'    return matches.map(function(uri) {\n' +
'      return {\n' +
'          icon: "package",\n' +
'          isFunction: false,\n' +
'          name: uri,\n' +
'          priority: 4,\n' +
'          replaceText: uri,\n' +
'          identifierRegex: uriRegex\n' +
'      };\n' +
'    });\n' +
'};\n' +
'\n' +
'function completeVariable(identifier, pos, builtin, ast) {\n' +
'  var sctx = Utils.findNode(ast.sctx, { line: pos.row, col: pos.column - 2 });\n' +
'  if(sctx !== null) {\n' +
'    var decls = sctx.getVarDecls();\n' +
'    //console.log(decls);\n' +
'    var names = Object.keys(decls);\n' +
'    var matches = completeUtil.findCompletions(identifier, names);\n' +
'    var match = function(name) {\n' +
'        return {\n' +
'            doc: "<p>" +  varDeclLabels[decls[name].kind] + ".</p>",\n' +
'            icon: "property",\n' +
'            isFunction: false,\n' +
'            name: "$" + name,\n' +
'            priority: 4,\n' +
'            replaceText: "$" + name,\n' +
'            identifierRegex: varCharRegExp\n' +
'        };\n' +
'    };\n' +
'    //if(matches.length === 0) {\n' +
'    //    return names.map(match);\n' +
'    //} else {\n' +
'      return matches.map(match);\n' +
'    //}\n' +
'  }\n' +
'};\n' +
'\n' +
'function completeNSFunctions(pfx, local, pos, builtin, ast) {\n' +
'    var sctx = ast.sctx;\n' +
'    var ns = sctx.namespaces[pfx];\n' +
'    //console.log(ns);\n' +
'    var names = Object.keys(builtin[ns].functions);\n' +
'    for(var i in names) {\n' +
'        names[i] = pfx + ":" + names[i];\n' +
'    }\n' +
'    var matches = completeUtil.findCompletions(pfx+":"+local, names);\n' +
'    return matches.map(function(name) {\n' +
'      //console.log("Name:" + name);\n' +
'      //TODO support multiple arities\n' +
'      var local = name.substring(name.indexOf(":") + 1);\n' +
'      //console.log(local);\n' +
'      var fn = builtin[ns].functions[local][0];\n' +
'      var args = "(" +  fn.params.join(", ") + ")";\n' +
'      return {\n' +
'          doc: fn.doc,\n' +
'          docUrl: fn.docUrl,\n' +
'          icon: "method",\n' +
'          isFunction: true,\n' +
'          name: name + args,\n' +
'          priority: 4,\n' +
'          replaceText: name + args,\n' +
'          identifierRegex: nameCharRegExp\n' +
'      };\n' +
'    });\n' +
'}\n' +
'\n' +
'function completeDefaultFunctions(identifier, pos, builtin, ast) {\n' +
'    var namespaces = Object.keys(ast.sctx.declaredNS);\n' +
'    var matches = completeUtil.findCompletions(identifier, namespaces);\n' +
'    var results = matches.map(function(name) {\n' +
'    var ns = ast.sctx.declaredNS[name].ns;\n' +
'      return {\n' +
'          doc: builtin[ns] ? builtin[ns].doc : undefined,\n' +
'          docUrl: "http://www.zorba-xquery.com/html/view-module?ns=" + encodeURIComponent(ns),\n' +
'          icon: "property",\n' +
'          isFunction: false,\n' +
'          name: name + ":" + " (" + ns + ")",\n' +
'          priority: 5,\n' +
'          replaceText:  name + ":",\n' +
'          identifierRegex: nameCharRegExp\n' +
'      };\n' +
'    });\n' +
'    \n' +
'    var sctx = ast.sctx;\n' +
'    var ns = sctx.defaultFnNs;\n' +
'    var matches = completeUtil.findCompletions(identifier, Object.keys(builtin[ns].functions));\n' +
'    results = results.concat(matches.map(function(name) {\n' +
'      //TODO: support multiple arities\n' +
'      var fn = builtin[ns].functions[name][0];\n' +
'      var args = "(" +  fn.params.join(", ") + ")";\n' +
'      return {\n' +
'          doc: fn.doc,\n' +
'          docUrl: fn.docUrl,\n' +
'          icon: "method",\n' +
'          isFunction: true,\n' +
'          name: name + args,\n' +
'          priority: 4,\n' +
'          replaceText:  name + args,\n' +
'          identifierRegex: nameCharRegExp\n' +
'      };\n' +
'    }));\n' +
'    \n' +
'    return results;\n' +
'}\n' +
'\n' +
'function completeFunction(identifier, pos, builtin, sctx) {\n' +
'  var markers = [];\n' +
'  var pfx = identifier.substring(0, identifier.indexOf(":"));\n' +
'  var local = identifier.substring(identifier.indexOf(":") + 1);\n' +
'  \n' +
'  //console.log("Prefix" + pfx);\n' +
'  //console.log("Local: " + local);\n' +
'  if(pfx === "") {\n' +
'    return completeDefaultFunctions(identifier, pos, builtin, sctx);\n' +
'  } else {\n' +
'    return completeNSFunctions(pfx, local, pos, builtin, sctx);\n' +
'  }\n' +
'  return markers;\n' +
'};\n' +
'\n' +
'function completeExpr(line, pos, builtin, sctx) {\n' +
'  var markers = [];\n' +
'  var identifier = completeUtil.retrievePreceedingIdentifier(line, pos.column, nameCharRegExp);\n' +
'  var before = line.substring(0, pos.column - (identifier.length === 0 ? 0 : identifier.length));\n' +
'  var isVar = before[before.length - 1] === "$";\n' +
'  console.log(before);\n' +
'  console.log("ID " + identifier);\n' +
'  console.log(isVar);\n' +
'  if(isVar) {\n' +
'    markers = completeVariable(identifier, pos, builtin, sctx);\n' +
'  } else {\n' +
'    markers = completeFunction(identifier, pos, builtin, sctx);\n' +
'  }\n' +
'  return markers;\n' +
'};\n' +
'\n' +
'module.exports.completeURI = completeURI;\n' +
'module.exports.completeSchemaURI = completeSchemaURI;\n' +
'module.exports.completePath = completePath;\n' +
'module.exports.completeExpr = completeExpr;\n' +
'module.exports.completeVariable = completeVariable;\n' +
'module.exports.completeFunction = completeFunction;\n' +
'\n' +
'});\n' +
'\n' +
'// This file was generated on Thu Jan 31, 2013 17:36 (UTC+01) by REx v5.22 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net>\n' +
'// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint\n' +
'\n' +
'                                                            // line 2 "XQueryParser.ebnf"\n' +
'                                                            /* ***** BEGIN LICENSE BLOCK *****\n' +
'                                                             * Distributed under the BSD license:\n' +
'                                                             *\n' +
'                                                             * Copyright (c) 2010, Ajax.org B.V.\n' +
'                                                             * All rights reserved.\n' +
'                                                             *\n' +
'                                                             * Redistribution and use in source and binary forms, with or without\n' +
'                                                             * modification, are permitted provided that the following conditions are met:\n' +
'                                                             *     * Redistributions of source code must retain the above copyright\n' +
'                                                             *       notice, this list of conditions and the following disclaimer.\n' +
'                                                             *     * Redistributions in binary form must reproduce the above copyright\n' +
'                                                             *       notice, this list of conditions and the following disclaimer in the\n' +
'                                                             *       documentation and/or other materials provided with the distribution.\n' +
'                                                             *     * Neither the name of Ajax.org B.V. nor the\n' +
'                                                             *       names of its contributors may be used to endorse or promote products\n' +
'                                                             *       derived from this software without specific prior written permission.\n' +
'                                                             *\n' +
'                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
'                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
'                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
'                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
'                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
'                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
'                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
'                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
'                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
'                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
'                                                             *\n' +
'                                                             * ***** END LICENSE BLOCK ***** */\n' +
'\n' +
'                                                            define(\'lib/XQueryParser.js\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)\n' +
'                                                            {\n' +
'                                                              init(string, parsingEventHandler);\n' +
'                                                            // line 40 "XQueryParser.js"\n' +
'  var self = this;\n' +
'\n' +
'  this.ParseException = function(b, e, s, o, x)\n' +
'  {\n' +
'    var\n' +
'      begin = b,\n' +
'      end = e,\n' +
'      state = s,\n' +
'      offending = o,\n' +
'      expected = x;\n' +
'\n' +
'    this.getBegin = function() {return begin;};\n' +
'    this.getEnd = function() {return end;};\n' +
'    this.getState = function() {return state;};\n' +
'    this.getExpected = function() {return expected;};\n' +
'    this.getOffending = function() {return offending;};\n' +
'\n' +
'    this.getMessage = function()\n' +
'    {\n' +
'      return offending < 0 ? "lexical analysis failed" : "syntax error";\n' +
'    };\n' +
'  };\n' +
'\n' +
'  function init(string, parsingEventHandler)\n' +
'  {\n' +
'    eventHandler = parsingEventHandler;\n' +
'    input = string;\n' +
'    size = string.length;\n' +
'    reset(0, 0, 0);\n' +
'  }\n' +
'\n' +
'  this.getInput = function()\n' +
'  {\n' +
'    return input;\n' +
'  };\n' +
'\n' +
'  function reset(l, b, e)\n' +
'  {\n' +
'                 b0 = b; e0 = b;\n' +
'    l1 = l; b1 = b; e1 = e;\n' +
'    l2 = 0;\n' +
'    end = e;\n' +
'    ex = -1;\n' +
'    memo = {};\n' +
'    eventHandler.reset(input);\n' +
'  }\n' +
'\n' +
'  this.getOffendingToken = function(e)\n' +
'  {\n' +
'    var o = e.getOffending();\n' +
'    return o >= 0 ? XQueryParser.TOKEN[o] : null;\n' +
'  };\n' +
'\n' +
'  this.getExpectedTokenSet = function(e)\n' +
'  {\n' +
'    var expected;\n' +
'    if (e.getExpected() < 0)\n' +
'    {\n' +
'      expected = XQueryParser.getTokenSet(- e.getState());\n' +
'    }\n' +
'    else\n' +
'    {\n' +
'      expected = [XQueryParser.TOKEN[e.getExpected()]];\n' +
'    }\n' +
'    return expected;\n' +
'  };\n' +
'\n' +
'  this.getErrorMessage = function(e)\n' +
'  {\n' +
'    var tokenSet = this.getExpectedTokenSet(e);\n' +
'    var found = this.getOffendingToken(e);\n' +
'    var prefix = input.substring(0, e.getBegin());\n' +
'    var lines = prefix.split("\\n");\n' +
'    var line = lines.length;\n' +
'    var column = lines[line - 1].length + 1;\n' +
'    var size = e.getEnd() - e.getBegin();\n' +
'    return e.getMessage()\n' +
'         + (found == null ? "" : ", found " + found)\n' +
'         + "\\nwhile expecting "\n' +
'         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))\n' +
'         + "\\n"\n' +
'         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")\n' +
'         + "at line " + line + ", column " + column + ":\\n..."\n' +
'         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))\n' +
'         + "...";\n' +
'  };\n' +
'\n' +
'  this.parse_XQuery = function()\n' +
'  {\n' +
'    eventHandler.startNonterminal("XQuery", e0);\n' +
'    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Module();\n' +
'    shift(25);                      // EOF\n' +
'    eventHandler.endNonterminal("XQuery", e0);\n' +
'  };\n' +
'\n' +
'  function parse_Module()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Module", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 274:                       // \'xquery\'\n' +
'      lookahead2W(199);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'encoding\' | \'eq\' | \'except\' | \'ge\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'version\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 64274                 // \'xquery\' \'encoding\'\n' +
'     || lk == 134930)               // \'xquery\' \'version\'\n' +
'    {\n' +
'      parse_VersionDecl();\n' +
'    }\n' +
'    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 182:                       // \'module\'\n' +
'      lookahead2W(194);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'namespace\' | \'ne\' |\n' +
'                                    // \'or\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 94390:                     // \'module\' \'namespace\'\n' +
'      whitespace();\n' +
'      parse_LibraryModule();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_MainModule();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Module", e0);\n' +
'  }\n' +
'\n' +
'  function parse_VersionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VersionDecl", e0);\n' +
'    shift(274);                     // \'xquery\'\n' +
'    lookahead1W(116);               // S^WS | \'(:\' | \'encoding\' | \'version\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 125:                       // \'encoding\'\n' +
'      shift(125);                   // \'encoding\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shift(11);                    // StringLiteral\n' +
'      break;\n' +
'    default:\n' +
'      shift(263);                   // \'version\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shift(11);                    // StringLiteral\n' +
'      lookahead1W(109);             // S^WS | \'(:\' | \';\' | \'encoding\'\n' +
'      if (l1 == 125)                // \'encoding\'\n' +
'      {\n' +
'        shift(125);                 // \'encoding\'\n' +
'        lookahead1W(17);            // StringLiteral | S^WS | \'(:\'\n' +
'        shift(11);                  // StringLiteral\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    whitespace();\n' +
'    parse_Separator();\n' +
'    eventHandler.endNonterminal("VersionDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_LibraryModule()\n' +
'  {\n' +
'    eventHandler.startNonterminal("LibraryModule", e0);\n' +
'    parse_ModuleDecl();\n' +
'    lookahead1W(138);               // S^WS | EOF | \'(:\' | \'declare\' | \'import\'\n' +
'    whitespace();\n' +
'    parse_Prolog();\n' +
'    eventHandler.endNonterminal("LibraryModule", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ModuleDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ModuleDecl", e0);\n' +
'    shift(182);                     // \'module\'\n' +
'    lookahead1W(61);                // S^WS | \'(:\' | \'namespace\'\n' +
'    shift(184);                     // \'namespace\'\n' +
'    lookahead1W(250);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_NCName();\n' +
'    lookahead1W(29);                // S^WS | \'(:\' | \'=\'\n' +
'    shift(60);                      // \'=\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    whitespace();\n' +
'    parse_Separator();\n' +
'    eventHandler.endNonterminal("ModuleDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Prolog()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Prolog", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 108:                     // \'declare\'\n' +
'        lookahead2W(213);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'%\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' |\n' +
'                                    // \'base-uri\' | \'boundary-space\' | \'cast\' | \'castable\' | \'collection\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'copy-namespaces\' | \'decimal-format\' |\n' +
'                                    // \'default\' | \'div\' | \'eq\' | \'except\' | \'ft-option\' | \'function\' | \'ge\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'index\' | \'instance\' | \'integrity\' | \'intersect\' | \'is\' | \'le\' | \'lt\' |\n' +
'                                    // \'mod\' | \'namespace\' | \'ne\' | \'option\' | \'or\' | \'ordering\' | \'revalidation\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'updating\' | \'variable\' | \'|\' | \'||\'\n' +
'        break;\n' +
'      case 153:                     // \'import\'\n' +
'        lookahead2W(201);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'module\' | \'ne\' | \'or\' |\n' +
'                                    // \'schema\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 42604               // \'declare\' \'base-uri\'\n' +
'       && lk != 43628               // \'declare\' \'boundary-space\'\n' +
'       && lk != 50284               // \'declare\' \'construction\'\n' +
'       && lk != 53356               // \'declare\' \'copy-namespaces\'\n' +
'       && lk != 54380               // \'declare\' \'decimal-format\'\n' +
'       && lk != 55916               // \'declare\' \'default\'\n' +
'       && lk != 72300               // \'declare\' \'ft-option\'\n' +
'       && lk != 93337               // \'import\' \'module\'\n' +
'       && lk != 94316               // \'declare\' \'namespace\'\n' +
'       && lk != 104044              // \'declare\' \'ordering\'\n' +
'       && lk != 113772              // \'declare\' \'revalidation\'\n' +
'       && lk != 115353)             // \'import\' \'schema\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 108:                     // \'declare\'\n' +
'        lookahead2W(178);           // S^WS | \'(:\' | \'base-uri\' | \'boundary-space\' | \'construction\' |\n' +
'                                    // \'copy-namespaces\' | \'decimal-format\' | \'default\' | \'ft-option\' | \'namespace\' |\n' +
'                                    // \'ordering\' | \'revalidation\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk == 55916)              // \'declare\' \'default\'\n' +
'      {\n' +
'        lk = memoized(0, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            try_DefaultNamespaceDecl();\n' +
'            lk = -1;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            lk = -2;\n' +
'          }\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(0, e0, lk);\n' +
'        }\n' +
'      }\n' +
'      switch (lk)\n' +
'      {\n' +
'      case -1:\n' +
'        whitespace();\n' +
'        parse_DefaultNamespaceDecl();\n' +
'        break;\n' +
'      case 94316:                   // \'declare\' \'namespace\'\n' +
'        whitespace();\n' +
'        parse_NamespaceDecl();\n' +
'        break;\n' +
'      case 153:                     // \'import\'\n' +
'        whitespace();\n' +
'        parse_Import();\n' +
'        break;\n' +
'      case 72300:                   // \'declare\' \'ft-option\'\n' +
'        whitespace();\n' +
'        parse_FTOptionDecl();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_Setter();\n' +
'      }\n' +
'      lookahead1W(28);              // S^WS | \'(:\' | \';\'\n' +
'      whitespace();\n' +
'      parse_Separator();\n' +
'    }\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 108:                     // \'declare\'\n' +
'        lookahead2W(210);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'%\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collection\' | \'contains\' | \'context\' | \'div\' | \'eq\' | \'except\' |\n' +
'                                    // \'function\' | \'ge\' | \'gt\' | \'idiv\' | \'index\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'option\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'updating\' | \'variable\' | \'|\' | \'||\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 16492               // \'declare\' \'%\'\n' +
'       && lk != 48748               // \'declare\' \'collection\'\n' +
'       && lk != 51820               // \'declare\' \'context\'\n' +
'       && lk != 74348               // \'declare\' \'function\'\n' +
'       && lk != 79468               // \'declare\' \'index\'\n' +
'       && lk != 82540               // \'declare\' \'integrity\'\n' +
'       && lk != 101996              // \'declare\' \'option\'\n' +
'       && lk != 131692              // \'declare\' \'updating\'\n' +
'       && lk != 134252)             // \'declare\' \'variable\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 108:                     // \'declare\'\n' +
'        lookahead2W(175);           // S^WS | \'%\' | \'(:\' | \'collection\' | \'context\' | \'function\' | \'index\' |\n' +
'                                    // \'integrity\' | \'option\' | \'updating\' | \'variable\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      switch (lk)\n' +
'      {\n' +
'      case 51820:                   // \'declare\' \'context\'\n' +
'        whitespace();\n' +
'        parse_ContextItemDecl();\n' +
'        break;\n' +
'      case 101996:                  // \'declare\' \'option\'\n' +
'        whitespace();\n' +
'        parse_OptionDecl();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_AnnotatedDecl();\n' +
'      }\n' +
'      lookahead1W(28);              // S^WS | \'(:\' | \';\'\n' +
'      whitespace();\n' +
'      parse_Separator();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Prolog", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Separator()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Separator", e0);\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("Separator", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Setter()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Setter", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 108:                       // \'declare\'\n' +
'      lookahead2W(172);             // S^WS | \'(:\' | \'base-uri\' | \'boundary-space\' | \'construction\' |\n' +
'                                    // \'copy-namespaces\' | \'decimal-format\' | \'default\' | \'ordering\' | \'revalidation\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 55916)                // \'declare\' \'default\'\n' +
'    {\n' +
'      lk = memoized(1, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_DefaultCollationDecl();\n' +
'          lk = -2;\n' +
'        }\n' +
'        catch (p2A)\n' +
'        {\n' +
'          try\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            try_EmptyOrderDecl();\n' +
'            lk = -6;\n' +
'          }\n' +
'          catch (p6A)\n' +
'          {\n' +
'            lk = -9;\n' +
'          }\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(1, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 43628:                     // \'declare\' \'boundary-space\'\n' +
'      parse_BoundarySpaceDecl();\n' +
'      break;\n' +
'    case -2:\n' +
'      parse_DefaultCollationDecl();\n' +
'      break;\n' +
'    case 42604:                     // \'declare\' \'base-uri\'\n' +
'      parse_BaseURIDecl();\n' +
'      break;\n' +
'    case 50284:                     // \'declare\' \'construction\'\n' +
'      parse_ConstructionDecl();\n' +
'      break;\n' +
'    case 104044:                    // \'declare\' \'ordering\'\n' +
'      parse_OrderingModeDecl();\n' +
'      break;\n' +
'    case -6:\n' +
'      parse_EmptyOrderDecl();\n' +
'      break;\n' +
'    case 113772:                    // \'declare\' \'revalidation\'\n' +
'      parse_RevalidationDecl();\n' +
'      break;\n' +
'    case 53356:                     // \'declare\' \'copy-namespaces\'\n' +
'      parse_CopyNamespacesDecl();\n' +
'      break;\n' +
'    default:\n' +
'      parse_DecimalFormatDecl();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Setter", e0);\n' +
'  }\n' +
'\n' +
'  function parse_BoundarySpaceDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("BoundarySpaceDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(33);                // S^WS | \'(:\' | \'boundary-space\'\n' +
'    shift(85);                      // \'boundary-space\'\n' +
'    lookahead1W(133);               // S^WS | \'(:\' | \'preserve\' | \'strip\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 214:                       // \'preserve\'\n' +
'      shift(214);                   // \'preserve\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(241);                   // \'strip\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("BoundarySpaceDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_DefaultCollationDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DefaultCollationDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(38);                // S^WS | \'(:\' | \'collation\'\n' +
'    shift(94);                      // \'collation\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    eventHandler.endNonterminal("DefaultCollationDecl", e0);\n' +
'  }\n' +
'\n' +
'  function try_DefaultCollationDecl()\n' +
'  {\n' +
'    shiftT(108);                    // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(38);                // S^WS | \'(:\' | \'collation\'\n' +
'    shiftT(94);                     // \'collation\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shiftT(7);                      // URILiteral\n' +
'  }\n' +
'\n' +
'  function parse_BaseURIDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("BaseURIDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(32);                // S^WS | \'(:\' | \'base-uri\'\n' +
'    shift(83);                      // \'base-uri\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    eventHandler.endNonterminal("BaseURIDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ConstructionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ConstructionDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(41);                // S^WS | \'(:\' | \'construction\'\n' +
'    shift(98);                      // \'construction\'\n' +
'    lookahead1W(133);               // S^WS | \'(:\' | \'preserve\' | \'strip\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 241:                       // \'strip\'\n' +
'      shift(241);                   // \'strip\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(214);                   // \'preserve\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("ConstructionDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_OrderingModeDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderingModeDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(68);                // S^WS | \'(:\' | \'ordering\'\n' +
'    shift(203);                     // \'ordering\'\n' +
'    lookahead1W(131);               // S^WS | \'(:\' | \'ordered\' | \'unordered\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 202:                       // \'ordered\'\n' +
'      shift(202);                   // \'ordered\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(256);                   // \'unordered\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("OrderingModeDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_EmptyOrderDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("EmptyOrderDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(67);                // S^WS | \'(:\' | \'order\'\n' +
'    shift(201);                     // \'order\'\n' +
'    lookahead1W(49);                // S^WS | \'(:\' | \'empty\'\n' +
'    shift(123);                     // \'empty\'\n' +
'    lookahead1W(121);               // S^WS | \'(:\' | \'greatest\' | \'least\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 147:                       // \'greatest\'\n' +
'      shift(147);                   // \'greatest\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(173);                   // \'least\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("EmptyOrderDecl", e0);\n' +
'  }\n' +
'\n' +
'  function try_EmptyOrderDecl()\n' +
'  {\n' +
'    shiftT(108);                    // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(67);                // S^WS | \'(:\' | \'order\'\n' +
'    shiftT(201);                    // \'order\'\n' +
'    lookahead1W(49);                // S^WS | \'(:\' | \'empty\'\n' +
'    shiftT(123);                    // \'empty\'\n' +
'    lookahead1W(121);               // S^WS | \'(:\' | \'greatest\' | \'least\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 147:                       // \'greatest\'\n' +
'      shiftT(147);                  // \'greatest\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(173);                  // \'least\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CopyNamespacesDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CopyNamespacesDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(44);                // S^WS | \'(:\' | \'copy-namespaces\'\n' +
'    shift(104);                     // \'copy-namespaces\'\n' +
'    lookahead1W(128);               // S^WS | \'(:\' | \'no-preserve\' | \'preserve\'\n' +
'    whitespace();\n' +
'    parse_PreserveMode();\n' +
'    lookahead1W(25);                // S^WS | \'(:\' | \',\'\n' +
'    shift(41);                      // \',\'\n' +
'    lookahead1W(123);               // S^WS | \'(:\' | \'inherit\' | \'no-inherit\'\n' +
'    whitespace();\n' +
'    parse_InheritMode();\n' +
'    eventHandler.endNonterminal("CopyNamespacesDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_PreserveMode()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PreserveMode", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 214:                       // \'preserve\'\n' +
'      shift(214);                   // \'preserve\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(190);                   // \'no-preserve\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("PreserveMode", e0);\n' +
'  }\n' +
'\n' +
'  function parse_InheritMode()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InheritMode", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 157:                       // \'inherit\'\n' +
'      shift(157);                   // \'inherit\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(189);                   // \'no-inherit\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("InheritMode", e0);\n' +
'  }\n' +
'\n' +
'  function parse_DecimalFormatDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DecimalFormatDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(114);               // S^WS | \'(:\' | \'decimal-format\' | \'default\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 106:                       // \'decimal-format\'\n' +
'      shift(106);                   // \'decimal-format\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_EQName();\n' +
'      break;\n' +
'    default:\n' +
'      shift(109);                   // \'default\'\n' +
'      lookahead1W(45);              // S^WS | \'(:\' | \'decimal-format\'\n' +
'      shift(106);                   // \'decimal-format\'\n' +
'    }\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(180);             // S^WS | \'(:\' | \';\' | \'NaN\' | \'decimal-separator\' | \'digit\' |\n' +
'                                    // \'grouping-separator\' | \'infinity\' | \'minus-sign\' | \'pattern-separator\' |\n' +
'                                    // \'per-mille\' | \'percent\' | \'zero-digit\'\n' +
'      if (l1 == 53)                 // \';\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_DFPropertyName();\n' +
'      lookahead1W(29);              // S^WS | \'(:\' | \'=\'\n' +
'      shift(60);                    // \'=\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shift(11);                    // StringLiteral\n' +
'    }\n' +
'    eventHandler.endNonterminal("DecimalFormatDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_DFPropertyName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DFPropertyName", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 107:                       // \'decimal-separator\'\n' +
'      shift(107);                   // \'decimal-separator\'\n' +
'      break;\n' +
'    case 149:                       // \'grouping-separator\'\n' +
'      shift(149);                   // \'grouping-separator\'\n' +
'      break;\n' +
'    case 156:                       // \'infinity\'\n' +
'      shift(156);                   // \'infinity\'\n' +
'      break;\n' +
'    case 179:                       // \'minus-sign\'\n' +
'      shift(179);                   // \'minus-sign\'\n' +
'      break;\n' +
'    case 67:                        // \'NaN\'\n' +
'      shift(67);                    // \'NaN\'\n' +
'      break;\n' +
'    case 209:                       // \'percent\'\n' +
'      shift(209);                   // \'percent\'\n' +
'      break;\n' +
'    case 208:                       // \'per-mille\'\n' +
'      shift(208);                   // \'per-mille\'\n' +
'      break;\n' +
'    case 275:                       // \'zero-digit\'\n' +
'      shift(275);                   // \'zero-digit\'\n' +
'      break;\n' +
'    case 116:                       // \'digit\'\n' +
'      shift(116);                   // \'digit\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(207);                   // \'pattern-separator\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("DFPropertyName", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Import()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Import", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 153:                       // \'import\'\n' +
'      lookahead2W(126);             // S^WS | \'(:\' | \'module\' | \'schema\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 115353:                    // \'import\' \'schema\'\n' +
'      parse_SchemaImport();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ModuleImport();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Import", e0);\n' +
'  }\n' +
'\n' +
'  function parse_SchemaImport()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SchemaImport", e0);\n' +
'    shift(153);                     // \'import\'\n' +
'    lookahead1W(73);                // S^WS | \'(:\' | \'schema\'\n' +
'    shift(225);                     // \'schema\'\n' +
'    lookahead1W(137);               // URILiteral | S^WS | \'(:\' | \'default\' | \'namespace\'\n' +
'    if (l1 != 7)                    // URILiteral\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_SchemaPrefix();\n' +
'    }\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    lookahead1W(108);               // S^WS | \'(:\' | \';\' | \'at\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shift(7);                     // URILiteral\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(103);           // S^WS | \'(:\' | \',\' | \';\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(15);            // URILiteral | S^WS | \'(:\'\n' +
'        shift(7);                   // URILiteral\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("SchemaImport", e0);\n' +
'  }\n' +
'\n' +
'  function parse_SchemaPrefix()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SchemaPrefix", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 184:                       // \'namespace\'\n' +
'      shift(184);                   // \'namespace\'\n' +
'      lookahead1W(250);             // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NCName();\n' +
'      lookahead1W(29);              // S^WS | \'(:\' | \'=\'\n' +
'      shift(60);                    // \'=\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(109);                   // \'default\'\n' +
'      lookahead1W(47);              // S^WS | \'(:\' | \'element\'\n' +
'      shift(121);                   // \'element\'\n' +
'      lookahead1W(61);              // S^WS | \'(:\' | \'namespace\'\n' +
'      shift(184);                   // \'namespace\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("SchemaPrefix", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ModuleImport()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ModuleImport", e0);\n' +
'    shift(153);                     // \'import\'\n' +
'    lookahead1W(60);                // S^WS | \'(:\' | \'module\'\n' +
'    shift(182);                     // \'module\'\n' +
'    lookahead1W(90);                // URILiteral | S^WS | \'(:\' | \'namespace\'\n' +
'    if (l1 == 184)                  // \'namespace\'\n' +
'    {\n' +
'      shift(184);                   // \'namespace\'\n' +
'      lookahead1W(250);             // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NCName();\n' +
'      lookahead1W(29);              // S^WS | \'(:\' | \'=\'\n' +
'      shift(60);                    // \'=\'\n' +
'    }\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    lookahead1W(108);               // S^WS | \'(:\' | \';\' | \'at\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shift(7);                     // URILiteral\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(103);           // S^WS | \'(:\' | \',\' | \';\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(15);            // URILiteral | S^WS | \'(:\'\n' +
'        shift(7);                   // URILiteral\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("ModuleImport", e0);\n' +
'  }\n' +
'\n' +
'  function parse_NamespaceDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NamespaceDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(61);                // S^WS | \'(:\' | \'namespace\'\n' +
'    shift(184);                     // \'namespace\'\n' +
'    lookahead1W(250);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_NCName();\n' +
'    lookahead1W(29);                // S^WS | \'(:\' | \'=\'\n' +
'    shift(60);                      // \'=\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    eventHandler.endNonterminal("NamespaceDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_DefaultNamespaceDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(115);               // S^WS | \'(:\' | \'element\' | \'function\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 121:                       // \'element\'\n' +
'      shift(121);                   // \'element\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(145);                   // \'function\'\n' +
'    }\n' +
'    lookahead1W(61);                // S^WS | \'(:\' | \'namespace\'\n' +
'    shift(184);                     // \'namespace\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);\n' +
'  }\n' +
'\n' +
'  function try_DefaultNamespaceDecl()\n' +
'  {\n' +
'    shiftT(108);                    // \'declare\'\n' +
'    lookahead1W(46);                // S^WS | \'(:\' | \'default\'\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(115);               // S^WS | \'(:\' | \'element\' | \'function\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 121:                       // \'element\'\n' +
'      shiftT(121);                  // \'element\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(145);                  // \'function\'\n' +
'    }\n' +
'    lookahead1W(61);                // S^WS | \'(:\' | \'namespace\'\n' +
'    shiftT(184);                    // \'namespace\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shiftT(7);                      // URILiteral\n' +
'  }\n' +
'\n' +
'  function parse_FTOptionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTOptionDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(52);                // S^WS | \'(:\' | \'ft-option\'\n' +
'    shift(141);                     // \'ft-option\'\n' +
'    lookahead1W(81);                // S^WS | \'(:\' | \'using\'\n' +
'    whitespace();\n' +
'    parse_FTMatchOptions();\n' +
'    eventHandler.endNonterminal("FTOptionDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_AnnotatedDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AnnotatedDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(170);             // S^WS | \'%\' | \'(:\' | \'collection\' | \'function\' | \'index\' | \'integrity\' |\n' +
'                                    // \'updating\' | \'variable\'\n' +
'      if (l1 != 32                  // \'%\'\n' +
'       && l1 != 257)                // \'updating\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 257:                     // \'updating\'\n' +
'        whitespace();\n' +
'        parse_CompatibilityAnnotation();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_Annotation();\n' +
'      }\n' +
'    }\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 262:                       // \'variable\'\n' +
'      whitespace();\n' +
'      parse_VarDecl();\n' +
'      break;\n' +
'    case 145:                       // \'function\'\n' +
'      whitespace();\n' +
'      parse_FunctionDecl();\n' +
'      break;\n' +
'    case 95:                        // \'collection\'\n' +
'      whitespace();\n' +
'      parse_CollectionDecl();\n' +
'      break;\n' +
'    case 155:                       // \'index\'\n' +
'      whitespace();\n' +
'      parse_IndexDecl();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_ICDecl();\n' +
'    }\n' +
'    eventHandler.endNonterminal("AnnotatedDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_CompatibilityAnnotation()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompatibilityAnnotation", e0);\n' +
'    shift(257);                     // \'updating\'\n' +
'    eventHandler.endNonterminal("CompatibilityAnnotation", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Annotation()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Annotation", e0);\n' +
'    shift(32);                      // \'%\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(171);               // S^WS | \'%\' | \'(\' | \'(:\' | \'collection\' | \'function\' | \'index\' | \'integrity\' |\n' +
'                                    // \'updating\' | \'variable\'\n' +
'    if (l1 == 34)                   // \'(\'\n' +
'    {\n' +
'      shift(34);                    // \'(\'\n' +
'      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | \'(:\'\n' +
'      whitespace();\n' +
'      parse_Literal();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | \'(:\'\n' +
'        whitespace();\n' +
'        parse_Literal();\n' +
'      }\n' +
'      shift(37);                    // \')\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("Annotation", e0);\n' +
'  }\n' +
'\n' +
'  function try_Annotation()\n' +
'  {\n' +
'    shiftT(32);                     // \'%\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_EQName();\n' +
'    lookahead1W(171);               // S^WS | \'%\' | \'(\' | \'(:\' | \'collection\' | \'function\' | \'index\' | \'integrity\' |\n' +
'                                    // \'updating\' | \'variable\'\n' +
'    if (l1 == 34)                   // \'(\'\n' +
'    {\n' +
'      shiftT(34);                   // \'(\'\n' +
'      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | \'(:\'\n' +
'      try_Literal();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | \'(:\'\n' +
'        try_Literal();\n' +
'      }\n' +
'      shiftT(37);                   // \')\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_VarDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarDecl", e0);\n' +
'    shift(262);                     // \'variable\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(147);               // S^WS | \'(:\' | \':=\' | \'as\' | \'external\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(106);               // S^WS | \'(:\' | \':=\' | \'external\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 52:                        // \':=\'\n' +
'      shift(52);                    // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_VarValue();\n' +
'      break;\n' +
'    default:\n' +
'      shift(133);                   // \'external\'\n' +
'      lookahead1W(104);             // S^WS | \'(:\' | \':=\' | \';\'\n' +
'      if (l1 == 52)                 // \':=\'\n' +
'      {\n' +
'        shift(52);                  // \':=\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_VarDefaultValue();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("VarDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_VarValue()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarValue", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("VarValue", e0);\n' +
'  }\n' +
'\n' +
'  function parse_VarDefaultValue()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarDefaultValue", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("VarDefaultValue", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ContextItemDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ContextItemDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(43);                // S^WS | \'(:\' | \'context\'\n' +
'    shift(101);                     // \'context\'\n' +
'    lookahead1W(55);                // S^WS | \'(:\' | \'item\'\n' +
'    shift(165);                     // \'item\'\n' +
'    lookahead1W(147);               // S^WS | \'(:\' | \':=\' | \'as\' | \'external\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_ItemType();\n' +
'    }\n' +
'    lookahead1W(106);               // S^WS | \'(:\' | \':=\' | \'external\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 52:                        // \':=\'\n' +
'      shift(52);                    // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_VarValue();\n' +
'      break;\n' +
'    default:\n' +
'      shift(133);                   // \'external\'\n' +
'      lookahead1W(104);             // S^WS | \'(:\' | \':=\' | \';\'\n' +
'      if (l1 == 52)                 // \':=\'\n' +
'      {\n' +
'        shift(52);                  // \':=\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_VarDefaultValue();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("ContextItemDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ParamList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ParamList", e0);\n' +
'    parse_Param();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      whitespace();\n' +
'      parse_Param();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ParamList", e0);\n' +
'  }\n' +
'\n' +
'  function try_ParamList()\n' +
'  {\n' +
'    try_Param();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      try_Param();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_Param()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Param", e0);\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(143);               // S^WS | \'(:\' | \')\' | \',\' | \'as\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Param", e0);\n' +
'  }\n' +
'\n' +
'  function try_Param()\n' +
'  {\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_EQName();\n' +
'    lookahead1W(143);               // S^WS | \'(:\' | \')\' | \',\' | \'as\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FunctionBody()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionBody", e0);\n' +
'    parse_EnclosedExpr();\n' +
'    eventHandler.endNonterminal("FunctionBody", e0);\n' +
'  }\n' +
'\n' +
'  function try_FunctionBody()\n' +
'  {\n' +
'    try_EnclosedExpr();\n' +
'  }\n' +
'\n' +
'  function parse_EnclosedExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("EnclosedExpr", e0);\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("EnclosedExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_EnclosedExpr()\n' +
'  {\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_OptionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OptionDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(66);                // S^WS | \'(:\' | \'option\'\n' +
'    shift(199);                     // \'option\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(17);                // StringLiteral | S^WS | \'(:\'\n' +
'    shift(11);                      // StringLiteral\n' +
'    eventHandler.endNonterminal("OptionDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Expr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Expr", e0);\n' +
'    parse_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Expr", e0);\n' +
'  }\n' +
'\n' +
'  function try_Expr()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FLWORExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FLWORExpr", e0);\n' +
'    parse_InitialClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(173);             // S^WS | \'(:\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' | \'stable\' |\n' +
'                                    // \'where\'\n' +
'      if (l1 == 220)                // \'return\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_IntermediateClause();\n' +
'    }\n' +
'    whitespace();\n' +
'    parse_ReturnClause();\n' +
'    eventHandler.endNonterminal("FLWORExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_FLWORExpr()\n' +
'  {\n' +
'    try_InitialClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(173);             // S^WS | \'(:\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' | \'stable\' |\n' +
'                                    // \'where\'\n' +
'      if (l1 == 220)                // \'return\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_IntermediateClause();\n' +
'    }\n' +
'    try_ReturnClause();\n' +
'  }\n' +
'\n' +
'  function parse_InitialClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InitialClause", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(141);             // S^WS | \'$\' | \'(:\' | \'sliding\' | \'tumbling\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'      parse_ForClause();\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      parse_LetClause();\n' +
'      break;\n' +
'    default:\n' +
'      parse_WindowClause();\n' +
'    }\n' +
'    eventHandler.endNonterminal("InitialClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_InitialClause()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(141);             // S^WS | \'$\' | \'(:\' | \'sliding\' | \'tumbling\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'      try_ForClause();\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      try_LetClause();\n' +
'      break;\n' +
'    default:\n' +
'      try_WindowClause();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_IntermediateClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IntermediateClause", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'    case 174:                       // \'let\'\n' +
'      parse_InitialClause();\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      parse_WhereClause();\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      parse_GroupByClause();\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      parse_CountClause();\n' +
'      break;\n' +
'    default:\n' +
'      parse_OrderByClause();\n' +
'    }\n' +
'    eventHandler.endNonterminal("IntermediateClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_IntermediateClause()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'    case 174:                       // \'let\'\n' +
'      try_InitialClause();\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      try_WhereClause();\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      try_GroupByClause();\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      try_CountClause();\n' +
'      break;\n' +
'    default:\n' +
'      try_OrderByClause();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ForClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ForClause", e0);\n' +
'    shift(137);                     // \'for\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_ForBinding();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      whitespace();\n' +
'      parse_ForBinding();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ForClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_ForClause()\n' +
'  {\n' +
'    shiftT(137);                    // \'for\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    try_ForBinding();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      try_ForBinding();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ForBinding()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ForBinding", e0);\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(164);               // S^WS | \'(:\' | \'allowing\' | \'as\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(158);               // S^WS | \'(:\' | \'allowing\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 72)                   // \'allowing\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_AllowingEmpty();\n' +
'    }\n' +
'    lookahead1W(150);               // S^WS | \'(:\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_PositionalVar();\n' +
'    }\n' +
'    lookahead1W(122);               // S^WS | \'(:\' | \'in\' | \'score\'\n' +
'    if (l1 == 228)                  // \'score\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTScoreVar();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shift(154);                     // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("ForBinding", e0);\n' +
'  }\n' +
'\n' +
'  function try_ForBinding()\n' +
'  {\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(164);               // S^WS | \'(:\' | \'allowing\' | \'as\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(158);               // S^WS | \'(:\' | \'allowing\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 72)                   // \'allowing\'\n' +
'    {\n' +
'      try_AllowingEmpty();\n' +
'    }\n' +
'    lookahead1W(150);               // S^WS | \'(:\' | \'at\' | \'in\' | \'score\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      try_PositionalVar();\n' +
'    }\n' +
'    lookahead1W(122);               // S^WS | \'(:\' | \'in\' | \'score\'\n' +
'    if (l1 == 228)                  // \'score\'\n' +
'    {\n' +
'      try_FTScoreVar();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shiftT(154);                    // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_AllowingEmpty()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AllowingEmpty", e0);\n' +
'    shift(72);                      // \'allowing\'\n' +
'    lookahead1W(49);                // S^WS | \'(:\' | \'empty\'\n' +
'    shift(123);                     // \'empty\'\n' +
'    eventHandler.endNonterminal("AllowingEmpty", e0);\n' +
'  }\n' +
'\n' +
'  function try_AllowingEmpty()\n' +
'  {\n' +
'    shiftT(72);                     // \'allowing\'\n' +
'    lookahead1W(49);                // S^WS | \'(:\' | \'empty\'\n' +
'    shiftT(123);                    // \'empty\'\n' +
'  }\n' +
'\n' +
'  function parse_PositionalVar()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PositionalVar", e0);\n' +
'    shift(81);                      // \'at\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    eventHandler.endNonterminal("PositionalVar", e0);\n' +
'  }\n' +
'\n' +
'  function try_PositionalVar()\n' +
'  {\n' +
'    shiftT(81);                     // \'at\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'  }\n' +
'\n' +
'  function parse_FTScoreVar()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTScoreVar", e0);\n' +
'    shift(228);                     // \'score\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    eventHandler.endNonterminal("FTScoreVar", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTScoreVar()\n' +
'  {\n' +
'    shiftT(228);                    // \'score\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'  }\n' +
'\n' +
'  function parse_LetClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("LetClause", e0);\n' +
'    shift(174);                     // \'let\'\n' +
'    lookahead1W(96);                // S^WS | \'$\' | \'(:\' | \'score\'\n' +
'    whitespace();\n' +
'    parse_LetBinding();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(96);              // S^WS | \'$\' | \'(:\' | \'score\'\n' +
'      whitespace();\n' +
'      parse_LetBinding();\n' +
'    }\n' +
'    eventHandler.endNonterminal("LetClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_LetClause()\n' +
'  {\n' +
'    shiftT(174);                    // \'let\'\n' +
'    lookahead1W(96);                // S^WS | \'$\' | \'(:\' | \'score\'\n' +
'    try_LetBinding();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(96);              // S^WS | \'$\' | \'(:\' | \'score\'\n' +
'      try_LetBinding();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_LetBinding()\n' +
'  {\n' +
'    eventHandler.startNonterminal("LetBinding", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 31:                        // \'$\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(105);             // S^WS | \'(:\' | \':=\' | \'as\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_TypeDeclaration();\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      parse_FTScoreVar();\n' +
'    }\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shift(52);                      // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("LetBinding", e0);\n' +
'  }\n' +
'\n' +
'  function try_LetBinding()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 31:                        // \'$\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(105);             // S^WS | \'(:\' | \':=\' | \'as\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        try_TypeDeclaration();\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      try_FTScoreVar();\n' +
'    }\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shiftT(52);                     // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_WindowClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WindowClause", e0);\n' +
'    shift(137);                     // \'for\'\n' +
'    lookahead1W(135);               // S^WS | \'(:\' | \'sliding\' | \'tumbling\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 251:                       // \'tumbling\'\n' +
'      whitespace();\n' +
'      parse_TumblingWindowClause();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_SlidingWindowClause();\n' +
'    }\n' +
'    eventHandler.endNonterminal("WindowClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_WindowClause()\n' +
'  {\n' +
'    shiftT(137);                    // \'for\'\n' +
'    lookahead1W(135);               // S^WS | \'(:\' | \'sliding\' | \'tumbling\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 251:                       // \'tumbling\'\n' +
'      try_TumblingWindowClause();\n' +
'      break;\n' +
'    default:\n' +
'      try_SlidingWindowClause();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_TumblingWindowClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TumblingWindowClause", e0);\n' +
'    shift(251);                     // \'tumbling\'\n' +
'    lookahead1W(85);                // S^WS | \'(:\' | \'window\'\n' +
'    shift(269);                     // \'window\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shift(154);                     // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    whitespace();\n' +
'    parse_WindowStartCondition();\n' +
'    if (l1 == 126                   // \'end\'\n' +
'     || l1 == 198)                  // \'only\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_WindowEndCondition();\n' +
'    }\n' +
'    eventHandler.endNonterminal("TumblingWindowClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_TumblingWindowClause()\n' +
'  {\n' +
'    shiftT(251);                    // \'tumbling\'\n' +
'    lookahead1W(85);                // S^WS | \'(:\' | \'window\'\n' +
'    shiftT(269);                    // \'window\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shiftT(154);                    // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    try_WindowStartCondition();\n' +
'    if (l1 == 126                   // \'end\'\n' +
'     || l1 == 198)                  // \'only\'\n' +
'    {\n' +
'      try_WindowEndCondition();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_SlidingWindowClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SlidingWindowClause", e0);\n' +
'    shift(234);                     // \'sliding\'\n' +
'    lookahead1W(85);                // S^WS | \'(:\' | \'window\'\n' +
'    shift(269);                     // \'window\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shift(154);                     // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    whitespace();\n' +
'    parse_WindowStartCondition();\n' +
'    whitespace();\n' +
'    parse_WindowEndCondition();\n' +
'    eventHandler.endNonterminal("SlidingWindowClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_SlidingWindowClause()\n' +
'  {\n' +
'    shiftT(234);                    // \'sliding\'\n' +
'    lookahead1W(85);                // S^WS | \'(:\' | \'window\'\n' +
'    shiftT(269);                    // \'window\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shiftT(154);                    // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    try_WindowStartCondition();\n' +
'    try_WindowEndCondition();\n' +
'  }\n' +
'\n' +
'  function parse_WindowStartCondition()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WindowStartCondition", e0);\n' +
'    shift(237);                     // \'start\'\n' +
'    lookahead1W(163);               // S^WS | \'$\' | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    whitespace();\n' +
'    parse_WindowVars();\n' +
'    lookahead1W(83);                // S^WS | \'(:\' | \'when\'\n' +
'    shift(265);                     // \'when\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("WindowStartCondition", e0);\n' +
'  }\n' +
'\n' +
'  function try_WindowStartCondition()\n' +
'  {\n' +
'    shiftT(237);                    // \'start\'\n' +
'    lookahead1W(163);               // S^WS | \'$\' | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    try_WindowVars();\n' +
'    lookahead1W(83);                // S^WS | \'(:\' | \'when\'\n' +
'    shiftT(265);                    // \'when\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_WindowEndCondition()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WindowEndCondition", e0);\n' +
'    if (l1 == 198)                  // \'only\'\n' +
'    {\n' +
'      shift(198);                   // \'only\'\n' +
'    }\n' +
'    lookahead1W(50);                // S^WS | \'(:\' | \'end\'\n' +
'    shift(126);                     // \'end\'\n' +
'    lookahead1W(163);               // S^WS | \'$\' | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    whitespace();\n' +
'    parse_WindowVars();\n' +
'    lookahead1W(83);                // S^WS | \'(:\' | \'when\'\n' +
'    shift(265);                     // \'when\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("WindowEndCondition", e0);\n' +
'  }\n' +
'\n' +
'  function try_WindowEndCondition()\n' +
'  {\n' +
'    if (l1 == 198)                  // \'only\'\n' +
'    {\n' +
'      shiftT(198);                  // \'only\'\n' +
'    }\n' +
'    lookahead1W(50);                // S^WS | \'(:\' | \'end\'\n' +
'    shiftT(126);                    // \'end\'\n' +
'    lookahead1W(163);               // S^WS | \'$\' | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    try_WindowVars();\n' +
'    lookahead1W(83);                // S^WS | \'(:\' | \'when\'\n' +
'    shiftT(265);                    // \'when\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_WindowVars()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WindowVars", e0);\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_CurrentItem();\n' +
'    }\n' +
'    lookahead1W(159);               // S^WS | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_PositionalVar();\n' +
'    }\n' +
'    lookahead1W(153);               // S^WS | \'(:\' | \'next\' | \'previous\' | \'when\'\n' +
'    if (l1 == 215)                  // \'previous\'\n' +
'    {\n' +
'      shift(215);                   // \'previous\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_PreviousItem();\n' +
'    }\n' +
'    lookahead1W(127);               // S^WS | \'(:\' | \'next\' | \'when\'\n' +
'    if (l1 == 187)                  // \'next\'\n' +
'    {\n' +
'      shift(187);                   // \'next\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NextItem();\n' +
'    }\n' +
'    eventHandler.endNonterminal("WindowVars", e0);\n' +
'  }\n' +
'\n' +
'  function try_WindowVars()\n' +
'  {\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_CurrentItem();\n' +
'    }\n' +
'    lookahead1W(159);               // S^WS | \'(:\' | \'at\' | \'next\' | \'previous\' | \'when\'\n' +
'    if (l1 == 81)                   // \'at\'\n' +
'    {\n' +
'      try_PositionalVar();\n' +
'    }\n' +
'    lookahead1W(153);               // S^WS | \'(:\' | \'next\' | \'previous\' | \'when\'\n' +
'    if (l1 == 215)                  // \'previous\'\n' +
'    {\n' +
'      shiftT(215);                  // \'previous\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_PreviousItem();\n' +
'    }\n' +
'    lookahead1W(127);               // S^WS | \'(:\' | \'next\' | \'when\'\n' +
'    if (l1 == 187)                  // \'next\'\n' +
'    {\n' +
'      shiftT(187);                  // \'next\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_NextItem();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CurrentItem()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CurrentItem", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("CurrentItem", e0);\n' +
'  }\n' +
'\n' +
'  function try_CurrentItem()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_PreviousItem()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PreviousItem", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("PreviousItem", e0);\n' +
'  }\n' +
'\n' +
'  function try_PreviousItem()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_NextItem()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NextItem", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("NextItem", e0);\n' +
'  }\n' +
'\n' +
'  function try_NextItem()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_CountClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CountClause", e0);\n' +
'    shift(105);                     // \'count\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    eventHandler.endNonterminal("CountClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_CountClause()\n' +
'  {\n' +
'    shiftT(105);                    // \'count\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'  }\n' +
'\n' +
'  function parse_WhereClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WhereClause", e0);\n' +
'    shift(266);                     // \'where\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("WhereClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_WhereClause()\n' +
'  {\n' +
'    shiftT(266);                    // \'where\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_GroupByClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("GroupByClause", e0);\n' +
'    shift(148);                     // \'group\'\n' +
'    lookahead1W(34);                // S^WS | \'(:\' | \'by\'\n' +
'    shift(87);                      // \'by\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_GroupingSpecList();\n' +
'    eventHandler.endNonterminal("GroupByClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_GroupByClause()\n' +
'  {\n' +
'    shiftT(148);                    // \'group\'\n' +
'    lookahead1W(34);                // S^WS | \'(:\' | \'by\'\n' +
'    shiftT(87);                     // \'by\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    try_GroupingSpecList();\n' +
'  }\n' +
'\n' +
'  function parse_GroupingSpecList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("GroupingSpecList", e0);\n' +
'    parse_GroupingSpec();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(176);             // S^WS | \'(:\' | \',\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' |\n' +
'                                    // \'stable\' | \'where\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      whitespace();\n' +
'      parse_GroupingSpec();\n' +
'    }\n' +
'    eventHandler.endNonterminal("GroupingSpecList", e0);\n' +
'  }\n' +
'\n' +
'  function try_GroupingSpecList()\n' +
'  {\n' +
'    try_GroupingSpec();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(176);             // S^WS | \'(:\' | \',\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' |\n' +
'                                    // \'stable\' | \'where\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      try_GroupingSpec();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_GroupingSpec()\n' +
'  {\n' +
'    eventHandler.startNonterminal("GroupingSpec", e0);\n' +
'    parse_GroupingVariable();\n' +
'    lookahead1W(182);               // S^WS | \'(:\' | \',\' | \':=\' | \'as\' | \'collation\' | \'count\' | \'for\' | \'group\' |\n' +
'                                    // \'let\' | \'order\' | \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 52                    // \':=\'\n' +
'     || l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(27);              // S^WS | \'(:\' | \':=\'\n' +
'      shift(52);                    // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    if (l1 == 94)                   // \'collation\'\n' +
'    {\n' +
'      shift(94);                    // \'collation\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shift(7);                     // URILiteral\n' +
'    }\n' +
'    eventHandler.endNonterminal("GroupingSpec", e0);\n' +
'  }\n' +
'\n' +
'  function try_GroupingSpec()\n' +
'  {\n' +
'    try_GroupingVariable();\n' +
'    lookahead1W(182);               // S^WS | \'(:\' | \',\' | \':=\' | \'as\' | \'collation\' | \'count\' | \'for\' | \'group\' |\n' +
'                                    // \'let\' | \'order\' | \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 52                    // \':=\'\n' +
'     || l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        try_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(27);              // S^WS | \'(:\' | \':=\'\n' +
'      shiftT(52);                   // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'    if (l1 == 94)                   // \'collation\'\n' +
'    {\n' +
'      shiftT(94);                   // \'collation\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shiftT(7);                    // URILiteral\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_GroupingVariable()\n' +
'  {\n' +
'    eventHandler.startNonterminal("GroupingVariable", e0);\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    eventHandler.endNonterminal("GroupingVariable", e0);\n' +
'  }\n' +
'\n' +
'  function try_GroupingVariable()\n' +
'  {\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'  }\n' +
'\n' +
'  function parse_OrderByClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderByClause", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 201:                       // \'order\'\n' +
'      shift(201);                   // \'order\'\n' +
'      lookahead1W(34);              // S^WS | \'(:\' | \'by\'\n' +
'      shift(87);                    // \'by\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(236);                   // \'stable\'\n' +
'      lookahead1W(67);              // S^WS | \'(:\' | \'order\'\n' +
'      shift(201);                   // \'order\'\n' +
'      lookahead1W(34);              // S^WS | \'(:\' | \'by\'\n' +
'      shift(87);                    // \'by\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_OrderSpecList();\n' +
'    eventHandler.endNonterminal("OrderByClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrderByClause()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 201:                       // \'order\'\n' +
'      shiftT(201);                  // \'order\'\n' +
'      lookahead1W(34);              // S^WS | \'(:\' | \'by\'\n' +
'      shiftT(87);                   // \'by\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(236);                  // \'stable\'\n' +
'      lookahead1W(67);              // S^WS | \'(:\' | \'order\'\n' +
'      shiftT(201);                  // \'order\'\n' +
'      lookahead1W(34);              // S^WS | \'(:\' | \'by\'\n' +
'      shiftT(87);                   // \'by\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_OrderSpecList();\n' +
'  }\n' +
'\n' +
'  function parse_OrderSpecList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderSpecList", e0);\n' +
'    parse_OrderSpec();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(176);             // S^WS | \'(:\' | \',\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' |\n' +
'                                    // \'stable\' | \'where\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_OrderSpec();\n' +
'    }\n' +
'    eventHandler.endNonterminal("OrderSpecList", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrderSpecList()\n' +
'  {\n' +
'    try_OrderSpec();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(176);             // S^WS | \'(:\' | \',\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' |\n' +
'                                    // \'stable\' | \'where\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_OrderSpec();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_OrderSpec()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderSpec", e0);\n' +
'    parse_ExprSingle();\n' +
'    whitespace();\n' +
'    parse_OrderModifier();\n' +
'    eventHandler.endNonterminal("OrderSpec", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrderSpec()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'    try_OrderModifier();\n' +
'  }\n' +
'\n' +
'  function parse_OrderModifier()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderModifier", e0);\n' +
'    if (l1 == 80                    // \'ascending\'\n' +
'     || l1 == 113)                  // \'descending\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 80:                      // \'ascending\'\n' +
'        shift(80);                  // \'ascending\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(113);                 // \'descending\'\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(179);               // S^WS | \'(:\' | \',\' | \'collation\' | \'count\' | \'empty\' | \'for\' | \'group\' | \'let\' |\n' +
'                                    // \'order\' | \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 123)                  // \'empty\'\n' +
'    {\n' +
'      shift(123);                   // \'empty\'\n' +
'      lookahead1W(121);             // S^WS | \'(:\' | \'greatest\' | \'least\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 147:                     // \'greatest\'\n' +
'        shift(147);                 // \'greatest\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(173);                 // \'least\'\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(177);               // S^WS | \'(:\' | \',\' | \'collation\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' |\n' +
'                                    // \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 94)                   // \'collation\'\n' +
'    {\n' +
'      shift(94);                    // \'collation\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shift(7);                     // URILiteral\n' +
'    }\n' +
'    eventHandler.endNonterminal("OrderModifier", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrderModifier()\n' +
'  {\n' +
'    if (l1 == 80                    // \'ascending\'\n' +
'     || l1 == 113)                  // \'descending\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 80:                      // \'ascending\'\n' +
'        shiftT(80);                 // \'ascending\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(113);                // \'descending\'\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(179);               // S^WS | \'(:\' | \',\' | \'collation\' | \'count\' | \'empty\' | \'for\' | \'group\' | \'let\' |\n' +
'                                    // \'order\' | \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 123)                  // \'empty\'\n' +
'    {\n' +
'      shiftT(123);                  // \'empty\'\n' +
'      lookahead1W(121);             // S^WS | \'(:\' | \'greatest\' | \'least\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 147:                     // \'greatest\'\n' +
'        shiftT(147);                // \'greatest\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(173);                // \'least\'\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(177);               // S^WS | \'(:\' | \',\' | \'collation\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' |\n' +
'                                    // \'return\' | \'stable\' | \'where\'\n' +
'    if (l1 == 94)                   // \'collation\'\n' +
'    {\n' +
'      shiftT(94);                   // \'collation\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shiftT(7);                    // URILiteral\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ReturnClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ReturnClause", e0);\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("ReturnClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_ReturnClause()\n' +
'  {\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_QuantifiedExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("QuantifiedExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 235:                       // \'some\'\n' +
'      shift(235);                   // \'some\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(129);                   // \'every\'\n' +
'    }\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shift(154);                     // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(110);             // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(53);              // S^WS | \'(:\' | \'in\'\n' +
'      shift(154);                   // \'in\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    shift(224);                     // \'satisfies\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("QuantifiedExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_QuantifiedExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 235:                       // \'some\'\n' +
'      shiftT(235);                  // \'some\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(129);                  // \'every\'\n' +
'    }\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(110);               // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(53);                // S^WS | \'(:\' | \'in\'\n' +
'    shiftT(154);                    // \'in\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(110);             // S^WS | \'(:\' | \'as\' | \'in\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        try_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(53);              // S^WS | \'(:\' | \'in\'\n' +
'      shiftT(154);                  // \'in\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'    shiftT(224);                    // \'satisfies\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_SwitchExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SwitchExpr", e0);\n' +
'    shift(243);                     // \'switch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      whitespace();\n' +
'      parse_SwitchCaseClause();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("SwitchExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_SwitchExpr()\n' +
'  {\n' +
'    shiftT(243);                    // \'switch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      try_SwitchCaseClause();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_SwitchCaseClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SwitchCaseClause", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      shift(88);                    // \'case\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_SwitchCaseOperand();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("SwitchCaseClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_SwitchCaseClause()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      shiftT(88);                   // \'case\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_SwitchCaseOperand();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_SwitchCaseOperand()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SwitchCaseOperand", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("SwitchCaseOperand", e0);\n' +
'  }\n' +
'\n' +
'  function try_SwitchCaseOperand()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_TypeswitchExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TypeswitchExpr", e0);\n' +
'    shift(253);                     // \'typeswitch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      whitespace();\n' +
'      parse_CaseClause();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(95);                // S^WS | \'$\' | \'(:\' | \'return\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'    }\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("TypeswitchExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TypeswitchExpr()\n' +
'  {\n' +
'    shiftT(253);                    // \'typeswitch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      try_CaseClause();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(95);                // S^WS | \'$\' | \'(:\' | \'return\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'    }\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_CaseClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CaseClause", e0);\n' +
'    shift(88);                      // \'case\'\n' +
'    lookahead1W(261);               // EQName^Token | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'    }\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    whitespace();\n' +
'    parse_SequenceTypeUnion();\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("CaseClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_CaseClause()\n' +
'  {\n' +
'    shiftT(88);                     // \'case\'\n' +
'    lookahead1W(261);               // EQName^Token | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'    }\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    try_SequenceTypeUnion();\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_SequenceTypeUnion()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SequenceTypeUnion", e0);\n' +
'    parse_SequenceType();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(134);             // S^WS | \'(:\' | \'return\' | \'|\'\n' +
'      if (l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(279);                   // \'|\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("SequenceTypeUnion", e0);\n' +
'  }\n' +
'\n' +
'  function try_SequenceTypeUnion()\n' +
'  {\n' +
'    try_SequenceType();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(134);             // S^WS | \'(:\' | \'return\' | \'|\'\n' +
'      if (l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(279);                  // \'|\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      try_SequenceType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_IfExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IfExpr", e0);\n' +
'    shift(152);                     // \'if\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(77);                // S^WS | \'(:\' | \'then\'\n' +
'    shift(245);                     // \'then\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(122);                     // \'else\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("IfExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_IfExpr()\n' +
'  {\n' +
'    shiftT(152);                    // \'if\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    lookahead1W(77);                // S^WS | \'(:\' | \'then\'\n' +
'    shiftT(245);                    // \'then\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(122);                    // \'else\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_TryCatchExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TryCatchExpr", e0);\n' +
'    parse_TryClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(36);              // S^WS | \'(:\' | \'catch\'\n' +
'      whitespace();\n' +
'      parse_CatchClause();\n' +
'      lookahead1W(184);             // S^WS | EOF | \'(:\' | \')\' | \',\' | \':\' | \';\' | \']\' | \'after\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'catch\' | \'collation\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'else\' | \'empty\' | \'end\' | \'for\' | \'group\' | \'into\' | \'let\' |\n' +
'                                    // \'modify\' | \'only\' | \'order\' | \'return\' | \'satisfies\' | \'stable\' | \'start\' |\n' +
'                                    // \'where\' | \'with\' | \'|}\' | \'}\'\n' +
'      if (l1 != 91)                 // \'catch\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("TryCatchExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TryCatchExpr()\n' +
'  {\n' +
'    try_TryClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(36);              // S^WS | \'(:\' | \'catch\'\n' +
'      try_CatchClause();\n' +
'      lookahead1W(184);             // S^WS | EOF | \'(:\' | \')\' | \',\' | \':\' | \';\' | \']\' | \'after\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'catch\' | \'collation\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'else\' | \'empty\' | \'end\' | \'for\' | \'group\' | \'into\' | \'let\' |\n' +
'                                    // \'modify\' | \'only\' | \'order\' | \'return\' | \'satisfies\' | \'stable\' | \'start\' |\n' +
'                                    // \'where\' | \'with\' | \'|}\' | \'}\'\n' +
'      if (l1 != 91)                 // \'catch\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_TryClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TryClause", e0);\n' +
'    shift(250);                     // \'try\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_TryTargetExpr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("TryClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_TryClause()\n' +
'  {\n' +
'    shiftT(250);                    // \'try\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_TryTargetExpr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_TryTargetExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TryTargetExpr", e0);\n' +
'    parse_Expr();\n' +
'    eventHandler.endNonterminal("TryTargetExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TryTargetExpr()\n' +
'  {\n' +
'    try_Expr();\n' +
'  }\n' +
'\n' +
'  function parse_CatchClause()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CatchClause", e0);\n' +
'    shift(91);                      // \'catch\'\n' +
'    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_CatchErrorList();\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("CatchClause", e0);\n' +
'  }\n' +
'\n' +
'  function try_CatchClause()\n' +
'  {\n' +
'    shiftT(91);                     // \'catch\'\n' +
'    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_CatchErrorList();\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_CatchErrorList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CatchErrorList", e0);\n' +
'    parse_NameTest();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(136);             // S^WS | \'(:\' | \'{\' | \'|\'\n' +
'      if (l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(279);                   // \'|\'\n' +
'      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NameTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CatchErrorList", e0);\n' +
'  }\n' +
'\n' +
'  function try_CatchErrorList()\n' +
'  {\n' +
'    try_NameTest();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(136);             // S^WS | \'(:\' | \'{\' | \'|\'\n' +
'      if (l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(279);                  // \'|\'\n' +
'      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_NameTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_OrExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrExpr", e0);\n' +
'    parse_AndExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 200)                // \'or\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(200);                   // \'or\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_AndExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("OrExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrExpr()\n' +
'  {\n' +
'    try_AndExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 200)                // \'or\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(200);                  // \'or\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_AndExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AndExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AndExpr", e0);\n' +
'    parse_ComparisonExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 75)                 // \'and\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(75);                    // \'and\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ComparisonExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("AndExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_AndExpr()\n' +
'  {\n' +
'    try_ComparisonExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 75)                 // \'and\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(75);                   // \'and\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ComparisonExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ComparisonExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ComparisonExpr", e0);\n' +
'    parse_FTContainsExpr();\n' +
'    if (l1 == 27                    // \'!=\'\n' +
'     || l1 == 54                    // \'<\'\n' +
'     || l1 == 57                    // \'<<\'\n' +
'     || l1 == 58                    // \'<=\'\n' +
'     || l1 == 60                    // \'=\'\n' +
'     || l1 == 61                    // \'>\'\n' +
'     || l1 == 62                    // \'>=\'\n' +
'     || l1 == 63                    // \'>>\'\n' +
'     || l1 == 128                   // \'eq\'\n' +
'     || l1 == 146                   // \'ge\'\n' +
'     || l1 == 150                   // \'gt\'\n' +
'     || l1 == 164                   // \'is\'\n' +
'     || l1 == 172                   // \'le\'\n' +
'     || l1 == 178                   // \'lt\'\n' +
'     || l1 == 186)                  // \'ne\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 128:                     // \'eq\'\n' +
'      case 146:                     // \'ge\'\n' +
'      case 150:                     // \'gt\'\n' +
'      case 172:                     // \'le\'\n' +
'      case 178:                     // \'lt\'\n' +
'      case 186:                     // \'ne\'\n' +
'        whitespace();\n' +
'        parse_ValueComp();\n' +
'        break;\n' +
'      case 57:                      // \'<<\'\n' +
'      case 63:                      // \'>>\'\n' +
'      case 164:                     // \'is\'\n' +
'        whitespace();\n' +
'        parse_NodeComp();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_GeneralComp();\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_FTContainsExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ComparisonExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ComparisonExpr()\n' +
'  {\n' +
'    try_FTContainsExpr();\n' +
'    if (l1 == 27                    // \'!=\'\n' +
'     || l1 == 54                    // \'<\'\n' +
'     || l1 == 57                    // \'<<\'\n' +
'     || l1 == 58                    // \'<=\'\n' +
'     || l1 == 60                    // \'=\'\n' +
'     || l1 == 61                    // \'>\'\n' +
'     || l1 == 62                    // \'>=\'\n' +
'     || l1 == 63                    // \'>>\'\n' +
'     || l1 == 128                   // \'eq\'\n' +
'     || l1 == 146                   // \'ge\'\n' +
'     || l1 == 150                   // \'gt\'\n' +
'     || l1 == 164                   // \'is\'\n' +
'     || l1 == 172                   // \'le\'\n' +
'     || l1 == 178                   // \'lt\'\n' +
'     || l1 == 186)                  // \'ne\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 128:                     // \'eq\'\n' +
'      case 146:                     // \'ge\'\n' +
'      case 150:                     // \'gt\'\n' +
'      case 172:                     // \'le\'\n' +
'      case 178:                     // \'lt\'\n' +
'      case 186:                     // \'ne\'\n' +
'        try_ValueComp();\n' +
'        break;\n' +
'      case 57:                      // \'<<\'\n' +
'      case 63:                      // \'>>\'\n' +
'      case 164:                     // \'is\'\n' +
'        try_NodeComp();\n' +
'        break;\n' +
'      default:\n' +
'        try_GeneralComp();\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_FTContainsExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTContainsExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTContainsExpr", e0);\n' +
'    parse_StringConcatExpr();\n' +
'    if (l1 == 99)                   // \'contains\'\n' +
'    {\n' +
'      shift(99);                    // \'contains\'\n' +
'      lookahead1W(76);              // S^WS | \'(:\' | \'text\'\n' +
'      shift(244);                   // \'text\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      whitespace();\n' +
'      parse_FTSelection();\n' +
'      if (l1 == 271)                // \'without\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_FTIgnoreOption();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTContainsExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTContainsExpr()\n' +
'  {\n' +
'    try_StringConcatExpr();\n' +
'    if (l1 == 99)                   // \'contains\'\n' +
'    {\n' +
'      shiftT(99);                   // \'contains\'\n' +
'      lookahead1W(76);              // S^WS | \'(:\' | \'text\'\n' +
'      shiftT(244);                  // \'text\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      try_FTSelection();\n' +
'      if (l1 == 271)                // \'without\'\n' +
'      {\n' +
'        try_FTIgnoreOption();\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_StringConcatExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("StringConcatExpr", e0);\n' +
'    parse_RangeExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 280)                // \'||\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(280);                   // \'||\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_RangeExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("StringConcatExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_StringConcatExpr()\n' +
'  {\n' +
'    try_RangeExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 280)                // \'||\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(280);                  // \'||\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_RangeExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_RangeExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("RangeExpr", e0);\n' +
'    parse_AdditiveExpr();\n' +
'    if (l1 == 248)                  // \'to\'\n' +
'    {\n' +
'      shift(248);                   // \'to\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_AdditiveExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("RangeExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_RangeExpr()\n' +
'  {\n' +
'    try_AdditiveExpr();\n' +
'    if (l1 == 248)                  // \'to\'\n' +
'    {\n' +
'      shiftT(248);                  // \'to\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_AdditiveExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AdditiveExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AdditiveExpr", e0);\n' +
'    parse_MultiplicativeExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 40                  // \'+\'\n' +
'       && l1 != 42)                 // \'-\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 40:                      // \'+\'\n' +
'        shift(40);                  // \'+\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(42);                  // \'-\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_MultiplicativeExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("AdditiveExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_AdditiveExpr()\n' +
'  {\n' +
'    try_MultiplicativeExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 40                  // \'+\'\n' +
'       && l1 != 42)                 // \'-\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 40:                      // \'+\'\n' +
'        shiftT(40);                 // \'+\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(42);                 // \'-\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_MultiplicativeExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_MultiplicativeExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("MultiplicativeExpr", e0);\n' +
'    parse_UnionExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 38                  // \'*\'\n' +
'       && l1 != 118                 // \'div\'\n' +
'       && l1 != 151                 // \'idiv\'\n' +
'       && l1 != 180)                // \'mod\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 38:                      // \'*\'\n' +
'        shift(38);                  // \'*\'\n' +
'        break;\n' +
'      case 118:                     // \'div\'\n' +
'        shift(118);                 // \'div\'\n' +
'        break;\n' +
'      case 151:                     // \'idiv\'\n' +
'        shift(151);                 // \'idiv\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(180);                 // \'mod\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_UnionExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("MultiplicativeExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_MultiplicativeExpr()\n' +
'  {\n' +
'    try_UnionExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 38                  // \'*\'\n' +
'       && l1 != 118                 // \'div\'\n' +
'       && l1 != 151                 // \'idiv\'\n' +
'       && l1 != 180)                // \'mod\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 38:                      // \'*\'\n' +
'        shiftT(38);                 // \'*\'\n' +
'        break;\n' +
'      case 118:                     // \'div\'\n' +
'        shiftT(118);                // \'div\'\n' +
'        break;\n' +
'      case 151:                     // \'idiv\'\n' +
'        shiftT(151);                // \'idiv\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(180);                // \'mod\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_UnionExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_UnionExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("UnionExpr", e0);\n' +
'    parse_IntersectExceptExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 254                 // \'union\'\n' +
'       && l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 254:                     // \'union\'\n' +
'        shift(254);                 // \'union\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(279);                 // \'|\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_IntersectExceptExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("UnionExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_UnionExpr()\n' +
'  {\n' +
'    try_IntersectExceptExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 254                 // \'union\'\n' +
'       && l1 != 279)                // \'|\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 254:                     // \'union\'\n' +
'        shiftT(254);                // \'union\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(279);                // \'|\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_IntersectExceptExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_IntersectExceptExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IntersectExceptExpr", e0);\n' +
'    parse_InstanceofExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(222);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 131                 // \'except\'\n' +
'       && l1 != 162)                // \'intersect\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 162:                     // \'intersect\'\n' +
'        shift(162);                 // \'intersect\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(131);                 // \'except\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_InstanceofExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("IntersectExceptExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_IntersectExceptExpr()\n' +
'  {\n' +
'    try_InstanceofExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(222);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 131                 // \'except\'\n' +
'       && l1 != 162)                // \'intersect\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 162:                     // \'intersect\'\n' +
'        shiftT(162);                // \'intersect\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(131);                // \'except\'\n' +
'      }\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_InstanceofExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_InstanceofExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InstanceofExpr", e0);\n' +
'    parse_TreatExpr();\n' +
'    lookahead1W(223);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 160)                  // \'instance\'\n' +
'    {\n' +
'      shift(160);                   // \'instance\'\n' +
'      lookahead1W(64);              // S^WS | \'(:\' | \'of\'\n' +
'      shift(196);                   // \'of\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("InstanceofExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_InstanceofExpr()\n' +
'  {\n' +
'    try_TreatExpr();\n' +
'    lookahead1W(223);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 160)                  // \'instance\'\n' +
'    {\n' +
'      shiftT(160);                  // \'instance\'\n' +
'      lookahead1W(64);              // S^WS | \'(:\' | \'of\'\n' +
'      shiftT(196);                  // \'of\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      try_SequenceType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_TreatExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TreatExpr", e0);\n' +
'    parse_CastableExpr();\n' +
'    lookahead1W(224);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'    if (l1 == 249)                  // \'treat\'\n' +
'    {\n' +
'      shift(249);                   // \'treat\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("TreatExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TreatExpr()\n' +
'  {\n' +
'    try_CastableExpr();\n' +
'    lookahead1W(224);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'    if (l1 == 249)                  // \'treat\'\n' +
'    {\n' +
'      shiftT(249);                  // \'treat\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      try_SequenceType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CastableExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CastableExpr", e0);\n' +
'    parse_CastExpr();\n' +
'    lookahead1W(225);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'castable\' | \'collation\' | \'contains\' | \'count\' |\n' +
'                                    // \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' |\n' +
'                                    // \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'    if (l1 == 90)                   // \'castable\'\n' +
'    {\n' +
'      shift(90);                    // \'castable\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SingleType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CastableExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_CastableExpr()\n' +
'  {\n' +
'    try_CastExpr();\n' +
'    lookahead1W(225);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'castable\' | \'collation\' | \'contains\' | \'count\' |\n' +
'                                    // \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' |\n' +
'                                    // \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'    if (l1 == 90)                   // \'castable\'\n' +
'    {\n' +
'      shiftT(90);                   // \'castable\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_SingleType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CastExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CastExpr", e0);\n' +
'    parse_UnaryExpr();\n' +
'    lookahead1W(227);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'cast\' | \'castable\' | \'collation\' | \'contains\' |\n' +
'                                    // \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' |\n' +
'                                    // \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' |\n' +
'                                    // \'start\' | \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 89)                   // \'cast\'\n' +
'    {\n' +
'      shift(89);                    // \'cast\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SingleType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CastExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_CastExpr()\n' +
'  {\n' +
'    try_UnaryExpr();\n' +
'    lookahead1W(227);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'cast\' | \'castable\' | \'collation\' | \'contains\' |\n' +
'                                    // \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' |\n' +
'                                    // \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' |\n' +
'                                    // \'start\' | \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 89)                   // \'cast\'\n' +
'    {\n' +
'      shiftT(89);                   // \'cast\'\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_SingleType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_UnaryExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("UnaryExpr", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      if (l1 != 40                  // \'+\'\n' +
'       && l1 != 42)                 // \'-\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 42:                      // \'-\'\n' +
'        shift(42);                  // \'-\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(40);                  // \'+\'\n' +
'      }\n' +
'    }\n' +
'    whitespace();\n' +
'    parse_ValueExpr();\n' +
'    eventHandler.endNonterminal("UnaryExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_UnaryExpr()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      if (l1 != 40                  // \'+\'\n' +
'       && l1 != 42)                 // \'-\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 42:                      // \'-\'\n' +
'        shiftT(42);                 // \'-\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(40);                 // \'+\'\n' +
'      }\n' +
'    }\n' +
'    try_ValueExpr();\n' +
'  }\n' +
'\n' +
'  function parse_ValueExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ValueExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 260:                       // \'validate\'\n' +
'      lookahead2W(246);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'lax\' | \'le\' | \'let\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'strict\' | \'times\' |\n' +
'                                    // \'to\' | \'treat\' | \'type\' | \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 87812:                     // \'validate\' \'lax\'\n' +
'    case 123140:                    // \'validate\' \'strict\'\n' +
'    case 129284:                    // \'validate\' \'type\'\n' +
'    case 141572:                    // \'validate\' \'{\'\n' +
'      parse_ValidateExpr();\n' +
'      break;\n' +
'    case 35:                        // \'(#\'\n' +
'      parse_ExtensionExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_SimpleMapExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ValueExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ValueExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 260:                       // \'validate\'\n' +
'      lookahead2W(246);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'lax\' | \'le\' | \'let\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'strict\' | \'times\' |\n' +
'                                    // \'to\' | \'treat\' | \'type\' | \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 87812:                     // \'validate\' \'lax\'\n' +
'    case 123140:                    // \'validate\' \'strict\'\n' +
'    case 129284:                    // \'validate\' \'type\'\n' +
'    case 141572:                    // \'validate\' \'{\'\n' +
'      try_ValidateExpr();\n' +
'      break;\n' +
'    case 35:                        // \'(#\'\n' +
'      try_ExtensionExpr();\n' +
'      break;\n' +
'    default:\n' +
'      try_SimpleMapExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_SimpleMapExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SimpleMapExpr", e0);\n' +
'    parse_PathExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 26)                 // \'!\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(26);                    // \'!\'\n' +
'      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_PathExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("SimpleMapExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_SimpleMapExpr()\n' +
'  {\n' +
'    try_PathExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 26)                 // \'!\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(26);                   // \'!\'\n' +
'      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_PathExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_GeneralComp()\n' +
'  {\n' +
'    eventHandler.startNonterminal("GeneralComp", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 60:                        // \'=\'\n' +
'      shift(60);                    // \'=\'\n' +
'      break;\n' +
'    case 27:                        // \'!=\'\n' +
'      shift(27);                    // \'!=\'\n' +
'      break;\n' +
'    case 54:                        // \'<\'\n' +
'      shift(54);                    // \'<\'\n' +
'      break;\n' +
'    case 58:                        // \'<=\'\n' +
'      shift(58);                    // \'<=\'\n' +
'      break;\n' +
'    case 61:                        // \'>\'\n' +
'      shift(61);                    // \'>\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(62);                    // \'>=\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("GeneralComp", e0);\n' +
'  }\n' +
'\n' +
'  function try_GeneralComp()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 60:                        // \'=\'\n' +
'      shiftT(60);                   // \'=\'\n' +
'      break;\n' +
'    case 27:                        // \'!=\'\n' +
'      shiftT(27);                   // \'!=\'\n' +
'      break;\n' +
'    case 54:                        // \'<\'\n' +
'      shiftT(54);                   // \'<\'\n' +
'      break;\n' +
'    case 58:                        // \'<=\'\n' +
'      shiftT(58);                   // \'<=\'\n' +
'      break;\n' +
'    case 61:                        // \'>\'\n' +
'      shiftT(61);                   // \'>\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(62);                   // \'>=\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ValueComp()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ValueComp", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 128:                       // \'eq\'\n' +
'      shift(128);                   // \'eq\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shift(186);                   // \'ne\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shift(178);                   // \'lt\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shift(172);                   // \'le\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shift(150);                   // \'gt\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(146);                   // \'ge\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("ValueComp", e0);\n' +
'  }\n' +
'\n' +
'  function try_ValueComp()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 128:                       // \'eq\'\n' +
'      shiftT(128);                  // \'eq\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shiftT(186);                  // \'ne\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shiftT(178);                  // \'lt\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shiftT(172);                  // \'le\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shiftT(150);                  // \'gt\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(146);                  // \'ge\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_NodeComp()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NodeComp", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 164:                       // \'is\'\n' +
'      shift(164);                   // \'is\'\n' +
'      break;\n' +
'    case 57:                        // \'<<\'\n' +
'      shift(57);                    // \'<<\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(63);                    // \'>>\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("NodeComp", e0);\n' +
'  }\n' +
'\n' +
'  function try_NodeComp()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 164:                       // \'is\'\n' +
'      shiftT(164);                  // \'is\'\n' +
'      break;\n' +
'    case 57:                        // \'<<\'\n' +
'      shiftT(57);                   // \'<<\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(63);                   // \'>>\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ValidateExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ValidateExpr", e0);\n' +
'    shift(260);                     // \'validate\'\n' +
'    lookahead1W(160);               // S^WS | \'(:\' | \'lax\' | \'strict\' | \'type\' | \'{\'\n' +
'    if (l1 != 276)                  // \'{\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 252:                     // \'type\'\n' +
'        shift(252);                 // \'type\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        whitespace();\n' +
'        parse_TypeName();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_ValidationMode();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("ValidateExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ValidateExpr()\n' +
'  {\n' +
'    shiftT(260);                    // \'validate\'\n' +
'    lookahead1W(160);               // S^WS | \'(:\' | \'lax\' | \'strict\' | \'type\' | \'{\'\n' +
'    if (l1 != 276)                  // \'{\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 252:                     // \'type\'\n' +
'        shiftT(252);                // \'type\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        try_TypeName();\n' +
'        break;\n' +
'      default:\n' +
'        try_ValidationMode();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_ValidationMode()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ValidationMode", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 171:                       // \'lax\'\n' +
'      shift(171);                   // \'lax\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(240);                   // \'strict\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("ValidationMode", e0);\n' +
'  }\n' +
'\n' +
'  function try_ValidationMode()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 171:                       // \'lax\'\n' +
'      shiftT(171);                  // \'lax\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(240);                  // \'strict\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ExtensionExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ExtensionExpr", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Pragma();\n' +
'      lookahead1W(100);             // S^WS | \'(#\' | \'(:\' | \'{\'\n' +
'      if (l1 != 35)                 // \'(#\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'    }\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("ExtensionExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ExtensionExpr()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      try_Pragma();\n' +
'      lookahead1W(100);             // S^WS | \'(#\' | \'(:\' | \'{\'\n' +
'      if (l1 != 35)                 // \'(#\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      try_Expr();\n' +
'    }\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_Pragma()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Pragma", e0);\n' +
'    shift(35);                      // \'(#\'\n' +
'    lookahead1(248);                // EQName^Token | S | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shift(21);                    // S\n' +
'    }\n' +
'    parse_EQName();\n' +
'    lookahead1(10);                 // S | \'#)\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shift(21);                    // S\n' +
'      lookahead1(0);                // PragmaContents\n' +
'      shift(1);                     // PragmaContents\n' +
'    }\n' +
'    lookahead1(5);                  // \'#)\'\n' +
'    shift(30);                      // \'#)\'\n' +
'    eventHandler.endNonterminal("Pragma", e0);\n' +
'  }\n' +
'\n' +
'  function try_Pragma()\n' +
'  {\n' +
'    shiftT(35);                     // \'(#\'\n' +
'    lookahead1(248);                // EQName^Token | S | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shiftT(21);                   // S\n' +
'    }\n' +
'    try_EQName();\n' +
'    lookahead1(10);                 // S | \'#)\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shiftT(21);                   // S\n' +
'      lookahead1(0);                // PragmaContents\n' +
'      shiftT(1);                    // PragmaContents\n' +
'    }\n' +
'    lookahead1(5);                  // \'#)\'\n' +
'    shiftT(30);                     // \'#)\'\n' +
'  }\n' +
'\n' +
'  function parse_PathExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PathExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 46:                        // \'/\'\n' +
'      shift(46);                    // \'/\'\n' +
'      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'!\' | \'!=\' | \'$\' | \'%\' | \'(\' | \'(:\' | \')\' | \'*\' |\n' +
'                                    // \'+\' | \',\' | \'-\' | \'.\' | \'..\' | \':\' | \';\' | \'<\' | \'<!--\' | \'<<\' | \'<=\' | \'<?\' |\n' +
'                                    // \'=\' | \'>\' | \'>=\' | \'>>\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'paragraphs\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sentences\' |\n' +
'                                    // \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' |\n' +
'                                    // \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' |\n' +
'                                    // \'where\' | \'while\' | \'with\' | \'words\' | \'xquery\' | \'{\' | \'{|\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 25:                      // EOF\n' +
'      case 26:                      // \'!\'\n' +
'      case 27:                      // \'!=\'\n' +
'      case 37:                      // \')\'\n' +
'      case 38:                      // \'*\'\n' +
'      case 40:                      // \'+\'\n' +
'      case 41:                      // \',\'\n' +
'      case 42:                      // \'-\'\n' +
'      case 49:                      // \':\'\n' +
'      case 53:                      // \';\'\n' +
'      case 57:                      // \'<<\'\n' +
'      case 58:                      // \'<=\'\n' +
'      case 60:                      // \'=\'\n' +
'      case 61:                      // \'>\'\n' +
'      case 62:                      // \'>=\'\n' +
'      case 63:                      // \'>>\'\n' +
'      case 69:                      // \']\'\n' +
'      case 87:                      // \'by\'\n' +
'      case 99:                      // \'contains\'\n' +
'      case 205:                     // \'paragraphs\'\n' +
'      case 232:                     // \'sentences\'\n' +
'      case 247:                     // \'times\'\n' +
'      case 273:                     // \'words\'\n' +
'      case 279:                     // \'|\'\n' +
'      case 280:                     // \'||\'\n' +
'      case 281:                     // \'|}\'\n' +
'      case 282:                     // \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_RelativePathExpr();\n' +
'      }\n' +
'      break;\n' +
'    case 47:                        // \'//\'\n' +
'      shift(47);                    // \'//\'\n' +
'      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_RelativePathExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_RelativePathExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("PathExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_PathExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 46:                        // \'/\'\n' +
'      shiftT(46);                   // \'/\'\n' +
'      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'!\' | \'!=\' | \'$\' | \'%\' | \'(\' | \'(:\' | \')\' | \'*\' |\n' +
'                                    // \'+\' | \',\' | \'-\' | \'.\' | \'..\' | \':\' | \';\' | \'<\' | \'<!--\' | \'<<\' | \'<=\' | \'<?\' |\n' +
'                                    // \'=\' | \'>\' | \'>=\' | \'>>\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'paragraphs\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sentences\' |\n' +
'                                    // \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' |\n' +
'                                    // \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' |\n' +
'                                    // \'where\' | \'while\' | \'with\' | \'words\' | \'xquery\' | \'{\' | \'{|\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 25:                      // EOF\n' +
'      case 26:                      // \'!\'\n' +
'      case 27:                      // \'!=\'\n' +
'      case 37:                      // \')\'\n' +
'      case 38:                      // \'*\'\n' +
'      case 40:                      // \'+\'\n' +
'      case 41:                      // \',\'\n' +
'      case 42:                      // \'-\'\n' +
'      case 49:                      // \':\'\n' +
'      case 53:                      // \';\'\n' +
'      case 57:                      // \'<<\'\n' +
'      case 58:                      // \'<=\'\n' +
'      case 60:                      // \'=\'\n' +
'      case 61:                      // \'>\'\n' +
'      case 62:                      // \'>=\'\n' +
'      case 63:                      // \'>>\'\n' +
'      case 69:                      // \']\'\n' +
'      case 87:                      // \'by\'\n' +
'      case 99:                      // \'contains\'\n' +
'      case 205:                     // \'paragraphs\'\n' +
'      case 232:                     // \'sentences\'\n' +
'      case 247:                     // \'times\'\n' +
'      case 273:                     // \'words\'\n' +
'      case 279:                     // \'|\'\n' +
'      case 280:                     // \'||\'\n' +
'      case 281:                     // \'|}\'\n' +
'      case 282:                     // \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        try_RelativePathExpr();\n' +
'      }\n' +
'      break;\n' +
'    case 47:                        // \'//\'\n' +
'      shiftT(47);                   // \'//\'\n' +
'      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'      try_RelativePathExpr();\n' +
'      break;\n' +
'    default:\n' +
'      try_RelativePathExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_RelativePathExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("RelativePathExpr", e0);\n' +
'    parse_StepExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 26:                      // \'!\'\n' +
'        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 25                  // EOF\n' +
'       && lk != 27                  // \'!=\'\n' +
'       && lk != 37                  // \')\'\n' +
'       && lk != 38                  // \'*\'\n' +
'       && lk != 40                  // \'+\'\n' +
'       && lk != 41                  // \',\'\n' +
'       && lk != 42                  // \'-\'\n' +
'       && lk != 46                  // \'/\'\n' +
'       && lk != 47                  // \'//\'\n' +
'       && lk != 49                  // \':\'\n' +
'       && lk != 53                  // \';\'\n' +
'       && lk != 54                  // \'<\'\n' +
'       && lk != 57                  // \'<<\'\n' +
'       && lk != 58                  // \'<=\'\n' +
'       && lk != 60                  // \'=\'\n' +
'       && lk != 61                  // \'>\'\n' +
'       && lk != 62                  // \'>=\'\n' +
'       && lk != 63                  // \'>>\'\n' +
'       && lk != 69                  // \']\'\n' +
'       && lk != 70                  // \'after\'\n' +
'       && lk != 75                  // \'and\'\n' +
'       && lk != 79                  // \'as\'\n' +
'       && lk != 80                  // \'ascending\'\n' +
'       && lk != 81                  // \'at\'\n' +
'       && lk != 84                  // \'before\'\n' +
'       && lk != 87                  // \'by\'\n' +
'       && lk != 88                  // \'case\'\n' +
'       && lk != 89                  // \'cast\'\n' +
'       && lk != 90                  // \'castable\'\n' +
'       && lk != 94                  // \'collation\'\n' +
'       && lk != 99                  // \'contains\'\n' +
'       && lk != 105                 // \'count\'\n' +
'       && lk != 109                 // \'default\'\n' +
'       && lk != 113                 // \'descending\'\n' +
'       && lk != 118                 // \'div\'\n' +
'       && lk != 122                 // \'else\'\n' +
'       && lk != 123                 // \'empty\'\n' +
'       && lk != 126                 // \'end\'\n' +
'       && lk != 128                 // \'eq\'\n' +
'       && lk != 131                 // \'except\'\n' +
'       && lk != 137                 // \'for\'\n' +
'       && lk != 146                 // \'ge\'\n' +
'       && lk != 148                 // \'group\'\n' +
'       && lk != 150                 // \'gt\'\n' +
'       && lk != 151                 // \'idiv\'\n' +
'       && lk != 160                 // \'instance\'\n' +
'       && lk != 162                 // \'intersect\'\n' +
'       && lk != 163                 // \'into\'\n' +
'       && lk != 164                 // \'is\'\n' +
'       && lk != 172                 // \'le\'\n' +
'       && lk != 174                 // \'let\'\n' +
'       && lk != 178                 // \'lt\'\n' +
'       && lk != 180                 // \'mod\'\n' +
'       && lk != 181                 // \'modify\'\n' +
'       && lk != 186                 // \'ne\'\n' +
'       && lk != 198                 // \'only\'\n' +
'       && lk != 200                 // \'or\'\n' +
'       && lk != 201                 // \'order\'\n' +
'       && lk != 205                 // \'paragraphs\'\n' +
'       && lk != 220                 // \'return\'\n' +
'       && lk != 224                 // \'satisfies\'\n' +
'       && lk != 232                 // \'sentences\'\n' +
'       && lk != 236                 // \'stable\'\n' +
'       && lk != 237                 // \'start\'\n' +
'       && lk != 247                 // \'times\'\n' +
'       && lk != 248                 // \'to\'\n' +
'       && lk != 249                 // \'treat\'\n' +
'       && lk != 254                 // \'union\'\n' +
'       && lk != 266                 // \'where\'\n' +
'       && lk != 270                 // \'with\'\n' +
'       && lk != 273                 // \'words\'\n' +
'       && lk != 279                 // \'|\'\n' +
'       && lk != 280                 // \'||\'\n' +
'       && lk != 281                 // \'|}\'\n' +
'       && lk != 282                 // \'}\'\n' +
'       && lk != 23578               // \'!\' \'/\'\n' +
'       && lk != 24090)              // \'!\' \'//\'\n' +
'      {\n' +
'        lk = memoized(2, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            switch (l1)\n' +
'            {\n' +
'            case 46:                // \'/\'\n' +
'              shiftT(46);           // \'/\'\n' +
'              break;\n' +
'            case 47:                // \'//\'\n' +
'              shiftT(47);           // \'//\'\n' +
'              break;\n' +
'            default:\n' +
'              shiftT(26);           // \'!\'\n' +
'            }\n' +
'            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'            try_StepExpr();\n' +
'            lk = -1;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            lk = -2;\n' +
'          }\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(2, e0, lk);\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 46                  // \'/\'\n' +
'       && lk != 47)                 // \'//\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 46:                      // \'/\'\n' +
'        shift(46);                  // \'/\'\n' +
'        break;\n' +
'      case 47:                      // \'//\'\n' +
'        shift(47);                  // \'//\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(26);                  // \'!\'\n' +
'      }\n' +
'      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_StepExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("RelativePathExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_RelativePathExpr()\n' +
'  {\n' +
'    try_StepExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 26:                      // \'!\'\n' +
'        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 25                  // EOF\n' +
'       && lk != 27                  // \'!=\'\n' +
'       && lk != 37                  // \')\'\n' +
'       && lk != 38                  // \'*\'\n' +
'       && lk != 40                  // \'+\'\n' +
'       && lk != 41                  // \',\'\n' +
'       && lk != 42                  // \'-\'\n' +
'       && lk != 46                  // \'/\'\n' +
'       && lk != 47                  // \'//\'\n' +
'       && lk != 49                  // \':\'\n' +
'       && lk != 53                  // \';\'\n' +
'       && lk != 54                  // \'<\'\n' +
'       && lk != 57                  // \'<<\'\n' +
'       && lk != 58                  // \'<=\'\n' +
'       && lk != 60                  // \'=\'\n' +
'       && lk != 61                  // \'>\'\n' +
'       && lk != 62                  // \'>=\'\n' +
'       && lk != 63                  // \'>>\'\n' +
'       && lk != 69                  // \']\'\n' +
'       && lk != 70                  // \'after\'\n' +
'       && lk != 75                  // \'and\'\n' +
'       && lk != 79                  // \'as\'\n' +
'       && lk != 80                  // \'ascending\'\n' +
'       && lk != 81                  // \'at\'\n' +
'       && lk != 84                  // \'before\'\n' +
'       && lk != 87                  // \'by\'\n' +
'       && lk != 88                  // \'case\'\n' +
'       && lk != 89                  // \'cast\'\n' +
'       && lk != 90                  // \'castable\'\n' +
'       && lk != 94                  // \'collation\'\n' +
'       && lk != 99                  // \'contains\'\n' +
'       && lk != 105                 // \'count\'\n' +
'       && lk != 109                 // \'default\'\n' +
'       && lk != 113                 // \'descending\'\n' +
'       && lk != 118                 // \'div\'\n' +
'       && lk != 122                 // \'else\'\n' +
'       && lk != 123                 // \'empty\'\n' +
'       && lk != 126                 // \'end\'\n' +
'       && lk != 128                 // \'eq\'\n' +
'       && lk != 131                 // \'except\'\n' +
'       && lk != 137                 // \'for\'\n' +
'       && lk != 146                 // \'ge\'\n' +
'       && lk != 148                 // \'group\'\n' +
'       && lk != 150                 // \'gt\'\n' +
'       && lk != 151                 // \'idiv\'\n' +
'       && lk != 160                 // \'instance\'\n' +
'       && lk != 162                 // \'intersect\'\n' +
'       && lk != 163                 // \'into\'\n' +
'       && lk != 164                 // \'is\'\n' +
'       && lk != 172                 // \'le\'\n' +
'       && lk != 174                 // \'let\'\n' +
'       && lk != 178                 // \'lt\'\n' +
'       && lk != 180                 // \'mod\'\n' +
'       && lk != 181                 // \'modify\'\n' +
'       && lk != 186                 // \'ne\'\n' +
'       && lk != 198                 // \'only\'\n' +
'       && lk != 200                 // \'or\'\n' +
'       && lk != 201                 // \'order\'\n' +
'       && lk != 205                 // \'paragraphs\'\n' +
'       && lk != 220                 // \'return\'\n' +
'       && lk != 224                 // \'satisfies\'\n' +
'       && lk != 232                 // \'sentences\'\n' +
'       && lk != 236                 // \'stable\'\n' +
'       && lk != 237                 // \'start\'\n' +
'       && lk != 247                 // \'times\'\n' +
'       && lk != 248                 // \'to\'\n' +
'       && lk != 249                 // \'treat\'\n' +
'       && lk != 254                 // \'union\'\n' +
'       && lk != 266                 // \'where\'\n' +
'       && lk != 270                 // \'with\'\n' +
'       && lk != 273                 // \'words\'\n' +
'       && lk != 279                 // \'|\'\n' +
'       && lk != 280                 // \'||\'\n' +
'       && lk != 281                 // \'|}\'\n' +
'       && lk != 282                 // \'}\'\n' +
'       && lk != 23578               // \'!\' \'/\'\n' +
'       && lk != 24090)              // \'!\' \'//\'\n' +
'      {\n' +
'        lk = memoized(2, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            switch (l1)\n' +
'            {\n' +
'            case 46:                // \'/\'\n' +
'              shiftT(46);           // \'/\'\n' +
'              break;\n' +
'            case 47:                // \'//\'\n' +
'              shiftT(47);           // \'//\'\n' +
'              break;\n' +
'            default:\n' +
'              shiftT(26);           // \'!\'\n' +
'            }\n' +
'            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'            try_StepExpr();\n' +
'            memoize(2, e0A, -1);\n' +
'            continue;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            memoize(2, e0A, -2);\n' +
'            break;\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 46                  // \'/\'\n' +
'       && lk != 47)                 // \'//\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 46:                      // \'/\'\n' +
'        shiftT(46);                 // \'/\'\n' +
'        break;\n' +
'      case 47:                      // \'//\'\n' +
'        shiftT(47);                 // \'//\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(26);                 // \'!\'\n' +
'      }\n' +
'      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'      try_StepExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_StepExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("StepExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      lookahead2W(282);             // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' |\n' +
'                                    // \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'paragraphs\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sentences\' |\n' +
'                                    // \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' |\n' +
'                                    // \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' |\n' +
'                                    // \'where\' | \'while\' | \'with\' | \'words\' | \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      lookahead2W(280);             // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'paragraphs\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sentences\' | \'sliding\' | \'some\' | \'stable\' | \'start\' |\n' +
'                                    // \'strict\' | \'switch\' | \'text\' | \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' |\n' +
'                                    // \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' | \'validate\' |\n' +
'                                    // \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' | \'words\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      lookahead2W(281);             // NCName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'paragraphs\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sentences\' | \'sliding\' | \'some\' | \'stable\' | \'start\' |\n' +
'                                    // \'strict\' | \'switch\' | \'text\' | \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' |\n' +
'                                    // \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' | \'validate\' |\n' +
'                                    // \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' | \'words\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'    case 119:                       // \'document\'\n' +
'    case 202:                       // \'ordered\'\n' +
'    case 244:                       // \'text\'\n' +
'    case 256:                       // \'unordered\'\n' +
'      lookahead2W(245);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'    case 152:                       // \'if\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      lookahead2W(238);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 93:                        // \'child\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'    case 229:                       // \'self\'\n' +
'      lookahead2W(244);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 6:                         // EQName^Token\n' +
'    case 70:                        // \'after\'\n' +
'    case 72:                        // \'allowing\'\n' +
'    case 75:                        // \'and\'\n' +
'    case 79:                        // \'as\'\n' +
'    case 80:                        // \'ascending\'\n' +
'    case 81:                        // \'at\'\n' +
'    case 83:                        // \'base-uri\'\n' +
'    case 84:                        // \'before\'\n' +
'    case 85:                        // \'boundary-space\'\n' +
'    case 86:                        // \'break\'\n' +
'    case 88:                        // \'case\'\n' +
'    case 89:                        // \'cast\'\n' +
'    case 90:                        // \'castable\'\n' +
'    case 91:                        // \'catch\'\n' +
'    case 94:                        // \'collation\'\n' +
'    case 97:                        // \'constraint\'\n' +
'    case 98:                        // \'construction\'\n' +
'    case 101:                       // \'context\'\n' +
'    case 102:                       // \'continue\'\n' +
'    case 103:                       // \'copy\'\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'    case 105:                       // \'count\'\n' +
'    case 106:                       // \'decimal-format\'\n' +
'    case 108:                       // \'declare\'\n' +
'    case 109:                       // \'default\'\n' +
'    case 110:                       // \'delete\'\n' +
'    case 113:                       // \'descending\'\n' +
'    case 118:                       // \'div\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 122:                       // \'else\'\n' +
'    case 123:                       // \'empty\'\n' +
'    case 125:                       // \'encoding\'\n' +
'    case 126:                       // \'end\'\n' +
'    case 128:                       // \'eq\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 131:                       // \'except\'\n' +
'    case 132:                       // \'exit\'\n' +
'    case 133:                       // \'external\'\n' +
'    case 134:                       // \'first\'\n' +
'    case 137:                       // \'for\'\n' +
'    case 141:                       // \'ft-option\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 146:                       // \'ge\'\n' +
'    case 148:                       // \'group\'\n' +
'    case 150:                       // \'gt\'\n' +
'    case 151:                       // \'idiv\'\n' +
'    case 153:                       // \'import\'\n' +
'    case 154:                       // \'in\'\n' +
'    case 155:                       // \'index\'\n' +
'    case 159:                       // \'insert\'\n' +
'    case 160:                       // \'instance\'\n' +
'    case 161:                       // \'integrity\'\n' +
'    case 162:                       // \'intersect\'\n' +
'    case 163:                       // \'into\'\n' +
'    case 164:                       // \'is\'\n' +
'    case 170:                       // \'last\'\n' +
'    case 171:                       // \'lax\'\n' +
'    case 172:                       // \'le\'\n' +
'    case 174:                       // \'let\'\n' +
'    case 176:                       // \'loop\'\n' +
'    case 178:                       // \'lt\'\n' +
'    case 180:                       // \'mod\'\n' +
'    case 181:                       // \'modify\'\n' +
'    case 182:                       // \'module\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 186:                       // \'ne\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 192:                       // \'nodes\'\n' +
'    case 198:                       // \'only\'\n' +
'    case 199:                       // \'option\'\n' +
'    case 200:                       // \'or\'\n' +
'    case 201:                       // \'order\'\n' +
'    case 203:                       // \'ordering\'\n' +
'    case 218:                       // \'rename\'\n' +
'    case 219:                       // \'replace\'\n' +
'    case 220:                       // \'return\'\n' +
'    case 221:                       // \'returning\'\n' +
'    case 222:                       // \'revalidation\'\n' +
'    case 224:                       // \'satisfies\'\n' +
'    case 225:                       // \'schema\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 228:                       // \'score\'\n' +
'    case 234:                       // \'sliding\'\n' +
'    case 235:                       // \'some\'\n' +
'    case 236:                       // \'stable\'\n' +
'    case 237:                       // \'start\'\n' +
'    case 240:                       // \'strict\'\n' +
'    case 248:                       // \'to\'\n' +
'    case 249:                       // \'treat\'\n' +
'    case 250:                       // \'try\'\n' +
'    case 251:                       // \'tumbling\'\n' +
'    case 252:                       // \'type\'\n' +
'    case 254:                       // \'union\'\n' +
'    case 257:                       // \'updating\'\n' +
'    case 260:                       // \'validate\'\n' +
'    case 261:                       // \'value\'\n' +
'    case 262:                       // \'variable\'\n' +
'    case 263:                       // \'version\'\n' +
'    case 266:                       // \'where\'\n' +
'    case 267:                       // \'while\'\n' +
'    case 270:                       // \'with\'\n' +
'    case 274:                       // \'xquery\'\n' +
'      lookahead2W(242);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 35922                 // \'attribute\' \'after\'\n' +
'     || lk == 35961                 // \'element\' \'after\'\n' +
'     || lk == 36024                 // \'namespace\' \'after\'\n' +
'     || lk == 36056                 // \'processing-instruction\' \'after\'\n' +
'     || lk == 38482                 // \'attribute\' \'and\'\n' +
'     || lk == 38521                 // \'element\' \'and\'\n' +
'     || lk == 38584                 // \'namespace\' \'and\'\n' +
'     || lk == 38616                 // \'processing-instruction\' \'and\'\n' +
'     || lk == 40530                 // \'attribute\' \'as\'\n' +
'     || lk == 40569                 // \'element\' \'as\'\n' +
'     || lk == 40632                 // \'namespace\' \'as\'\n' +
'     || lk == 40664                 // \'processing-instruction\' \'as\'\n' +
'     || lk == 41042                 // \'attribute\' \'ascending\'\n' +
'     || lk == 41081                 // \'element\' \'ascending\'\n' +
'     || lk == 41144                 // \'namespace\' \'ascending\'\n' +
'     || lk == 41176                 // \'processing-instruction\' \'ascending\'\n' +
'     || lk == 41554                 // \'attribute\' \'at\'\n' +
'     || lk == 41593                 // \'element\' \'at\'\n' +
'     || lk == 41656                 // \'namespace\' \'at\'\n' +
'     || lk == 41688                 // \'processing-instruction\' \'at\'\n' +
'     || lk == 43090                 // \'attribute\' \'before\'\n' +
'     || lk == 43129                 // \'element\' \'before\'\n' +
'     || lk == 43192                 // \'namespace\' \'before\'\n' +
'     || lk == 43224                 // \'processing-instruction\' \'before\'\n' +
'     || lk == 45138                 // \'attribute\' \'case\'\n' +
'     || lk == 45177                 // \'element\' \'case\'\n' +
'     || lk == 45240                 // \'namespace\' \'case\'\n' +
'     || lk == 45272                 // \'processing-instruction\' \'case\'\n' +
'     || lk == 45650                 // \'attribute\' \'cast\'\n' +
'     || lk == 45689                 // \'element\' \'cast\'\n' +
'     || lk == 45752                 // \'namespace\' \'cast\'\n' +
'     || lk == 45784                 // \'processing-instruction\' \'cast\'\n' +
'     || lk == 46162                 // \'attribute\' \'castable\'\n' +
'     || lk == 46201                 // \'element\' \'castable\'\n' +
'     || lk == 46264                 // \'namespace\' \'castable\'\n' +
'     || lk == 46296                 // \'processing-instruction\' \'castable\'\n' +
'     || lk == 48210                 // \'attribute\' \'collation\'\n' +
'     || lk == 48249                 // \'element\' \'collation\'\n' +
'     || lk == 48312                 // \'namespace\' \'collation\'\n' +
'     || lk == 48344                 // \'processing-instruction\' \'collation\'\n' +
'     || lk == 53842                 // \'attribute\' \'count\'\n' +
'     || lk == 53881                 // \'element\' \'count\'\n' +
'     || lk == 53944                 // \'namespace\' \'count\'\n' +
'     || lk == 53976                 // \'processing-instruction\' \'count\'\n' +
'     || lk == 55890                 // \'attribute\' \'default\'\n' +
'     || lk == 55929                 // \'element\' \'default\'\n' +
'     || lk == 55992                 // \'namespace\' \'default\'\n' +
'     || lk == 56024                 // \'processing-instruction\' \'default\'\n' +
'     || lk == 57938                 // \'attribute\' \'descending\'\n' +
'     || lk == 57977                 // \'element\' \'descending\'\n' +
'     || lk == 58040                 // \'namespace\' \'descending\'\n' +
'     || lk == 58072                 // \'processing-instruction\' \'descending\'\n' +
'     || lk == 60498                 // \'attribute\' \'div\'\n' +
'     || lk == 60537                 // \'element\' \'div\'\n' +
'     || lk == 60600                 // \'namespace\' \'div\'\n' +
'     || lk == 60632                 // \'processing-instruction\' \'div\'\n' +
'     || lk == 62546                 // \'attribute\' \'else\'\n' +
'     || lk == 62585                 // \'element\' \'else\'\n' +
'     || lk == 62648                 // \'namespace\' \'else\'\n' +
'     || lk == 62680                 // \'processing-instruction\' \'else\'\n' +
'     || lk == 63058                 // \'attribute\' \'empty\'\n' +
'     || lk == 63097                 // \'element\' \'empty\'\n' +
'     || lk == 63160                 // \'namespace\' \'empty\'\n' +
'     || lk == 63192                 // \'processing-instruction\' \'empty\'\n' +
'     || lk == 64594                 // \'attribute\' \'end\'\n' +
'     || lk == 64633                 // \'element\' \'end\'\n' +
'     || lk == 64696                 // \'namespace\' \'end\'\n' +
'     || lk == 64728                 // \'processing-instruction\' \'end\'\n' +
'     || lk == 65618                 // \'attribute\' \'eq\'\n' +
'     || lk == 65657                 // \'element\' \'eq\'\n' +
'     || lk == 65720                 // \'namespace\' \'eq\'\n' +
'     || lk == 65752                 // \'processing-instruction\' \'eq\'\n' +
'     || lk == 67154                 // \'attribute\' \'except\'\n' +
'     || lk == 67193                 // \'element\' \'except\'\n' +
'     || lk == 67256                 // \'namespace\' \'except\'\n' +
'     || lk == 67288                 // \'processing-instruction\' \'except\'\n' +
'     || lk == 70226                 // \'attribute\' \'for\'\n' +
'     || lk == 70265                 // \'element\' \'for\'\n' +
'     || lk == 70328                 // \'namespace\' \'for\'\n' +
'     || lk == 70360                 // \'processing-instruction\' \'for\'\n' +
'     || lk == 74834                 // \'attribute\' \'ge\'\n' +
'     || lk == 74873                 // \'element\' \'ge\'\n' +
'     || lk == 74936                 // \'namespace\' \'ge\'\n' +
'     || lk == 74968                 // \'processing-instruction\' \'ge\'\n' +
'     || lk == 75858                 // \'attribute\' \'group\'\n' +
'     || lk == 75897                 // \'element\' \'group\'\n' +
'     || lk == 75960                 // \'namespace\' \'group\'\n' +
'     || lk == 75992                 // \'processing-instruction\' \'group\'\n' +
'     || lk == 76882                 // \'attribute\' \'gt\'\n' +
'     || lk == 76921                 // \'element\' \'gt\'\n' +
'     || lk == 76984                 // \'namespace\' \'gt\'\n' +
'     || lk == 77016                 // \'processing-instruction\' \'gt\'\n' +
'     || lk == 77394                 // \'attribute\' \'idiv\'\n' +
'     || lk == 77433                 // \'element\' \'idiv\'\n' +
'     || lk == 77496                 // \'namespace\' \'idiv\'\n' +
'     || lk == 77528                 // \'processing-instruction\' \'idiv\'\n' +
'     || lk == 82002                 // \'attribute\' \'instance\'\n' +
'     || lk == 82041                 // \'element\' \'instance\'\n' +
'     || lk == 82104                 // \'namespace\' \'instance\'\n' +
'     || lk == 82136                 // \'processing-instruction\' \'instance\'\n' +
'     || lk == 83026                 // \'attribute\' \'intersect\'\n' +
'     || lk == 83065                 // \'element\' \'intersect\'\n' +
'     || lk == 83128                 // \'namespace\' \'intersect\'\n' +
'     || lk == 83160                 // \'processing-instruction\' \'intersect\'\n' +
'     || lk == 83538                 // \'attribute\' \'into\'\n' +
'     || lk == 83577                 // \'element\' \'into\'\n' +
'     || lk == 83640                 // \'namespace\' \'into\'\n' +
'     || lk == 83672                 // \'processing-instruction\' \'into\'\n' +
'     || lk == 84050                 // \'attribute\' \'is\'\n' +
'     || lk == 84089                 // \'element\' \'is\'\n' +
'     || lk == 84152                 // \'namespace\' \'is\'\n' +
'     || lk == 84184                 // \'processing-instruction\' \'is\'\n' +
'     || lk == 88146                 // \'attribute\' \'le\'\n' +
'     || lk == 88185                 // \'element\' \'le\'\n' +
'     || lk == 88248                 // \'namespace\' \'le\'\n' +
'     || lk == 88280                 // \'processing-instruction\' \'le\'\n' +
'     || lk == 89170                 // \'attribute\' \'let\'\n' +
'     || lk == 89209                 // \'element\' \'let\'\n' +
'     || lk == 89272                 // \'namespace\' \'let\'\n' +
'     || lk == 89304                 // \'processing-instruction\' \'let\'\n' +
'     || lk == 91218                 // \'attribute\' \'lt\'\n' +
'     || lk == 91257                 // \'element\' \'lt\'\n' +
'     || lk == 91320                 // \'namespace\' \'lt\'\n' +
'     || lk == 91352                 // \'processing-instruction\' \'lt\'\n' +
'     || lk == 92242                 // \'attribute\' \'mod\'\n' +
'     || lk == 92281                 // \'element\' \'mod\'\n' +
'     || lk == 92344                 // \'namespace\' \'mod\'\n' +
'     || lk == 92376                 // \'processing-instruction\' \'mod\'\n' +
'     || lk == 92754                 // \'attribute\' \'modify\'\n' +
'     || lk == 92793                 // \'element\' \'modify\'\n' +
'     || lk == 92856                 // \'namespace\' \'modify\'\n' +
'     || lk == 92888                 // \'processing-instruction\' \'modify\'\n' +
'     || lk == 95314                 // \'attribute\' \'ne\'\n' +
'     || lk == 95353                 // \'element\' \'ne\'\n' +
'     || lk == 95416                 // \'namespace\' \'ne\'\n' +
'     || lk == 95448                 // \'processing-instruction\' \'ne\'\n' +
'     || lk == 101458                // \'attribute\' \'only\'\n' +
'     || lk == 101497                // \'element\' \'only\'\n' +
'     || lk == 101560                // \'namespace\' \'only\'\n' +
'     || lk == 101592                // \'processing-instruction\' \'only\'\n' +
'     || lk == 102482                // \'attribute\' \'or\'\n' +
'     || lk == 102521                // \'element\' \'or\'\n' +
'     || lk == 102584                // \'namespace\' \'or\'\n' +
'     || lk == 102616                // \'processing-instruction\' \'or\'\n' +
'     || lk == 102994                // \'attribute\' \'order\'\n' +
'     || lk == 103033                // \'element\' \'order\'\n' +
'     || lk == 103096                // \'namespace\' \'order\'\n' +
'     || lk == 103128                // \'processing-instruction\' \'order\'\n' +
'     || lk == 112722                // \'attribute\' \'return\'\n' +
'     || lk == 112761                // \'element\' \'return\'\n' +
'     || lk == 112824                // \'namespace\' \'return\'\n' +
'     || lk == 112856                // \'processing-instruction\' \'return\'\n' +
'     || lk == 114770                // \'attribute\' \'satisfies\'\n' +
'     || lk == 114809                // \'element\' \'satisfies\'\n' +
'     || lk == 114872                // \'namespace\' \'satisfies\'\n' +
'     || lk == 114904                // \'processing-instruction\' \'satisfies\'\n' +
'     || lk == 120914                // \'attribute\' \'stable\'\n' +
'     || lk == 120953                // \'element\' \'stable\'\n' +
'     || lk == 121016                // \'namespace\' \'stable\'\n' +
'     || lk == 121048                // \'processing-instruction\' \'stable\'\n' +
'     || lk == 121426                // \'attribute\' \'start\'\n' +
'     || lk == 121465                // \'element\' \'start\'\n' +
'     || lk == 121528                // \'namespace\' \'start\'\n' +
'     || lk == 121560                // \'processing-instruction\' \'start\'\n' +
'     || lk == 127058                // \'attribute\' \'to\'\n' +
'     || lk == 127097                // \'element\' \'to\'\n' +
'     || lk == 127160                // \'namespace\' \'to\'\n' +
'     || lk == 127192                // \'processing-instruction\' \'to\'\n' +
'     || lk == 127570                // \'attribute\' \'treat\'\n' +
'     || lk == 127609                // \'element\' \'treat\'\n' +
'     || lk == 127672                // \'namespace\' \'treat\'\n' +
'     || lk == 127704                // \'processing-instruction\' \'treat\'\n' +
'     || lk == 130130                // \'attribute\' \'union\'\n' +
'     || lk == 130169                // \'element\' \'union\'\n' +
'     || lk == 130232                // \'namespace\' \'union\'\n' +
'     || lk == 130264                // \'processing-instruction\' \'union\'\n' +
'     || lk == 136274                // \'attribute\' \'where\'\n' +
'     || lk == 136313                // \'element\' \'where\'\n' +
'     || lk == 136376                // \'namespace\' \'where\'\n' +
'     || lk == 136408                // \'processing-instruction\' \'where\'\n' +
'     || lk == 138322                // \'attribute\' \'with\'\n' +
'     || lk == 138361                // \'element\' \'with\'\n' +
'     || lk == 138424                // \'namespace\' \'with\'\n' +
'     || lk == 138456)               // \'processing-instruction\' \'with\'\n' +
'    {\n' +
'      lk = memoized(3, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_PostfixExpr();\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(3, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'    case 8:                         // IntegerLiteral\n' +
'    case 9:                         // DecimalLiteral\n' +
'    case 10:                        // DoubleLiteral\n' +
'    case 11:                        // StringLiteral\n' +
'    case 31:                        // \'$\'\n' +
'    case 32:                        // \'%\'\n' +
'    case 34:                        // \'(\'\n' +
'    case 44:                        // \'.\'\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'    case 68:                        // \'[\'\n' +
'    case 276:                       // \'{\'\n' +
'    case 278:                       // \'{|\'\n' +
'    case 3154:                      // \'attribute\' EQName^Token\n' +
'    case 3193:                      // \'element\' EQName^Token\n' +
'    case 9912:                      // \'namespace\' NCName^Token\n' +
'    case 9944:                      // \'processing-instruction\' NCName^Token\n' +
'    case 14854:                     // EQName^Token \'#\'\n' +
'    case 14918:                     // \'after\' \'#\'\n' +
'    case 14920:                     // \'allowing\' \'#\'\n' +
'    case 14921:                     // \'ancestor\' \'#\'\n' +
'    case 14922:                     // \'ancestor-or-self\' \'#\'\n' +
'    case 14923:                     // \'and\' \'#\'\n' +
'    case 14927:                     // \'as\' \'#\'\n' +
'    case 14928:                     // \'ascending\' \'#\'\n' +
'    case 14929:                     // \'at\' \'#\'\n' +
'    case 14930:                     // \'attribute\' \'#\'\n' +
'    case 14931:                     // \'base-uri\' \'#\'\n' +
'    case 14932:                     // \'before\' \'#\'\n' +
'    case 14933:                     // \'boundary-space\' \'#\'\n' +
'    case 14934:                     // \'break\' \'#\'\n' +
'    case 14936:                     // \'case\' \'#\'\n' +
'    case 14937:                     // \'cast\' \'#\'\n' +
'    case 14938:                     // \'castable\' \'#\'\n' +
'    case 14939:                     // \'catch\' \'#\'\n' +
'    case 14941:                     // \'child\' \'#\'\n' +
'    case 14942:                     // \'collation\' \'#\'\n' +
'    case 14944:                     // \'comment\' \'#\'\n' +
'    case 14945:                     // \'constraint\' \'#\'\n' +
'    case 14946:                     // \'construction\' \'#\'\n' +
'    case 14949:                     // \'context\' \'#\'\n' +
'    case 14950:                     // \'continue\' \'#\'\n' +
'    case 14951:                     // \'copy\' \'#\'\n' +
'    case 14952:                     // \'copy-namespaces\' \'#\'\n' +
'    case 14953:                     // \'count\' \'#\'\n' +
'    case 14954:                     // \'decimal-format\' \'#\'\n' +
'    case 14956:                     // \'declare\' \'#\'\n' +
'    case 14957:                     // \'default\' \'#\'\n' +
'    case 14958:                     // \'delete\' \'#\'\n' +
'    case 14959:                     // \'descendant\' \'#\'\n' +
'    case 14960:                     // \'descendant-or-self\' \'#\'\n' +
'    case 14961:                     // \'descending\' \'#\'\n' +
'    case 14966:                     // \'div\' \'#\'\n' +
'    case 14967:                     // \'document\' \'#\'\n' +
'    case 14968:                     // \'document-node\' \'#\'\n' +
'    case 14969:                     // \'element\' \'#\'\n' +
'    case 14970:                     // \'else\' \'#\'\n' +
'    case 14971:                     // \'empty\' \'#\'\n' +
'    case 14972:                     // \'empty-sequence\' \'#\'\n' +
'    case 14973:                     // \'encoding\' \'#\'\n' +
'    case 14974:                     // \'end\' \'#\'\n' +
'    case 14976:                     // \'eq\' \'#\'\n' +
'    case 14977:                     // \'every\' \'#\'\n' +
'    case 14979:                     // \'except\' \'#\'\n' +
'    case 14980:                     // \'exit\' \'#\'\n' +
'    case 14981:                     // \'external\' \'#\'\n' +
'    case 14982:                     // \'first\' \'#\'\n' +
'    case 14983:                     // \'following\' \'#\'\n' +
'    case 14984:                     // \'following-sibling\' \'#\'\n' +
'    case 14985:                     // \'for\' \'#\'\n' +
'    case 14989:                     // \'ft-option\' \'#\'\n' +
'    case 14993:                     // \'function\' \'#\'\n' +
'    case 14994:                     // \'ge\' \'#\'\n' +
'    case 14996:                     // \'group\' \'#\'\n' +
'    case 14998:                     // \'gt\' \'#\'\n' +
'    case 14999:                     // \'idiv\' \'#\'\n' +
'    case 15000:                     // \'if\' \'#\'\n' +
'    case 15001:                     // \'import\' \'#\'\n' +
'    case 15002:                     // \'in\' \'#\'\n' +
'    case 15003:                     // \'index\' \'#\'\n' +
'    case 15007:                     // \'insert\' \'#\'\n' +
'    case 15008:                     // \'instance\' \'#\'\n' +
'    case 15009:                     // \'integrity\' \'#\'\n' +
'    case 15010:                     // \'intersect\' \'#\'\n' +
'    case 15011:                     // \'into\' \'#\'\n' +
'    case 15012:                     // \'is\' \'#\'\n' +
'    case 15013:                     // \'item\' \'#\'\n' +
'    case 15018:                     // \'last\' \'#\'\n' +
'    case 15019:                     // \'lax\' \'#\'\n' +
'    case 15020:                     // \'le\' \'#\'\n' +
'    case 15022:                     // \'let\' \'#\'\n' +
'    case 15024:                     // \'loop\' \'#\'\n' +
'    case 15026:                     // \'lt\' \'#\'\n' +
'    case 15028:                     // \'mod\' \'#\'\n' +
'    case 15029:                     // \'modify\' \'#\'\n' +
'    case 15030:                     // \'module\' \'#\'\n' +
'    case 15032:                     // \'namespace\' \'#\'\n' +
'    case 15033:                     // \'namespace-node\' \'#\'\n' +
'    case 15034:                     // \'ne\' \'#\'\n' +
'    case 15039:                     // \'node\' \'#\'\n' +
'    case 15040:                     // \'nodes\' \'#\'\n' +
'    case 15046:                     // \'only\' \'#\'\n' +
'    case 15047:                     // \'option\' \'#\'\n' +
'    case 15048:                     // \'or\' \'#\'\n' +
'    case 15049:                     // \'order\' \'#\'\n' +
'    case 15050:                     // \'ordered\' \'#\'\n' +
'    case 15051:                     // \'ordering\' \'#\'\n' +
'    case 15054:                     // \'parent\' \'#\'\n' +
'    case 15060:                     // \'preceding\' \'#\'\n' +
'    case 15061:                     // \'preceding-sibling\' \'#\'\n' +
'    case 15064:                     // \'processing-instruction\' \'#\'\n' +
'    case 15066:                     // \'rename\' \'#\'\n' +
'    case 15067:                     // \'replace\' \'#\'\n' +
'    case 15068:                     // \'return\' \'#\'\n' +
'    case 15069:                     // \'returning\' \'#\'\n' +
'    case 15070:                     // \'revalidation\' \'#\'\n' +
'    case 15072:                     // \'satisfies\' \'#\'\n' +
'    case 15073:                     // \'schema\' \'#\'\n' +
'    case 15074:                     // \'schema-attribute\' \'#\'\n' +
'    case 15075:                     // \'schema-element\' \'#\'\n' +
'    case 15076:                     // \'score\' \'#\'\n' +
'    case 15077:                     // \'self\' \'#\'\n' +
'    case 15082:                     // \'sliding\' \'#\'\n' +
'    case 15083:                     // \'some\' \'#\'\n' +
'    case 15084:                     // \'stable\' \'#\'\n' +
'    case 15085:                     // \'start\' \'#\'\n' +
'    case 15088:                     // \'strict\' \'#\'\n' +
'    case 15091:                     // \'switch\' \'#\'\n' +
'    case 15092:                     // \'text\' \'#\'\n' +
'    case 15096:                     // \'to\' \'#\'\n' +
'    case 15097:                     // \'treat\' \'#\'\n' +
'    case 15098:                     // \'try\' \'#\'\n' +
'    case 15099:                     // \'tumbling\' \'#\'\n' +
'    case 15100:                     // \'type\' \'#\'\n' +
'    case 15101:                     // \'typeswitch\' \'#\'\n' +
'    case 15102:                     // \'union\' \'#\'\n' +
'    case 15104:                     // \'unordered\' \'#\'\n' +
'    case 15105:                     // \'updating\' \'#\'\n' +
'    case 15108:                     // \'validate\' \'#\'\n' +
'    case 15109:                     // \'value\' \'#\'\n' +
'    case 15110:                     // \'variable\' \'#\'\n' +
'    case 15111:                     // \'version\' \'#\'\n' +
'    case 15114:                     // \'where\' \'#\'\n' +
'    case 15115:                     // \'while\' \'#\'\n' +
'    case 15118:                     // \'with\' \'#\'\n' +
'    case 15122:                     // \'xquery\' \'#\'\n' +
'    case 17414:                     // EQName^Token \'(\'\n' +
'    case 17478:                     // \'after\' \'(\'\n' +
'    case 17480:                     // \'allowing\' \'(\'\n' +
'    case 17481:                     // \'ancestor\' \'(\'\n' +
'    case 17482:                     // \'ancestor-or-self\' \'(\'\n' +
'    case 17483:                     // \'and\' \'(\'\n' +
'    case 17487:                     // \'as\' \'(\'\n' +
'    case 17488:                     // \'ascending\' \'(\'\n' +
'    case 17489:                     // \'at\' \'(\'\n' +
'    case 17491:                     // \'base-uri\' \'(\'\n' +
'    case 17492:                     // \'before\' \'(\'\n' +
'    case 17493:                     // \'boundary-space\' \'(\'\n' +
'    case 17494:                     // \'break\' \'(\'\n' +
'    case 17496:                     // \'case\' \'(\'\n' +
'    case 17497:                     // \'cast\' \'(\'\n' +
'    case 17498:                     // \'castable\' \'(\'\n' +
'    case 17499:                     // \'catch\' \'(\'\n' +
'    case 17501:                     // \'child\' \'(\'\n' +
'    case 17502:                     // \'collation\' \'(\'\n' +
'    case 17505:                     // \'constraint\' \'(\'\n' +
'    case 17506:                     // \'construction\' \'(\'\n' +
'    case 17509:                     // \'context\' \'(\'\n' +
'    case 17510:                     // \'continue\' \'(\'\n' +
'    case 17511:                     // \'copy\' \'(\'\n' +
'    case 17512:                     // \'copy-namespaces\' \'(\'\n' +
'    case 17513:                     // \'count\' \'(\'\n' +
'    case 17514:                     // \'decimal-format\' \'(\'\n' +
'    case 17516:                     // \'declare\' \'(\'\n' +
'    case 17517:                     // \'default\' \'(\'\n' +
'    case 17518:                     // \'delete\' \'(\'\n' +
'    case 17519:                     // \'descendant\' \'(\'\n' +
'    case 17520:                     // \'descendant-or-self\' \'(\'\n' +
'    case 17521:                     // \'descending\' \'(\'\n' +
'    case 17526:                     // \'div\' \'(\'\n' +
'    case 17527:                     // \'document\' \'(\'\n' +
'    case 17530:                     // \'else\' \'(\'\n' +
'    case 17531:                     // \'empty\' \'(\'\n' +
'    case 17533:                     // \'encoding\' \'(\'\n' +
'    case 17534:                     // \'end\' \'(\'\n' +
'    case 17536:                     // \'eq\' \'(\'\n' +
'    case 17537:                     // \'every\' \'(\'\n' +
'    case 17539:                     // \'except\' \'(\'\n' +
'    case 17540:                     // \'exit\' \'(\'\n' +
'    case 17541:                     // \'external\' \'(\'\n' +
'    case 17542:                     // \'first\' \'(\'\n' +
'    case 17543:                     // \'following\' \'(\'\n' +
'    case 17544:                     // \'following-sibling\' \'(\'\n' +
'    case 17545:                     // \'for\' \'(\'\n' +
'    case 17549:                     // \'ft-option\' \'(\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'    case 17554:                     // \'ge\' \'(\'\n' +
'    case 17556:                     // \'group\' \'(\'\n' +
'    case 17558:                     // \'gt\' \'(\'\n' +
'    case 17559:                     // \'idiv\' \'(\'\n' +
'    case 17561:                     // \'import\' \'(\'\n' +
'    case 17562:                     // \'in\' \'(\'\n' +
'    case 17563:                     // \'index\' \'(\'\n' +
'    case 17567:                     // \'insert\' \'(\'\n' +
'    case 17568:                     // \'instance\' \'(\'\n' +
'    case 17569:                     // \'integrity\' \'(\'\n' +
'    case 17570:                     // \'intersect\' \'(\'\n' +
'    case 17571:                     // \'into\' \'(\'\n' +
'    case 17572:                     // \'is\' \'(\'\n' +
'    case 17578:                     // \'last\' \'(\'\n' +
'    case 17579:                     // \'lax\' \'(\'\n' +
'    case 17580:                     // \'le\' \'(\'\n' +
'    case 17582:                     // \'let\' \'(\'\n' +
'    case 17584:                     // \'loop\' \'(\'\n' +
'    case 17586:                     // \'lt\' \'(\'\n' +
'    case 17588:                     // \'mod\' \'(\'\n' +
'    case 17589:                     // \'modify\' \'(\'\n' +
'    case 17590:                     // \'module\' \'(\'\n' +
'    case 17592:                     // \'namespace\' \'(\'\n' +
'    case 17594:                     // \'ne\' \'(\'\n' +
'    case 17600:                     // \'nodes\' \'(\'\n' +
'    case 17606:                     // \'only\' \'(\'\n' +
'    case 17607:                     // \'option\' \'(\'\n' +
'    case 17608:                     // \'or\' \'(\'\n' +
'    case 17609:                     // \'order\' \'(\'\n' +
'    case 17610:                     // \'ordered\' \'(\'\n' +
'    case 17611:                     // \'ordering\' \'(\'\n' +
'    case 17614:                     // \'parent\' \'(\'\n' +
'    case 17620:                     // \'preceding\' \'(\'\n' +
'    case 17621:                     // \'preceding-sibling\' \'(\'\n' +
'    case 17626:                     // \'rename\' \'(\'\n' +
'    case 17627:                     // \'replace\' \'(\'\n' +
'    case 17628:                     // \'return\' \'(\'\n' +
'    case 17629:                     // \'returning\' \'(\'\n' +
'    case 17630:                     // \'revalidation\' \'(\'\n' +
'    case 17632:                     // \'satisfies\' \'(\'\n' +
'    case 17633:                     // \'schema\' \'(\'\n' +
'    case 17636:                     // \'score\' \'(\'\n' +
'    case 17637:                     // \'self\' \'(\'\n' +
'    case 17642:                     // \'sliding\' \'(\'\n' +
'    case 17643:                     // \'some\' \'(\'\n' +
'    case 17644:                     // \'stable\' \'(\'\n' +
'    case 17645:                     // \'start\' \'(\'\n' +
'    case 17648:                     // \'strict\' \'(\'\n' +
'    case 17656:                     // \'to\' \'(\'\n' +
'    case 17657:                     // \'treat\' \'(\'\n' +
'    case 17658:                     // \'try\' \'(\'\n' +
'    case 17659:                     // \'tumbling\' \'(\'\n' +
'    case 17660:                     // \'type\' \'(\'\n' +
'    case 17662:                     // \'union\' \'(\'\n' +
'    case 17664:                     // \'unordered\' \'(\'\n' +
'    case 17665:                     // \'updating\' \'(\'\n' +
'    case 17668:                     // \'validate\' \'(\'\n' +
'    case 17669:                     // \'value\' \'(\'\n' +
'    case 17670:                     // \'variable\' \'(\'\n' +
'    case 17671:                     // \'version\' \'(\'\n' +
'    case 17674:                     // \'where\' \'(\'\n' +
'    case 17675:                     // \'while\' \'(\'\n' +
'    case 17678:                     // \'with\' \'(\'\n' +
'    case 17682:                     // \'xquery\' \'(\'\n' +
'    case 36946:                     // \'attribute\' \'allowing\'\n' +
'    case 36985:                     // \'element\' \'allowing\'\n' +
'    case 37048:                     // \'namespace\' \'allowing\'\n' +
'    case 37080:                     // \'processing-instruction\' \'allowing\'\n' +
'    case 37458:                     // \'attribute\' \'ancestor\'\n' +
'    case 37497:                     // \'element\' \'ancestor\'\n' +
'    case 37560:                     // \'namespace\' \'ancestor\'\n' +
'    case 37592:                     // \'processing-instruction\' \'ancestor\'\n' +
'    case 37970:                     // \'attribute\' \'ancestor-or-self\'\n' +
'    case 38009:                     // \'element\' \'ancestor-or-self\'\n' +
'    case 38072:                     // \'namespace\' \'ancestor-or-self\'\n' +
'    case 38104:                     // \'processing-instruction\' \'ancestor-or-self\'\n' +
'    case 42066:                     // \'attribute\' \'attribute\'\n' +
'    case 42105:                     // \'element\' \'attribute\'\n' +
'    case 42168:                     // \'namespace\' \'attribute\'\n' +
'    case 42200:                     // \'processing-instruction\' \'attribute\'\n' +
'    case 42578:                     // \'attribute\' \'base-uri\'\n' +
'    case 42617:                     // \'element\' \'base-uri\'\n' +
'    case 42680:                     // \'namespace\' \'base-uri\'\n' +
'    case 42712:                     // \'processing-instruction\' \'base-uri\'\n' +
'    case 43602:                     // \'attribute\' \'boundary-space\'\n' +
'    case 43641:                     // \'element\' \'boundary-space\'\n' +
'    case 43704:                     // \'namespace\' \'boundary-space\'\n' +
'    case 43736:                     // \'processing-instruction\' \'boundary-space\'\n' +
'    case 44114:                     // \'attribute\' \'break\'\n' +
'    case 44153:                     // \'element\' \'break\'\n' +
'    case 44216:                     // \'namespace\' \'break\'\n' +
'    case 44248:                     // \'processing-instruction\' \'break\'\n' +
'    case 46674:                     // \'attribute\' \'catch\'\n' +
'    case 46713:                     // \'element\' \'catch\'\n' +
'    case 46776:                     // \'namespace\' \'catch\'\n' +
'    case 46808:                     // \'processing-instruction\' \'catch\'\n' +
'    case 47698:                     // \'attribute\' \'child\'\n' +
'    case 47737:                     // \'element\' \'child\'\n' +
'    case 47800:                     // \'namespace\' \'child\'\n' +
'    case 47832:                     // \'processing-instruction\' \'child\'\n' +
'    case 49234:                     // \'attribute\' \'comment\'\n' +
'    case 49273:                     // \'element\' \'comment\'\n' +
'    case 49336:                     // \'namespace\' \'comment\'\n' +
'    case 49368:                     // \'processing-instruction\' \'comment\'\n' +
'    case 49746:                     // \'attribute\' \'constraint\'\n' +
'    case 49785:                     // \'element\' \'constraint\'\n' +
'    case 49848:                     // \'namespace\' \'constraint\'\n' +
'    case 49880:                     // \'processing-instruction\' \'constraint\'\n' +
'    case 50258:                     // \'attribute\' \'construction\'\n' +
'    case 50297:                     // \'element\' \'construction\'\n' +
'    case 50360:                     // \'namespace\' \'construction\'\n' +
'    case 50392:                     // \'processing-instruction\' \'construction\'\n' +
'    case 51794:                     // \'attribute\' \'context\'\n' +
'    case 51833:                     // \'element\' \'context\'\n' +
'    case 51896:                     // \'namespace\' \'context\'\n' +
'    case 51928:                     // \'processing-instruction\' \'context\'\n' +
'    case 52306:                     // \'attribute\' \'continue\'\n' +
'    case 52345:                     // \'element\' \'continue\'\n' +
'    case 52408:                     // \'namespace\' \'continue\'\n' +
'    case 52440:                     // \'processing-instruction\' \'continue\'\n' +
'    case 52818:                     // \'attribute\' \'copy\'\n' +
'    case 52857:                     // \'element\' \'copy\'\n' +
'    case 52920:                     // \'namespace\' \'copy\'\n' +
'    case 52952:                     // \'processing-instruction\' \'copy\'\n' +
'    case 53330:                     // \'attribute\' \'copy-namespaces\'\n' +
'    case 53369:                     // \'element\' \'copy-namespaces\'\n' +
'    case 53432:                     // \'namespace\' \'copy-namespaces\'\n' +
'    case 53464:                     // \'processing-instruction\' \'copy-namespaces\'\n' +
'    case 54354:                     // \'attribute\' \'decimal-format\'\n' +
'    case 54393:                     // \'element\' \'decimal-format\'\n' +
'    case 54456:                     // \'namespace\' \'decimal-format\'\n' +
'    case 54488:                     // \'processing-instruction\' \'decimal-format\'\n' +
'    case 55378:                     // \'attribute\' \'declare\'\n' +
'    case 55417:                     // \'element\' \'declare\'\n' +
'    case 55480:                     // \'namespace\' \'declare\'\n' +
'    case 55512:                     // \'processing-instruction\' \'declare\'\n' +
'    case 56402:                     // \'attribute\' \'delete\'\n' +
'    case 56441:                     // \'element\' \'delete\'\n' +
'    case 56504:                     // \'namespace\' \'delete\'\n' +
'    case 56536:                     // \'processing-instruction\' \'delete\'\n' +
'    case 56914:                     // \'attribute\' \'descendant\'\n' +
'    case 56953:                     // \'element\' \'descendant\'\n' +
'    case 57016:                     // \'namespace\' \'descendant\'\n' +
'    case 57048:                     // \'processing-instruction\' \'descendant\'\n' +
'    case 57426:                     // \'attribute\' \'descendant-or-self\'\n' +
'    case 57465:                     // \'element\' \'descendant-or-self\'\n' +
'    case 57528:                     // \'namespace\' \'descendant-or-self\'\n' +
'    case 57560:                     // \'processing-instruction\' \'descendant-or-self\'\n' +
'    case 61010:                     // \'attribute\' \'document\'\n' +
'    case 61049:                     // \'element\' \'document\'\n' +
'    case 61112:                     // \'namespace\' \'document\'\n' +
'    case 61144:                     // \'processing-instruction\' \'document\'\n' +
'    case 61522:                     // \'attribute\' \'document-node\'\n' +
'    case 61561:                     // \'element\' \'document-node\'\n' +
'    case 61624:                     // \'namespace\' \'document-node\'\n' +
'    case 61656:                     // \'processing-instruction\' \'document-node\'\n' +
'    case 62034:                     // \'attribute\' \'element\'\n' +
'    case 62073:                     // \'element\' \'element\'\n' +
'    case 62136:                     // \'namespace\' \'element\'\n' +
'    case 62168:                     // \'processing-instruction\' \'element\'\n' +
'    case 63570:                     // \'attribute\' \'empty-sequence\'\n' +
'    case 63609:                     // \'element\' \'empty-sequence\'\n' +
'    case 63672:                     // \'namespace\' \'empty-sequence\'\n' +
'    case 63704:                     // \'processing-instruction\' \'empty-sequence\'\n' +
'    case 64082:                     // \'attribute\' \'encoding\'\n' +
'    case 64121:                     // \'element\' \'encoding\'\n' +
'    case 64184:                     // \'namespace\' \'encoding\'\n' +
'    case 64216:                     // \'processing-instruction\' \'encoding\'\n' +
'    case 66130:                     // \'attribute\' \'every\'\n' +
'    case 66169:                     // \'element\' \'every\'\n' +
'    case 66232:                     // \'namespace\' \'every\'\n' +
'    case 66264:                     // \'processing-instruction\' \'every\'\n' +
'    case 67666:                     // \'attribute\' \'exit\'\n' +
'    case 67705:                     // \'element\' \'exit\'\n' +
'    case 67768:                     // \'namespace\' \'exit\'\n' +
'    case 67800:                     // \'processing-instruction\' \'exit\'\n' +
'    case 68178:                     // \'attribute\' \'external\'\n' +
'    case 68217:                     // \'element\' \'external\'\n' +
'    case 68280:                     // \'namespace\' \'external\'\n' +
'    case 68312:                     // \'processing-instruction\' \'external\'\n' +
'    case 68690:                     // \'attribute\' \'first\'\n' +
'    case 68729:                     // \'element\' \'first\'\n' +
'    case 68792:                     // \'namespace\' \'first\'\n' +
'    case 68824:                     // \'processing-instruction\' \'first\'\n' +
'    case 69202:                     // \'attribute\' \'following\'\n' +
'    case 69241:                     // \'element\' \'following\'\n' +
'    case 69304:                     // \'namespace\' \'following\'\n' +
'    case 69336:                     // \'processing-instruction\' \'following\'\n' +
'    case 69714:                     // \'attribute\' \'following-sibling\'\n' +
'    case 69753:                     // \'element\' \'following-sibling\'\n' +
'    case 69816:                     // \'namespace\' \'following-sibling\'\n' +
'    case 69848:                     // \'processing-instruction\' \'following-sibling\'\n' +
'    case 72274:                     // \'attribute\' \'ft-option\'\n' +
'    case 72313:                     // \'element\' \'ft-option\'\n' +
'    case 72376:                     // \'namespace\' \'ft-option\'\n' +
'    case 72408:                     // \'processing-instruction\' \'ft-option\'\n' +
'    case 74322:                     // \'attribute\' \'function\'\n' +
'    case 74361:                     // \'element\' \'function\'\n' +
'    case 74424:                     // \'namespace\' \'function\'\n' +
'    case 74456:                     // \'processing-instruction\' \'function\'\n' +
'    case 77906:                     // \'attribute\' \'if\'\n' +
'    case 77945:                     // \'element\' \'if\'\n' +
'    case 78008:                     // \'namespace\' \'if\'\n' +
'    case 78040:                     // \'processing-instruction\' \'if\'\n' +
'    case 78418:                     // \'attribute\' \'import\'\n' +
'    case 78457:                     // \'element\' \'import\'\n' +
'    case 78520:                     // \'namespace\' \'import\'\n' +
'    case 78552:                     // \'processing-instruction\' \'import\'\n' +
'    case 78930:                     // \'attribute\' \'in\'\n' +
'    case 78969:                     // \'element\' \'in\'\n' +
'    case 79032:                     // \'namespace\' \'in\'\n' +
'    case 79064:                     // \'processing-instruction\' \'in\'\n' +
'    case 79442:                     // \'attribute\' \'index\'\n' +
'    case 79481:                     // \'element\' \'index\'\n' +
'    case 79544:                     // \'namespace\' \'index\'\n' +
'    case 79576:                     // \'processing-instruction\' \'index\'\n' +
'    case 81490:                     // \'attribute\' \'insert\'\n' +
'    case 81529:                     // \'element\' \'insert\'\n' +
'    case 81592:                     // \'namespace\' \'insert\'\n' +
'    case 81624:                     // \'processing-instruction\' \'insert\'\n' +
'    case 82514:                     // \'attribute\' \'integrity\'\n' +
'    case 82553:                     // \'element\' \'integrity\'\n' +
'    case 82616:                     // \'namespace\' \'integrity\'\n' +
'    case 82648:                     // \'processing-instruction\' \'integrity\'\n' +
'    case 84562:                     // \'attribute\' \'item\'\n' +
'    case 84601:                     // \'element\' \'item\'\n' +
'    case 84664:                     // \'namespace\' \'item\'\n' +
'    case 84696:                     // \'processing-instruction\' \'item\'\n' +
'    case 87122:                     // \'attribute\' \'last\'\n' +
'    case 87161:                     // \'element\' \'last\'\n' +
'    case 87224:                     // \'namespace\' \'last\'\n' +
'    case 87256:                     // \'processing-instruction\' \'last\'\n' +
'    case 87634:                     // \'attribute\' \'lax\'\n' +
'    case 87673:                     // \'element\' \'lax\'\n' +
'    case 87736:                     // \'namespace\' \'lax\'\n' +
'    case 87768:                     // \'processing-instruction\' \'lax\'\n' +
'    case 90194:                     // \'attribute\' \'loop\'\n' +
'    case 90233:                     // \'element\' \'loop\'\n' +
'    case 90296:                     // \'namespace\' \'loop\'\n' +
'    case 90328:                     // \'processing-instruction\' \'loop\'\n' +
'    case 93266:                     // \'attribute\' \'module\'\n' +
'    case 93305:                     // \'element\' \'module\'\n' +
'    case 93368:                     // \'namespace\' \'module\'\n' +
'    case 93400:                     // \'processing-instruction\' \'module\'\n' +
'    case 94290:                     // \'attribute\' \'namespace\'\n' +
'    case 94329:                     // \'element\' \'namespace\'\n' +
'    case 94392:                     // \'namespace\' \'namespace\'\n' +
'    case 94424:                     // \'processing-instruction\' \'namespace\'\n' +
'    case 94802:                     // \'attribute\' \'namespace-node\'\n' +
'    case 94841:                     // \'element\' \'namespace-node\'\n' +
'    case 94904:                     // \'namespace\' \'namespace-node\'\n' +
'    case 94936:                     // \'processing-instruction\' \'namespace-node\'\n' +
'    case 97874:                     // \'attribute\' \'node\'\n' +
'    case 97913:                     // \'element\' \'node\'\n' +
'    case 97976:                     // \'namespace\' \'node\'\n' +
'    case 98008:                     // \'processing-instruction\' \'node\'\n' +
'    case 98386:                     // \'attribute\' \'nodes\'\n' +
'    case 98425:                     // \'element\' \'nodes\'\n' +
'    case 98488:                     // \'namespace\' \'nodes\'\n' +
'    case 98520:                     // \'processing-instruction\' \'nodes\'\n' +
'    case 101970:                    // \'attribute\' \'option\'\n' +
'    case 102009:                    // \'element\' \'option\'\n' +
'    case 102072:                    // \'namespace\' \'option\'\n' +
'    case 102104:                    // \'processing-instruction\' \'option\'\n' +
'    case 103506:                    // \'attribute\' \'ordered\'\n' +
'    case 103545:                    // \'element\' \'ordered\'\n' +
'    case 103608:                    // \'namespace\' \'ordered\'\n' +
'    case 103640:                    // \'processing-instruction\' \'ordered\'\n' +
'    case 104018:                    // \'attribute\' \'ordering\'\n' +
'    case 104057:                    // \'element\' \'ordering\'\n' +
'    case 104120:                    // \'namespace\' \'ordering\'\n' +
'    case 104152:                    // \'processing-instruction\' \'ordering\'\n' +
'    case 105554:                    // \'attribute\' \'parent\'\n' +
'    case 105593:                    // \'element\' \'parent\'\n' +
'    case 105656:                    // \'namespace\' \'parent\'\n' +
'    case 105688:                    // \'processing-instruction\' \'parent\'\n' +
'    case 108626:                    // \'attribute\' \'preceding\'\n' +
'    case 108665:                    // \'element\' \'preceding\'\n' +
'    case 108728:                    // \'namespace\' \'preceding\'\n' +
'    case 108760:                    // \'processing-instruction\' \'preceding\'\n' +
'    case 109138:                    // \'attribute\' \'preceding-sibling\'\n' +
'    case 109177:                    // \'element\' \'preceding-sibling\'\n' +
'    case 109240:                    // \'namespace\' \'preceding-sibling\'\n' +
'    case 109272:                    // \'processing-instruction\' \'preceding-sibling\'\n' +
'    case 110674:                    // \'attribute\' \'processing-instruction\'\n' +
'    case 110713:                    // \'element\' \'processing-instruction\'\n' +
'    case 110776:                    // \'namespace\' \'processing-instruction\'\n' +
'    case 110808:                    // \'processing-instruction\' \'processing-instruction\'\n' +
'    case 111698:                    // \'attribute\' \'rename\'\n' +
'    case 111737:                    // \'element\' \'rename\'\n' +
'    case 111800:                    // \'namespace\' \'rename\'\n' +
'    case 111832:                    // \'processing-instruction\' \'rename\'\n' +
'    case 112210:                    // \'attribute\' \'replace\'\n' +
'    case 112249:                    // \'element\' \'replace\'\n' +
'    case 112312:                    // \'namespace\' \'replace\'\n' +
'    case 112344:                    // \'processing-instruction\' \'replace\'\n' +
'    case 113234:                    // \'attribute\' \'returning\'\n' +
'    case 113273:                    // \'element\' \'returning\'\n' +
'    case 113336:                    // \'namespace\' \'returning\'\n' +
'    case 113368:                    // \'processing-instruction\' \'returning\'\n' +
'    case 113746:                    // \'attribute\' \'revalidation\'\n' +
'    case 113785:                    // \'element\' \'revalidation\'\n' +
'    case 113848:                    // \'namespace\' \'revalidation\'\n' +
'    case 113880:                    // \'processing-instruction\' \'revalidation\'\n' +
'    case 115282:                    // \'attribute\' \'schema\'\n' +
'    case 115321:                    // \'element\' \'schema\'\n' +
'    case 115384:                    // \'namespace\' \'schema\'\n' +
'    case 115416:                    // \'processing-instruction\' \'schema\'\n' +
'    case 115794:                    // \'attribute\' \'schema-attribute\'\n' +
'    case 115833:                    // \'element\' \'schema-attribute\'\n' +
'    case 115896:                    // \'namespace\' \'schema-attribute\'\n' +
'    case 115928:                    // \'processing-instruction\' \'schema-attribute\'\n' +
'    case 116306:                    // \'attribute\' \'schema-element\'\n' +
'    case 116345:                    // \'element\' \'schema-element\'\n' +
'    case 116408:                    // \'namespace\' \'schema-element\'\n' +
'    case 116440:                    // \'processing-instruction\' \'schema-element\'\n' +
'    case 116818:                    // \'attribute\' \'score\'\n' +
'    case 116857:                    // \'element\' \'score\'\n' +
'    case 116920:                    // \'namespace\' \'score\'\n' +
'    case 116952:                    // \'processing-instruction\' \'score\'\n' +
'    case 117330:                    // \'attribute\' \'self\'\n' +
'    case 117369:                    // \'element\' \'self\'\n' +
'    case 117432:                    // \'namespace\' \'self\'\n' +
'    case 117464:                    // \'processing-instruction\' \'self\'\n' +
'    case 119890:                    // \'attribute\' \'sliding\'\n' +
'    case 119929:                    // \'element\' \'sliding\'\n' +
'    case 119992:                    // \'namespace\' \'sliding\'\n' +
'    case 120024:                    // \'processing-instruction\' \'sliding\'\n' +
'    case 120402:                    // \'attribute\' \'some\'\n' +
'    case 120441:                    // \'element\' \'some\'\n' +
'    case 120504:                    // \'namespace\' \'some\'\n' +
'    case 120536:                    // \'processing-instruction\' \'some\'\n' +
'    case 122962:                    // \'attribute\' \'strict\'\n' +
'    case 123001:                    // \'element\' \'strict\'\n' +
'    case 123064:                    // \'namespace\' \'strict\'\n' +
'    case 123096:                    // \'processing-instruction\' \'strict\'\n' +
'    case 124498:                    // \'attribute\' \'switch\'\n' +
'    case 124537:                    // \'element\' \'switch\'\n' +
'    case 124600:                    // \'namespace\' \'switch\'\n' +
'    case 124632:                    // \'processing-instruction\' \'switch\'\n' +
'    case 125010:                    // \'attribute\' \'text\'\n' +
'    case 125049:                    // \'element\' \'text\'\n' +
'    case 125112:                    // \'namespace\' \'text\'\n' +
'    case 125144:                    // \'processing-instruction\' \'text\'\n' +
'    case 128082:                    // \'attribute\' \'try\'\n' +
'    case 128121:                    // \'element\' \'try\'\n' +
'    case 128184:                    // \'namespace\' \'try\'\n' +
'    case 128216:                    // \'processing-instruction\' \'try\'\n' +
'    case 128594:                    // \'attribute\' \'tumbling\'\n' +
'    case 128633:                    // \'element\' \'tumbling\'\n' +
'    case 128696:                    // \'namespace\' \'tumbling\'\n' +
'    case 128728:                    // \'processing-instruction\' \'tumbling\'\n' +
'    case 129106:                    // \'attribute\' \'type\'\n' +
'    case 129145:                    // \'element\' \'type\'\n' +
'    case 129208:                    // \'namespace\' \'type\'\n' +
'    case 129240:                    // \'processing-instruction\' \'type\'\n' +
'    case 129618:                    // \'attribute\' \'typeswitch\'\n' +
'    case 129657:                    // \'element\' \'typeswitch\'\n' +
'    case 129720:                    // \'namespace\' \'typeswitch\'\n' +
'    case 129752:                    // \'processing-instruction\' \'typeswitch\'\n' +
'    case 131154:                    // \'attribute\' \'unordered\'\n' +
'    case 131193:                    // \'element\' \'unordered\'\n' +
'    case 131256:                    // \'namespace\' \'unordered\'\n' +
'    case 131288:                    // \'processing-instruction\' \'unordered\'\n' +
'    case 131666:                    // \'attribute\' \'updating\'\n' +
'    case 131705:                    // \'element\' \'updating\'\n' +
'    case 131768:                    // \'namespace\' \'updating\'\n' +
'    case 131800:                    // \'processing-instruction\' \'updating\'\n' +
'    case 133202:                    // \'attribute\' \'validate\'\n' +
'    case 133241:                    // \'element\' \'validate\'\n' +
'    case 133304:                    // \'namespace\' \'validate\'\n' +
'    case 133336:                    // \'processing-instruction\' \'validate\'\n' +
'    case 133714:                    // \'attribute\' \'value\'\n' +
'    case 133753:                    // \'element\' \'value\'\n' +
'    case 133816:                    // \'namespace\' \'value\'\n' +
'    case 133848:                    // \'processing-instruction\' \'value\'\n' +
'    case 134226:                    // \'attribute\' \'variable\'\n' +
'    case 134265:                    // \'element\' \'variable\'\n' +
'    case 134328:                    // \'namespace\' \'variable\'\n' +
'    case 134360:                    // \'processing-instruction\' \'variable\'\n' +
'    case 134738:                    // \'attribute\' \'version\'\n' +
'    case 134777:                    // \'element\' \'version\'\n' +
'    case 134840:                    // \'namespace\' \'version\'\n' +
'    case 134872:                    // \'processing-instruction\' \'version\'\n' +
'    case 136786:                    // \'attribute\' \'while\'\n' +
'    case 136825:                    // \'element\' \'while\'\n' +
'    case 136888:                    // \'namespace\' \'while\'\n' +
'    case 136920:                    // \'processing-instruction\' \'while\'\n' +
'    case 140370:                    // \'attribute\' \'xquery\'\n' +
'    case 140409:                    // \'element\' \'xquery\'\n' +
'    case 140472:                    // \'namespace\' \'xquery\'\n' +
'    case 140504:                    // \'processing-instruction\' \'xquery\'\n' +
'    case 141394:                    // \'attribute\' \'{\'\n' +
'    case 141408:                    // \'comment\' \'{\'\n' +
'    case 141431:                    // \'document\' \'{\'\n' +
'    case 141433:                    // \'element\' \'{\'\n' +
'    case 141496:                    // \'namespace\' \'{\'\n' +
'    case 141514:                    // \'ordered\' \'{\'\n' +
'    case 141528:                    // \'processing-instruction\' \'{\'\n' +
'    case 141556:                    // \'text\' \'{\'\n' +
'    case 141568:                    // \'unordered\' \'{\'\n' +
'      parse_PostfixExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_AxisStep();\n' +
'    }\n' +
'    eventHandler.endNonterminal("StepExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_StepExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      lookahead2W(282);             // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' |\n' +
'                                    // \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'paragraphs\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sentences\' |\n' +
'                                    // \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' |\n' +
'                                    // \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' |\n' +
'                                    // \'where\' | \'while\' | \'with\' | \'words\' | \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      lookahead2W(280);             // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'paragraphs\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sentences\' | \'sliding\' | \'some\' | \'stable\' | \'start\' |\n' +
'                                    // \'strict\' | \'switch\' | \'text\' | \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' |\n' +
'                                    // \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' | \'validate\' |\n' +
'                                    // \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' | \'words\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      lookahead2W(281);             // NCName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \']\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'by\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'paragraphs\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sentences\' | \'sliding\' | \'some\' | \'stable\' | \'start\' |\n' +
'                                    // \'strict\' | \'switch\' | \'text\' | \'times\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' |\n' +
'                                    // \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' | \'validate\' |\n' +
'                                    // \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' | \'words\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'    case 119:                       // \'document\'\n' +
'    case 202:                       // \'ordered\'\n' +
'    case 244:                       // \'text\'\n' +
'    case 256:                       // \'unordered\'\n' +
'      lookahead2W(245);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'    case 152:                       // \'if\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      lookahead2W(238);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 93:                        // \'child\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'    case 229:                       // \'self\'\n' +
'      lookahead2W(244);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' |\n' +
'                                    // \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' | \'start\' |\n' +
'                                    // \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 6:                         // EQName^Token\n' +
'    case 70:                        // \'after\'\n' +
'    case 72:                        // \'allowing\'\n' +
'    case 75:                        // \'and\'\n' +
'    case 79:                        // \'as\'\n' +
'    case 80:                        // \'ascending\'\n' +
'    case 81:                        // \'at\'\n' +
'    case 83:                        // \'base-uri\'\n' +
'    case 84:                        // \'before\'\n' +
'    case 85:                        // \'boundary-space\'\n' +
'    case 86:                        // \'break\'\n' +
'    case 88:                        // \'case\'\n' +
'    case 89:                        // \'cast\'\n' +
'    case 90:                        // \'castable\'\n' +
'    case 91:                        // \'catch\'\n' +
'    case 94:                        // \'collation\'\n' +
'    case 97:                        // \'constraint\'\n' +
'    case 98:                        // \'construction\'\n' +
'    case 101:                       // \'context\'\n' +
'    case 102:                       // \'continue\'\n' +
'    case 103:                       // \'copy\'\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'    case 105:                       // \'count\'\n' +
'    case 106:                       // \'decimal-format\'\n' +
'    case 108:                       // \'declare\'\n' +
'    case 109:                       // \'default\'\n' +
'    case 110:                       // \'delete\'\n' +
'    case 113:                       // \'descending\'\n' +
'    case 118:                       // \'div\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 122:                       // \'else\'\n' +
'    case 123:                       // \'empty\'\n' +
'    case 125:                       // \'encoding\'\n' +
'    case 126:                       // \'end\'\n' +
'    case 128:                       // \'eq\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 131:                       // \'except\'\n' +
'    case 132:                       // \'exit\'\n' +
'    case 133:                       // \'external\'\n' +
'    case 134:                       // \'first\'\n' +
'    case 137:                       // \'for\'\n' +
'    case 141:                       // \'ft-option\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 146:                       // \'ge\'\n' +
'    case 148:                       // \'group\'\n' +
'    case 150:                       // \'gt\'\n' +
'    case 151:                       // \'idiv\'\n' +
'    case 153:                       // \'import\'\n' +
'    case 154:                       // \'in\'\n' +
'    case 155:                       // \'index\'\n' +
'    case 159:                       // \'insert\'\n' +
'    case 160:                       // \'instance\'\n' +
'    case 161:                       // \'integrity\'\n' +
'    case 162:                       // \'intersect\'\n' +
'    case 163:                       // \'into\'\n' +
'    case 164:                       // \'is\'\n' +
'    case 170:                       // \'last\'\n' +
'    case 171:                       // \'lax\'\n' +
'    case 172:                       // \'le\'\n' +
'    case 174:                       // \'let\'\n' +
'    case 176:                       // \'loop\'\n' +
'    case 178:                       // \'lt\'\n' +
'    case 180:                       // \'mod\'\n' +
'    case 181:                       // \'modify\'\n' +
'    case 182:                       // \'module\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 186:                       // \'ne\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 192:                       // \'nodes\'\n' +
'    case 198:                       // \'only\'\n' +
'    case 199:                       // \'option\'\n' +
'    case 200:                       // \'or\'\n' +
'    case 201:                       // \'order\'\n' +
'    case 203:                       // \'ordering\'\n' +
'    case 218:                       // \'rename\'\n' +
'    case 219:                       // \'replace\'\n' +
'    case 220:                       // \'return\'\n' +
'    case 221:                       // \'returning\'\n' +
'    case 222:                       // \'revalidation\'\n' +
'    case 224:                       // \'satisfies\'\n' +
'    case 225:                       // \'schema\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 228:                       // \'score\'\n' +
'    case 234:                       // \'sliding\'\n' +
'    case 235:                       // \'some\'\n' +
'    case 236:                       // \'stable\'\n' +
'    case 237:                       // \'start\'\n' +
'    case 240:                       // \'strict\'\n' +
'    case 248:                       // \'to\'\n' +
'    case 249:                       // \'treat\'\n' +
'    case 250:                       // \'try\'\n' +
'    case 251:                       // \'tumbling\'\n' +
'    case 252:                       // \'type\'\n' +
'    case 254:                       // \'union\'\n' +
'    case 257:                       // \'updating\'\n' +
'    case 260:                       // \'validate\'\n' +
'    case 261:                       // \'value\'\n' +
'    case 262:                       // \'variable\'\n' +
'    case 263:                       // \'version\'\n' +
'    case 266:                       // \'where\'\n' +
'    case 267:                       // \'while\'\n' +
'    case 270:                       // \'with\'\n' +
'    case 274:                       // \'xquery\'\n' +
'      lookahead2W(242);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 35922                 // \'attribute\' \'after\'\n' +
'     || lk == 35961                 // \'element\' \'after\'\n' +
'     || lk == 36024                 // \'namespace\' \'after\'\n' +
'     || lk == 36056                 // \'processing-instruction\' \'after\'\n' +
'     || lk == 38482                 // \'attribute\' \'and\'\n' +
'     || lk == 38521                 // \'element\' \'and\'\n' +
'     || lk == 38584                 // \'namespace\' \'and\'\n' +
'     || lk == 38616                 // \'processing-instruction\' \'and\'\n' +
'     || lk == 40530                 // \'attribute\' \'as\'\n' +
'     || lk == 40569                 // \'element\' \'as\'\n' +
'     || lk == 40632                 // \'namespace\' \'as\'\n' +
'     || lk == 40664                 // \'processing-instruction\' \'as\'\n' +
'     || lk == 41042                 // \'attribute\' \'ascending\'\n' +
'     || lk == 41081                 // \'element\' \'ascending\'\n' +
'     || lk == 41144                 // \'namespace\' \'ascending\'\n' +
'     || lk == 41176                 // \'processing-instruction\' \'ascending\'\n' +
'     || lk == 41554                 // \'attribute\' \'at\'\n' +
'     || lk == 41593                 // \'element\' \'at\'\n' +
'     || lk == 41656                 // \'namespace\' \'at\'\n' +
'     || lk == 41688                 // \'processing-instruction\' \'at\'\n' +
'     || lk == 43090                 // \'attribute\' \'before\'\n' +
'     || lk == 43129                 // \'element\' \'before\'\n' +
'     || lk == 43192                 // \'namespace\' \'before\'\n' +
'     || lk == 43224                 // \'processing-instruction\' \'before\'\n' +
'     || lk == 45138                 // \'attribute\' \'case\'\n' +
'     || lk == 45177                 // \'element\' \'case\'\n' +
'     || lk == 45240                 // \'namespace\' \'case\'\n' +
'     || lk == 45272                 // \'processing-instruction\' \'case\'\n' +
'     || lk == 45650                 // \'attribute\' \'cast\'\n' +
'     || lk == 45689                 // \'element\' \'cast\'\n' +
'     || lk == 45752                 // \'namespace\' \'cast\'\n' +
'     || lk == 45784                 // \'processing-instruction\' \'cast\'\n' +
'     || lk == 46162                 // \'attribute\' \'castable\'\n' +
'     || lk == 46201                 // \'element\' \'castable\'\n' +
'     || lk == 46264                 // \'namespace\' \'castable\'\n' +
'     || lk == 46296                 // \'processing-instruction\' \'castable\'\n' +
'     || lk == 48210                 // \'attribute\' \'collation\'\n' +
'     || lk == 48249                 // \'element\' \'collation\'\n' +
'     || lk == 48312                 // \'namespace\' \'collation\'\n' +
'     || lk == 48344                 // \'processing-instruction\' \'collation\'\n' +
'     || lk == 53842                 // \'attribute\' \'count\'\n' +
'     || lk == 53881                 // \'element\' \'count\'\n' +
'     || lk == 53944                 // \'namespace\' \'count\'\n' +
'     || lk == 53976                 // \'processing-instruction\' \'count\'\n' +
'     || lk == 55890                 // \'attribute\' \'default\'\n' +
'     || lk == 55929                 // \'element\' \'default\'\n' +
'     || lk == 55992                 // \'namespace\' \'default\'\n' +
'     || lk == 56024                 // \'processing-instruction\' \'default\'\n' +
'     || lk == 57938                 // \'attribute\' \'descending\'\n' +
'     || lk == 57977                 // \'element\' \'descending\'\n' +
'     || lk == 58040                 // \'namespace\' \'descending\'\n' +
'     || lk == 58072                 // \'processing-instruction\' \'descending\'\n' +
'     || lk == 60498                 // \'attribute\' \'div\'\n' +
'     || lk == 60537                 // \'element\' \'div\'\n' +
'     || lk == 60600                 // \'namespace\' \'div\'\n' +
'     || lk == 60632                 // \'processing-instruction\' \'div\'\n' +
'     || lk == 62546                 // \'attribute\' \'else\'\n' +
'     || lk == 62585                 // \'element\' \'else\'\n' +
'     || lk == 62648                 // \'namespace\' \'else\'\n' +
'     || lk == 62680                 // \'processing-instruction\' \'else\'\n' +
'     || lk == 63058                 // \'attribute\' \'empty\'\n' +
'     || lk == 63097                 // \'element\' \'empty\'\n' +
'     || lk == 63160                 // \'namespace\' \'empty\'\n' +
'     || lk == 63192                 // \'processing-instruction\' \'empty\'\n' +
'     || lk == 64594                 // \'attribute\' \'end\'\n' +
'     || lk == 64633                 // \'element\' \'end\'\n' +
'     || lk == 64696                 // \'namespace\' \'end\'\n' +
'     || lk == 64728                 // \'processing-instruction\' \'end\'\n' +
'     || lk == 65618                 // \'attribute\' \'eq\'\n' +
'     || lk == 65657                 // \'element\' \'eq\'\n' +
'     || lk == 65720                 // \'namespace\' \'eq\'\n' +
'     || lk == 65752                 // \'processing-instruction\' \'eq\'\n' +
'     || lk == 67154                 // \'attribute\' \'except\'\n' +
'     || lk == 67193                 // \'element\' \'except\'\n' +
'     || lk == 67256                 // \'namespace\' \'except\'\n' +
'     || lk == 67288                 // \'processing-instruction\' \'except\'\n' +
'     || lk == 70226                 // \'attribute\' \'for\'\n' +
'     || lk == 70265                 // \'element\' \'for\'\n' +
'     || lk == 70328                 // \'namespace\' \'for\'\n' +
'     || lk == 70360                 // \'processing-instruction\' \'for\'\n' +
'     || lk == 74834                 // \'attribute\' \'ge\'\n' +
'     || lk == 74873                 // \'element\' \'ge\'\n' +
'     || lk == 74936                 // \'namespace\' \'ge\'\n' +
'     || lk == 74968                 // \'processing-instruction\' \'ge\'\n' +
'     || lk == 75858                 // \'attribute\' \'group\'\n' +
'     || lk == 75897                 // \'element\' \'group\'\n' +
'     || lk == 75960                 // \'namespace\' \'group\'\n' +
'     || lk == 75992                 // \'processing-instruction\' \'group\'\n' +
'     || lk == 76882                 // \'attribute\' \'gt\'\n' +
'     || lk == 76921                 // \'element\' \'gt\'\n' +
'     || lk == 76984                 // \'namespace\' \'gt\'\n' +
'     || lk == 77016                 // \'processing-instruction\' \'gt\'\n' +
'     || lk == 77394                 // \'attribute\' \'idiv\'\n' +
'     || lk == 77433                 // \'element\' \'idiv\'\n' +
'     || lk == 77496                 // \'namespace\' \'idiv\'\n' +
'     || lk == 77528                 // \'processing-instruction\' \'idiv\'\n' +
'     || lk == 82002                 // \'attribute\' \'instance\'\n' +
'     || lk == 82041                 // \'element\' \'instance\'\n' +
'     || lk == 82104                 // \'namespace\' \'instance\'\n' +
'     || lk == 82136                 // \'processing-instruction\' \'instance\'\n' +
'     || lk == 83026                 // \'attribute\' \'intersect\'\n' +
'     || lk == 83065                 // \'element\' \'intersect\'\n' +
'     || lk == 83128                 // \'namespace\' \'intersect\'\n' +
'     || lk == 83160                 // \'processing-instruction\' \'intersect\'\n' +
'     || lk == 83538                 // \'attribute\' \'into\'\n' +
'     || lk == 83577                 // \'element\' \'into\'\n' +
'     || lk == 83640                 // \'namespace\' \'into\'\n' +
'     || lk == 83672                 // \'processing-instruction\' \'into\'\n' +
'     || lk == 84050                 // \'attribute\' \'is\'\n' +
'     || lk == 84089                 // \'element\' \'is\'\n' +
'     || lk == 84152                 // \'namespace\' \'is\'\n' +
'     || lk == 84184                 // \'processing-instruction\' \'is\'\n' +
'     || lk == 88146                 // \'attribute\' \'le\'\n' +
'     || lk == 88185                 // \'element\' \'le\'\n' +
'     || lk == 88248                 // \'namespace\' \'le\'\n' +
'     || lk == 88280                 // \'processing-instruction\' \'le\'\n' +
'     || lk == 89170                 // \'attribute\' \'let\'\n' +
'     || lk == 89209                 // \'element\' \'let\'\n' +
'     || lk == 89272                 // \'namespace\' \'let\'\n' +
'     || lk == 89304                 // \'processing-instruction\' \'let\'\n' +
'     || lk == 91218                 // \'attribute\' \'lt\'\n' +
'     || lk == 91257                 // \'element\' \'lt\'\n' +
'     || lk == 91320                 // \'namespace\' \'lt\'\n' +
'     || lk == 91352                 // \'processing-instruction\' \'lt\'\n' +
'     || lk == 92242                 // \'attribute\' \'mod\'\n' +
'     || lk == 92281                 // \'element\' \'mod\'\n' +
'     || lk == 92344                 // \'namespace\' \'mod\'\n' +
'     || lk == 92376                 // \'processing-instruction\' \'mod\'\n' +
'     || lk == 92754                 // \'attribute\' \'modify\'\n' +
'     || lk == 92793                 // \'element\' \'modify\'\n' +
'     || lk == 92856                 // \'namespace\' \'modify\'\n' +
'     || lk == 92888                 // \'processing-instruction\' \'modify\'\n' +
'     || lk == 95314                 // \'attribute\' \'ne\'\n' +
'     || lk == 95353                 // \'element\' \'ne\'\n' +
'     || lk == 95416                 // \'namespace\' \'ne\'\n' +
'     || lk == 95448                 // \'processing-instruction\' \'ne\'\n' +
'     || lk == 101458                // \'attribute\' \'only\'\n' +
'     || lk == 101497                // \'element\' \'only\'\n' +
'     || lk == 101560                // \'namespace\' \'only\'\n' +
'     || lk == 101592                // \'processing-instruction\' \'only\'\n' +
'     || lk == 102482                // \'attribute\' \'or\'\n' +
'     || lk == 102521                // \'element\' \'or\'\n' +
'     || lk == 102584                // \'namespace\' \'or\'\n' +
'     || lk == 102616                // \'processing-instruction\' \'or\'\n' +
'     || lk == 102994                // \'attribute\' \'order\'\n' +
'     || lk == 103033                // \'element\' \'order\'\n' +
'     || lk == 103096                // \'namespace\' \'order\'\n' +
'     || lk == 103128                // \'processing-instruction\' \'order\'\n' +
'     || lk == 112722                // \'attribute\' \'return\'\n' +
'     || lk == 112761                // \'element\' \'return\'\n' +
'     || lk == 112824                // \'namespace\' \'return\'\n' +
'     || lk == 112856                // \'processing-instruction\' \'return\'\n' +
'     || lk == 114770                // \'attribute\' \'satisfies\'\n' +
'     || lk == 114809                // \'element\' \'satisfies\'\n' +
'     || lk == 114872                // \'namespace\' \'satisfies\'\n' +
'     || lk == 114904                // \'processing-instruction\' \'satisfies\'\n' +
'     || lk == 120914                // \'attribute\' \'stable\'\n' +
'     || lk == 120953                // \'element\' \'stable\'\n' +
'     || lk == 121016                // \'namespace\' \'stable\'\n' +
'     || lk == 121048                // \'processing-instruction\' \'stable\'\n' +
'     || lk == 121426                // \'attribute\' \'start\'\n' +
'     || lk == 121465                // \'element\' \'start\'\n' +
'     || lk == 121528                // \'namespace\' \'start\'\n' +
'     || lk == 121560                // \'processing-instruction\' \'start\'\n' +
'     || lk == 127058                // \'attribute\' \'to\'\n' +
'     || lk == 127097                // \'element\' \'to\'\n' +
'     || lk == 127160                // \'namespace\' \'to\'\n' +
'     || lk == 127192                // \'processing-instruction\' \'to\'\n' +
'     || lk == 127570                // \'attribute\' \'treat\'\n' +
'     || lk == 127609                // \'element\' \'treat\'\n' +
'     || lk == 127672                // \'namespace\' \'treat\'\n' +
'     || lk == 127704                // \'processing-instruction\' \'treat\'\n' +
'     || lk == 130130                // \'attribute\' \'union\'\n' +
'     || lk == 130169                // \'element\' \'union\'\n' +
'     || lk == 130232                // \'namespace\' \'union\'\n' +
'     || lk == 130264                // \'processing-instruction\' \'union\'\n' +
'     || lk == 136274                // \'attribute\' \'where\'\n' +
'     || lk == 136313                // \'element\' \'where\'\n' +
'     || lk == 136376                // \'namespace\' \'where\'\n' +
'     || lk == 136408                // \'processing-instruction\' \'where\'\n' +
'     || lk == 138322                // \'attribute\' \'with\'\n' +
'     || lk == 138361                // \'element\' \'with\'\n' +
'     || lk == 138424                // \'namespace\' \'with\'\n' +
'     || lk == 138456)               // \'processing-instruction\' \'with\'\n' +
'    {\n' +
'      lk = memoized(3, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_PostfixExpr();\n' +
'          memoize(3, e0A, -1);\n' +
'          lk = -3;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(3, e0A, -2);\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'    case 8:                         // IntegerLiteral\n' +
'    case 9:                         // DecimalLiteral\n' +
'    case 10:                        // DoubleLiteral\n' +
'    case 11:                        // StringLiteral\n' +
'    case 31:                        // \'$\'\n' +
'    case 32:                        // \'%\'\n' +
'    case 34:                        // \'(\'\n' +
'    case 44:                        // \'.\'\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'    case 68:                        // \'[\'\n' +
'    case 276:                       // \'{\'\n' +
'    case 278:                       // \'{|\'\n' +
'    case 3154:                      // \'attribute\' EQName^Token\n' +
'    case 3193:                      // \'element\' EQName^Token\n' +
'    case 9912:                      // \'namespace\' NCName^Token\n' +
'    case 9944:                      // \'processing-instruction\' NCName^Token\n' +
'    case 14854:                     // EQName^Token \'#\'\n' +
'    case 14918:                     // \'after\' \'#\'\n' +
'    case 14920:                     // \'allowing\' \'#\'\n' +
'    case 14921:                     // \'ancestor\' \'#\'\n' +
'    case 14922:                     // \'ancestor-or-self\' \'#\'\n' +
'    case 14923:                     // \'and\' \'#\'\n' +
'    case 14927:                     // \'as\' \'#\'\n' +
'    case 14928:                     // \'ascending\' \'#\'\n' +
'    case 14929:                     // \'at\' \'#\'\n' +
'    case 14930:                     // \'attribute\' \'#\'\n' +
'    case 14931:                     // \'base-uri\' \'#\'\n' +
'    case 14932:                     // \'before\' \'#\'\n' +
'    case 14933:                     // \'boundary-space\' \'#\'\n' +
'    case 14934:                     // \'break\' \'#\'\n' +
'    case 14936:                     // \'case\' \'#\'\n' +
'    case 14937:                     // \'cast\' \'#\'\n' +
'    case 14938:                     // \'castable\' \'#\'\n' +
'    case 14939:                     // \'catch\' \'#\'\n' +
'    case 14941:                     // \'child\' \'#\'\n' +
'    case 14942:                     // \'collation\' \'#\'\n' +
'    case 14944:                     // \'comment\' \'#\'\n' +
'    case 14945:                     // \'constraint\' \'#\'\n' +
'    case 14946:                     // \'construction\' \'#\'\n' +
'    case 14949:                     // \'context\' \'#\'\n' +
'    case 14950:                     // \'continue\' \'#\'\n' +
'    case 14951:                     // \'copy\' \'#\'\n' +
'    case 14952:                     // \'copy-namespaces\' \'#\'\n' +
'    case 14953:                     // \'count\' \'#\'\n' +
'    case 14954:                     // \'decimal-format\' \'#\'\n' +
'    case 14956:                     // \'declare\' \'#\'\n' +
'    case 14957:                     // \'default\' \'#\'\n' +
'    case 14958:                     // \'delete\' \'#\'\n' +
'    case 14959:                     // \'descendant\' \'#\'\n' +
'    case 14960:                     // \'descendant-or-self\' \'#\'\n' +
'    case 14961:                     // \'descending\' \'#\'\n' +
'    case 14966:                     // \'div\' \'#\'\n' +
'    case 14967:                     // \'document\' \'#\'\n' +
'    case 14968:                     // \'document-node\' \'#\'\n' +
'    case 14969:                     // \'element\' \'#\'\n' +
'    case 14970:                     // \'else\' \'#\'\n' +
'    case 14971:                     // \'empty\' \'#\'\n' +
'    case 14972:                     // \'empty-sequence\' \'#\'\n' +
'    case 14973:                     // \'encoding\' \'#\'\n' +
'    case 14974:                     // \'end\' \'#\'\n' +
'    case 14976:                     // \'eq\' \'#\'\n' +
'    case 14977:                     // \'every\' \'#\'\n' +
'    case 14979:                     // \'except\' \'#\'\n' +
'    case 14980:                     // \'exit\' \'#\'\n' +
'    case 14981:                     // \'external\' \'#\'\n' +
'    case 14982:                     // \'first\' \'#\'\n' +
'    case 14983:                     // \'following\' \'#\'\n' +
'    case 14984:                     // \'following-sibling\' \'#\'\n' +
'    case 14985:                     // \'for\' \'#\'\n' +
'    case 14989:                     // \'ft-option\' \'#\'\n' +
'    case 14993:                     // \'function\' \'#\'\n' +
'    case 14994:                     // \'ge\' \'#\'\n' +
'    case 14996:                     // \'group\' \'#\'\n' +
'    case 14998:                     // \'gt\' \'#\'\n' +
'    case 14999:                     // \'idiv\' \'#\'\n' +
'    case 15000:                     // \'if\' \'#\'\n' +
'    case 15001:                     // \'import\' \'#\'\n' +
'    case 15002:                     // \'in\' \'#\'\n' +
'    case 15003:                     // \'index\' \'#\'\n' +
'    case 15007:                     // \'insert\' \'#\'\n' +
'    case 15008:                     // \'instance\' \'#\'\n' +
'    case 15009:                     // \'integrity\' \'#\'\n' +
'    case 15010:                     // \'intersect\' \'#\'\n' +
'    case 15011:                     // \'into\' \'#\'\n' +
'    case 15012:                     // \'is\' \'#\'\n' +
'    case 15013:                     // \'item\' \'#\'\n' +
'    case 15018:                     // \'last\' \'#\'\n' +
'    case 15019:                     // \'lax\' \'#\'\n' +
'    case 15020:                     // \'le\' \'#\'\n' +
'    case 15022:                     // \'let\' \'#\'\n' +
'    case 15024:                     // \'loop\' \'#\'\n' +
'    case 15026:                     // \'lt\' \'#\'\n' +
'    case 15028:                     // \'mod\' \'#\'\n' +
'    case 15029:                     // \'modify\' \'#\'\n' +
'    case 15030:                     // \'module\' \'#\'\n' +
'    case 15032:                     // \'namespace\' \'#\'\n' +
'    case 15033:                     // \'namespace-node\' \'#\'\n' +
'    case 15034:                     // \'ne\' \'#\'\n' +
'    case 15039:                     // \'node\' \'#\'\n' +
'    case 15040:                     // \'nodes\' \'#\'\n' +
'    case 15046:                     // \'only\' \'#\'\n' +
'    case 15047:                     // \'option\' \'#\'\n' +
'    case 15048:                     // \'or\' \'#\'\n' +
'    case 15049:                     // \'order\' \'#\'\n' +
'    case 15050:                     // \'ordered\' \'#\'\n' +
'    case 15051:                     // \'ordering\' \'#\'\n' +
'    case 15054:                     // \'parent\' \'#\'\n' +
'    case 15060:                     // \'preceding\' \'#\'\n' +
'    case 15061:                     // \'preceding-sibling\' \'#\'\n' +
'    case 15064:                     // \'processing-instruction\' \'#\'\n' +
'    case 15066:                     // \'rename\' \'#\'\n' +
'    case 15067:                     // \'replace\' \'#\'\n' +
'    case 15068:                     // \'return\' \'#\'\n' +
'    case 15069:                     // \'returning\' \'#\'\n' +
'    case 15070:                     // \'revalidation\' \'#\'\n' +
'    case 15072:                     // \'satisfies\' \'#\'\n' +
'    case 15073:                     // \'schema\' \'#\'\n' +
'    case 15074:                     // \'schema-attribute\' \'#\'\n' +
'    case 15075:                     // \'schema-element\' \'#\'\n' +
'    case 15076:                     // \'score\' \'#\'\n' +
'    case 15077:                     // \'self\' \'#\'\n' +
'    case 15082:                     // \'sliding\' \'#\'\n' +
'    case 15083:                     // \'some\' \'#\'\n' +
'    case 15084:                     // \'stable\' \'#\'\n' +
'    case 15085:                     // \'start\' \'#\'\n' +
'    case 15088:                     // \'strict\' \'#\'\n' +
'    case 15091:                     // \'switch\' \'#\'\n' +
'    case 15092:                     // \'text\' \'#\'\n' +
'    case 15096:                     // \'to\' \'#\'\n' +
'    case 15097:                     // \'treat\' \'#\'\n' +
'    case 15098:                     // \'try\' \'#\'\n' +
'    case 15099:                     // \'tumbling\' \'#\'\n' +
'    case 15100:                     // \'type\' \'#\'\n' +
'    case 15101:                     // \'typeswitch\' \'#\'\n' +
'    case 15102:                     // \'union\' \'#\'\n' +
'    case 15104:                     // \'unordered\' \'#\'\n' +
'    case 15105:                     // \'updating\' \'#\'\n' +
'    case 15108:                     // \'validate\' \'#\'\n' +
'    case 15109:                     // \'value\' \'#\'\n' +
'    case 15110:                     // \'variable\' \'#\'\n' +
'    case 15111:                     // \'version\' \'#\'\n' +
'    case 15114:                     // \'where\' \'#\'\n' +
'    case 15115:                     // \'while\' \'#\'\n' +
'    case 15118:                     // \'with\' \'#\'\n' +
'    case 15122:                     // \'xquery\' \'#\'\n' +
'    case 17414:                     // EQName^Token \'(\'\n' +
'    case 17478:                     // \'after\' \'(\'\n' +
'    case 17480:                     // \'allowing\' \'(\'\n' +
'    case 17481:                     // \'ancestor\' \'(\'\n' +
'    case 17482:                     // \'ancestor-or-self\' \'(\'\n' +
'    case 17483:                     // \'and\' \'(\'\n' +
'    case 17487:                     // \'as\' \'(\'\n' +
'    case 17488:                     // \'ascending\' \'(\'\n' +
'    case 17489:                     // \'at\' \'(\'\n' +
'    case 17491:                     // \'base-uri\' \'(\'\n' +
'    case 17492:                     // \'before\' \'(\'\n' +
'    case 17493:                     // \'boundary-space\' \'(\'\n' +
'    case 17494:                     // \'break\' \'(\'\n' +
'    case 17496:                     // \'case\' \'(\'\n' +
'    case 17497:                     // \'cast\' \'(\'\n' +
'    case 17498:                     // \'castable\' \'(\'\n' +
'    case 17499:                     // \'catch\' \'(\'\n' +
'    case 17501:                     // \'child\' \'(\'\n' +
'    case 17502:                     // \'collation\' \'(\'\n' +
'    case 17505:                     // \'constraint\' \'(\'\n' +
'    case 17506:                     // \'construction\' \'(\'\n' +
'    case 17509:                     // \'context\' \'(\'\n' +
'    case 17510:                     // \'continue\' \'(\'\n' +
'    case 17511:                     // \'copy\' \'(\'\n' +
'    case 17512:                     // \'copy-namespaces\' \'(\'\n' +
'    case 17513:                     // \'count\' \'(\'\n' +
'    case 17514:                     // \'decimal-format\' \'(\'\n' +
'    case 17516:                     // \'declare\' \'(\'\n' +
'    case 17517:                     // \'default\' \'(\'\n' +
'    case 17518:                     // \'delete\' \'(\'\n' +
'    case 17519:                     // \'descendant\' \'(\'\n' +
'    case 17520:                     // \'descendant-or-self\' \'(\'\n' +
'    case 17521:                     // \'descending\' \'(\'\n' +
'    case 17526:                     // \'div\' \'(\'\n' +
'    case 17527:                     // \'document\' \'(\'\n' +
'    case 17530:                     // \'else\' \'(\'\n' +
'    case 17531:                     // \'empty\' \'(\'\n' +
'    case 17533:                     // \'encoding\' \'(\'\n' +
'    case 17534:                     // \'end\' \'(\'\n' +
'    case 17536:                     // \'eq\' \'(\'\n' +
'    case 17537:                     // \'every\' \'(\'\n' +
'    case 17539:                     // \'except\' \'(\'\n' +
'    case 17540:                     // \'exit\' \'(\'\n' +
'    case 17541:                     // \'external\' \'(\'\n' +
'    case 17542:                     // \'first\' \'(\'\n' +
'    case 17543:                     // \'following\' \'(\'\n' +
'    case 17544:                     // \'following-sibling\' \'(\'\n' +
'    case 17545:                     // \'for\' \'(\'\n' +
'    case 17549:                     // \'ft-option\' \'(\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'    case 17554:                     // \'ge\' \'(\'\n' +
'    case 17556:                     // \'group\' \'(\'\n' +
'    case 17558:                     // \'gt\' \'(\'\n' +
'    case 17559:                     // \'idiv\' \'(\'\n' +
'    case 17561:                     // \'import\' \'(\'\n' +
'    case 17562:                     // \'in\' \'(\'\n' +
'    case 17563:                     // \'index\' \'(\'\n' +
'    case 17567:                     // \'insert\' \'(\'\n' +
'    case 17568:                     // \'instance\' \'(\'\n' +
'    case 17569:                     // \'integrity\' \'(\'\n' +
'    case 17570:                     // \'intersect\' \'(\'\n' +
'    case 17571:                     // \'into\' \'(\'\n' +
'    case 17572:                     // \'is\' \'(\'\n' +
'    case 17578:                     // \'last\' \'(\'\n' +
'    case 17579:                     // \'lax\' \'(\'\n' +
'    case 17580:                     // \'le\' \'(\'\n' +
'    case 17582:                     // \'let\' \'(\'\n' +
'    case 17584:                     // \'loop\' \'(\'\n' +
'    case 17586:                     // \'lt\' \'(\'\n' +
'    case 17588:                     // \'mod\' \'(\'\n' +
'    case 17589:                     // \'modify\' \'(\'\n' +
'    case 17590:                     // \'module\' \'(\'\n' +
'    case 17592:                     // \'namespace\' \'(\'\n' +
'    case 17594:                     // \'ne\' \'(\'\n' +
'    case 17600:                     // \'nodes\' \'(\'\n' +
'    case 17606:                     // \'only\' \'(\'\n' +
'    case 17607:                     // \'option\' \'(\'\n' +
'    case 17608:                     // \'or\' \'(\'\n' +
'    case 17609:                     // \'order\' \'(\'\n' +
'    case 17610:                     // \'ordered\' \'(\'\n' +
'    case 17611:                     // \'ordering\' \'(\'\n' +
'    case 17614:                     // \'parent\' \'(\'\n' +
'    case 17620:                     // \'preceding\' \'(\'\n' +
'    case 17621:                     // \'preceding-sibling\' \'(\'\n' +
'    case 17626:                     // \'rename\' \'(\'\n' +
'    case 17627:                     // \'replace\' \'(\'\n' +
'    case 17628:                     // \'return\' \'(\'\n' +
'    case 17629:                     // \'returning\' \'(\'\n' +
'    case 17630:                     // \'revalidation\' \'(\'\n' +
'    case 17632:                     // \'satisfies\' \'(\'\n' +
'    case 17633:                     // \'schema\' \'(\'\n' +
'    case 17636:                     // \'score\' \'(\'\n' +
'    case 17637:                     // \'self\' \'(\'\n' +
'    case 17642:                     // \'sliding\' \'(\'\n' +
'    case 17643:                     // \'some\' \'(\'\n' +
'    case 17644:                     // \'stable\' \'(\'\n' +
'    case 17645:                     // \'start\' \'(\'\n' +
'    case 17648:                     // \'strict\' \'(\'\n' +
'    case 17656:                     // \'to\' \'(\'\n' +
'    case 17657:                     // \'treat\' \'(\'\n' +
'    case 17658:                     // \'try\' \'(\'\n' +
'    case 17659:                     // \'tumbling\' \'(\'\n' +
'    case 17660:                     // \'type\' \'(\'\n' +
'    case 17662:                     // \'union\' \'(\'\n' +
'    case 17664:                     // \'unordered\' \'(\'\n' +
'    case 17665:                     // \'updating\' \'(\'\n' +
'    case 17668:                     // \'validate\' \'(\'\n' +
'    case 17669:                     // \'value\' \'(\'\n' +
'    case 17670:                     // \'variable\' \'(\'\n' +
'    case 17671:                     // \'version\' \'(\'\n' +
'    case 17674:                     // \'where\' \'(\'\n' +
'    case 17675:                     // \'while\' \'(\'\n' +
'    case 17678:                     // \'with\' \'(\'\n' +
'    case 17682:                     // \'xquery\' \'(\'\n' +
'    case 36946:                     // \'attribute\' \'allowing\'\n' +
'    case 36985:                     // \'element\' \'allowing\'\n' +
'    case 37048:                     // \'namespace\' \'allowing\'\n' +
'    case 37080:                     // \'processing-instruction\' \'allowing\'\n' +
'    case 37458:                     // \'attribute\' \'ancestor\'\n' +
'    case 37497:                     // \'element\' \'ancestor\'\n' +
'    case 37560:                     // \'namespace\' \'ancestor\'\n' +
'    case 37592:                     // \'processing-instruction\' \'ancestor\'\n' +
'    case 37970:                     // \'attribute\' \'ancestor-or-self\'\n' +
'    case 38009:                     // \'element\' \'ancestor-or-self\'\n' +
'    case 38072:                     // \'namespace\' \'ancestor-or-self\'\n' +
'    case 38104:                     // \'processing-instruction\' \'ancestor-or-self\'\n' +
'    case 42066:                     // \'attribute\' \'attribute\'\n' +
'    case 42105:                     // \'element\' \'attribute\'\n' +
'    case 42168:                     // \'namespace\' \'attribute\'\n' +
'    case 42200:                     // \'processing-instruction\' \'attribute\'\n' +
'    case 42578:                     // \'attribute\' \'base-uri\'\n' +
'    case 42617:                     // \'element\' \'base-uri\'\n' +
'    case 42680:                     // \'namespace\' \'base-uri\'\n' +
'    case 42712:                     // \'processing-instruction\' \'base-uri\'\n' +
'    case 43602:                     // \'attribute\' \'boundary-space\'\n' +
'    case 43641:                     // \'element\' \'boundary-space\'\n' +
'    case 43704:                     // \'namespace\' \'boundary-space\'\n' +
'    case 43736:                     // \'processing-instruction\' \'boundary-space\'\n' +
'    case 44114:                     // \'attribute\' \'break\'\n' +
'    case 44153:                     // \'element\' \'break\'\n' +
'    case 44216:                     // \'namespace\' \'break\'\n' +
'    case 44248:                     // \'processing-instruction\' \'break\'\n' +
'    case 46674:                     // \'attribute\' \'catch\'\n' +
'    case 46713:                     // \'element\' \'catch\'\n' +
'    case 46776:                     // \'namespace\' \'catch\'\n' +
'    case 46808:                     // \'processing-instruction\' \'catch\'\n' +
'    case 47698:                     // \'attribute\' \'child\'\n' +
'    case 47737:                     // \'element\' \'child\'\n' +
'    case 47800:                     // \'namespace\' \'child\'\n' +
'    case 47832:                     // \'processing-instruction\' \'child\'\n' +
'    case 49234:                     // \'attribute\' \'comment\'\n' +
'    case 49273:                     // \'element\' \'comment\'\n' +
'    case 49336:                     // \'namespace\' \'comment\'\n' +
'    case 49368:                     // \'processing-instruction\' \'comment\'\n' +
'    case 49746:                     // \'attribute\' \'constraint\'\n' +
'    case 49785:                     // \'element\' \'constraint\'\n' +
'    case 49848:                     // \'namespace\' \'constraint\'\n' +
'    case 49880:                     // \'processing-instruction\' \'constraint\'\n' +
'    case 50258:                     // \'attribute\' \'construction\'\n' +
'    case 50297:                     // \'element\' \'construction\'\n' +
'    case 50360:                     // \'namespace\' \'construction\'\n' +
'    case 50392:                     // \'processing-instruction\' \'construction\'\n' +
'    case 51794:                     // \'attribute\' \'context\'\n' +
'    case 51833:                     // \'element\' \'context\'\n' +
'    case 51896:                     // \'namespace\' \'context\'\n' +
'    case 51928:                     // \'processing-instruction\' \'context\'\n' +
'    case 52306:                     // \'attribute\' \'continue\'\n' +
'    case 52345:                     // \'element\' \'continue\'\n' +
'    case 52408:                     // \'namespace\' \'continue\'\n' +
'    case 52440:                     // \'processing-instruction\' \'continue\'\n' +
'    case 52818:                     // \'attribute\' \'copy\'\n' +
'    case 52857:                     // \'element\' \'copy\'\n' +
'    case 52920:                     // \'namespace\' \'copy\'\n' +
'    case 52952:                     // \'processing-instruction\' \'copy\'\n' +
'    case 53330:                     // \'attribute\' \'copy-namespaces\'\n' +
'    case 53369:                     // \'element\' \'copy-namespaces\'\n' +
'    case 53432:                     // \'namespace\' \'copy-namespaces\'\n' +
'    case 53464:                     // \'processing-instruction\' \'copy-namespaces\'\n' +
'    case 54354:                     // \'attribute\' \'decimal-format\'\n' +
'    case 54393:                     // \'element\' \'decimal-format\'\n' +
'    case 54456:                     // \'namespace\' \'decimal-format\'\n' +
'    case 54488:                     // \'processing-instruction\' \'decimal-format\'\n' +
'    case 55378:                     // \'attribute\' \'declare\'\n' +
'    case 55417:                     // \'element\' \'declare\'\n' +
'    case 55480:                     // \'namespace\' \'declare\'\n' +
'    case 55512:                     // \'processing-instruction\' \'declare\'\n' +
'    case 56402:                     // \'attribute\' \'delete\'\n' +
'    case 56441:                     // \'element\' \'delete\'\n' +
'    case 56504:                     // \'namespace\' \'delete\'\n' +
'    case 56536:                     // \'processing-instruction\' \'delete\'\n' +
'    case 56914:                     // \'attribute\' \'descendant\'\n' +
'    case 56953:                     // \'element\' \'descendant\'\n' +
'    case 57016:                     // \'namespace\' \'descendant\'\n' +
'    case 57048:                     // \'processing-instruction\' \'descendant\'\n' +
'    case 57426:                     // \'attribute\' \'descendant-or-self\'\n' +
'    case 57465:                     // \'element\' \'descendant-or-self\'\n' +
'    case 57528:                     // \'namespace\' \'descendant-or-self\'\n' +
'    case 57560:                     // \'processing-instruction\' \'descendant-or-self\'\n' +
'    case 61010:                     // \'attribute\' \'document\'\n' +
'    case 61049:                     // \'element\' \'document\'\n' +
'    case 61112:                     // \'namespace\' \'document\'\n' +
'    case 61144:                     // \'processing-instruction\' \'document\'\n' +
'    case 61522:                     // \'attribute\' \'document-node\'\n' +
'    case 61561:                     // \'element\' \'document-node\'\n' +
'    case 61624:                     // \'namespace\' \'document-node\'\n' +
'    case 61656:                     // \'processing-instruction\' \'document-node\'\n' +
'    case 62034:                     // \'attribute\' \'element\'\n' +
'    case 62073:                     // \'element\' \'element\'\n' +
'    case 62136:                     // \'namespace\' \'element\'\n' +
'    case 62168:                     // \'processing-instruction\' \'element\'\n' +
'    case 63570:                     // \'attribute\' \'empty-sequence\'\n' +
'    case 63609:                     // \'element\' \'empty-sequence\'\n' +
'    case 63672:                     // \'namespace\' \'empty-sequence\'\n' +
'    case 63704:                     // \'processing-instruction\' \'empty-sequence\'\n' +
'    case 64082:                     // \'attribute\' \'encoding\'\n' +
'    case 64121:                     // \'element\' \'encoding\'\n' +
'    case 64184:                     // \'namespace\' \'encoding\'\n' +
'    case 64216:                     // \'processing-instruction\' \'encoding\'\n' +
'    case 66130:                     // \'attribute\' \'every\'\n' +
'    case 66169:                     // \'element\' \'every\'\n' +
'    case 66232:                     // \'namespace\' \'every\'\n' +
'    case 66264:                     // \'processing-instruction\' \'every\'\n' +
'    case 67666:                     // \'attribute\' \'exit\'\n' +
'    case 67705:                     // \'element\' \'exit\'\n' +
'    case 67768:                     // \'namespace\' \'exit\'\n' +
'    case 67800:                     // \'processing-instruction\' \'exit\'\n' +
'    case 68178:                     // \'attribute\' \'external\'\n' +
'    case 68217:                     // \'element\' \'external\'\n' +
'    case 68280:                     // \'namespace\' \'external\'\n' +
'    case 68312:                     // \'processing-instruction\' \'external\'\n' +
'    case 68690:                     // \'attribute\' \'first\'\n' +
'    case 68729:                     // \'element\' \'first\'\n' +
'    case 68792:                     // \'namespace\' \'first\'\n' +
'    case 68824:                     // \'processing-instruction\' \'first\'\n' +
'    case 69202:                     // \'attribute\' \'following\'\n' +
'    case 69241:                     // \'element\' \'following\'\n' +
'    case 69304:                     // \'namespace\' \'following\'\n' +
'    case 69336:                     // \'processing-instruction\' \'following\'\n' +
'    case 69714:                     // \'attribute\' \'following-sibling\'\n' +
'    case 69753:                     // \'element\' \'following-sibling\'\n' +
'    case 69816:                     // \'namespace\' \'following-sibling\'\n' +
'    case 69848:                     // \'processing-instruction\' \'following-sibling\'\n' +
'    case 72274:                     // \'attribute\' \'ft-option\'\n' +
'    case 72313:                     // \'element\' \'ft-option\'\n' +
'    case 72376:                     // \'namespace\' \'ft-option\'\n' +
'    case 72408:                     // \'processing-instruction\' \'ft-option\'\n' +
'    case 74322:                     // \'attribute\' \'function\'\n' +
'    case 74361:                     // \'element\' \'function\'\n' +
'    case 74424:                     // \'namespace\' \'function\'\n' +
'    case 74456:                     // \'processing-instruction\' \'function\'\n' +
'    case 77906:                     // \'attribute\' \'if\'\n' +
'    case 77945:                     // \'element\' \'if\'\n' +
'    case 78008:                     // \'namespace\' \'if\'\n' +
'    case 78040:                     // \'processing-instruction\' \'if\'\n' +
'    case 78418:                     // \'attribute\' \'import\'\n' +
'    case 78457:                     // \'element\' \'import\'\n' +
'    case 78520:                     // \'namespace\' \'import\'\n' +
'    case 78552:                     // \'processing-instruction\' \'import\'\n' +
'    case 78930:                     // \'attribute\' \'in\'\n' +
'    case 78969:                     // \'element\' \'in\'\n' +
'    case 79032:                     // \'namespace\' \'in\'\n' +
'    case 79064:                     // \'processing-instruction\' \'in\'\n' +
'    case 79442:                     // \'attribute\' \'index\'\n' +
'    case 79481:                     // \'element\' \'index\'\n' +
'    case 79544:                     // \'namespace\' \'index\'\n' +
'    case 79576:                     // \'processing-instruction\' \'index\'\n' +
'    case 81490:                     // \'attribute\' \'insert\'\n' +
'    case 81529:                     // \'element\' \'insert\'\n' +
'    case 81592:                     // \'namespace\' \'insert\'\n' +
'    case 81624:                     // \'processing-instruction\' \'insert\'\n' +
'    case 82514:                     // \'attribute\' \'integrity\'\n' +
'    case 82553:                     // \'element\' \'integrity\'\n' +
'    case 82616:                     // \'namespace\' \'integrity\'\n' +
'    case 82648:                     // \'processing-instruction\' \'integrity\'\n' +
'    case 84562:                     // \'attribute\' \'item\'\n' +
'    case 84601:                     // \'element\' \'item\'\n' +
'    case 84664:                     // \'namespace\' \'item\'\n' +
'    case 84696:                     // \'processing-instruction\' \'item\'\n' +
'    case 87122:                     // \'attribute\' \'last\'\n' +
'    case 87161:                     // \'element\' \'last\'\n' +
'    case 87224:                     // \'namespace\' \'last\'\n' +
'    case 87256:                     // \'processing-instruction\' \'last\'\n' +
'    case 87634:                     // \'attribute\' \'lax\'\n' +
'    case 87673:                     // \'element\' \'lax\'\n' +
'    case 87736:                     // \'namespace\' \'lax\'\n' +
'    case 87768:                     // \'processing-instruction\' \'lax\'\n' +
'    case 90194:                     // \'attribute\' \'loop\'\n' +
'    case 90233:                     // \'element\' \'loop\'\n' +
'    case 90296:                     // \'namespace\' \'loop\'\n' +
'    case 90328:                     // \'processing-instruction\' \'loop\'\n' +
'    case 93266:                     // \'attribute\' \'module\'\n' +
'    case 93305:                     // \'element\' \'module\'\n' +
'    case 93368:                     // \'namespace\' \'module\'\n' +
'    case 93400:                     // \'processing-instruction\' \'module\'\n' +
'    case 94290:                     // \'attribute\' \'namespace\'\n' +
'    case 94329:                     // \'element\' \'namespace\'\n' +
'    case 94392:                     // \'namespace\' \'namespace\'\n' +
'    case 94424:                     // \'processing-instruction\' \'namespace\'\n' +
'    case 94802:                     // \'attribute\' \'namespace-node\'\n' +
'    case 94841:                     // \'element\' \'namespace-node\'\n' +
'    case 94904:                     // \'namespace\' \'namespace-node\'\n' +
'    case 94936:                     // \'processing-instruction\' \'namespace-node\'\n' +
'    case 97874:                     // \'attribute\' \'node\'\n' +
'    case 97913:                     // \'element\' \'node\'\n' +
'    case 97976:                     // \'namespace\' \'node\'\n' +
'    case 98008:                     // \'processing-instruction\' \'node\'\n' +
'    case 98386:                     // \'attribute\' \'nodes\'\n' +
'    case 98425:                     // \'element\' \'nodes\'\n' +
'    case 98488:                     // \'namespace\' \'nodes\'\n' +
'    case 98520:                     // \'processing-instruction\' \'nodes\'\n' +
'    case 101970:                    // \'attribute\' \'option\'\n' +
'    case 102009:                    // \'element\' \'option\'\n' +
'    case 102072:                    // \'namespace\' \'option\'\n' +
'    case 102104:                    // \'processing-instruction\' \'option\'\n' +
'    case 103506:                    // \'attribute\' \'ordered\'\n' +
'    case 103545:                    // \'element\' \'ordered\'\n' +
'    case 103608:                    // \'namespace\' \'ordered\'\n' +
'    case 103640:                    // \'processing-instruction\' \'ordered\'\n' +
'    case 104018:                    // \'attribute\' \'ordering\'\n' +
'    case 104057:                    // \'element\' \'ordering\'\n' +
'    case 104120:                    // \'namespace\' \'ordering\'\n' +
'    case 104152:                    // \'processing-instruction\' \'ordering\'\n' +
'    case 105554:                    // \'attribute\' \'parent\'\n' +
'    case 105593:                    // \'element\' \'parent\'\n' +
'    case 105656:                    // \'namespace\' \'parent\'\n' +
'    case 105688:                    // \'processing-instruction\' \'parent\'\n' +
'    case 108626:                    // \'attribute\' \'preceding\'\n' +
'    case 108665:                    // \'element\' \'preceding\'\n' +
'    case 108728:                    // \'namespace\' \'preceding\'\n' +
'    case 108760:                    // \'processing-instruction\' \'preceding\'\n' +
'    case 109138:                    // \'attribute\' \'preceding-sibling\'\n' +
'    case 109177:                    // \'element\' \'preceding-sibling\'\n' +
'    case 109240:                    // \'namespace\' \'preceding-sibling\'\n' +
'    case 109272:                    // \'processing-instruction\' \'preceding-sibling\'\n' +
'    case 110674:                    // \'attribute\' \'processing-instruction\'\n' +
'    case 110713:                    // \'element\' \'processing-instruction\'\n' +
'    case 110776:                    // \'namespace\' \'processing-instruction\'\n' +
'    case 110808:                    // \'processing-instruction\' \'processing-instruction\'\n' +
'    case 111698:                    // \'attribute\' \'rename\'\n' +
'    case 111737:                    // \'element\' \'rename\'\n' +
'    case 111800:                    // \'namespace\' \'rename\'\n' +
'    case 111832:                    // \'processing-instruction\' \'rename\'\n' +
'    case 112210:                    // \'attribute\' \'replace\'\n' +
'    case 112249:                    // \'element\' \'replace\'\n' +
'    case 112312:                    // \'namespace\' \'replace\'\n' +
'    case 112344:                    // \'processing-instruction\' \'replace\'\n' +
'    case 113234:                    // \'attribute\' \'returning\'\n' +
'    case 113273:                    // \'element\' \'returning\'\n' +
'    case 113336:                    // \'namespace\' \'returning\'\n' +
'    case 113368:                    // \'processing-instruction\' \'returning\'\n' +
'    case 113746:                    // \'attribute\' \'revalidation\'\n' +
'    case 113785:                    // \'element\' \'revalidation\'\n' +
'    case 113848:                    // \'namespace\' \'revalidation\'\n' +
'    case 113880:                    // \'processing-instruction\' \'revalidation\'\n' +
'    case 115282:                    // \'attribute\' \'schema\'\n' +
'    case 115321:                    // \'element\' \'schema\'\n' +
'    case 115384:                    // \'namespace\' \'schema\'\n' +
'    case 115416:                    // \'processing-instruction\' \'schema\'\n' +
'    case 115794:                    // \'attribute\' \'schema-attribute\'\n' +
'    case 115833:                    // \'element\' \'schema-attribute\'\n' +
'    case 115896:                    // \'namespace\' \'schema-attribute\'\n' +
'    case 115928:                    // \'processing-instruction\' \'schema-attribute\'\n' +
'    case 116306:                    // \'attribute\' \'schema-element\'\n' +
'    case 116345:                    // \'element\' \'schema-element\'\n' +
'    case 116408:                    // \'namespace\' \'schema-element\'\n' +
'    case 116440:                    // \'processing-instruction\' \'schema-element\'\n' +
'    case 116818:                    // \'attribute\' \'score\'\n' +
'    case 116857:                    // \'element\' \'score\'\n' +
'    case 116920:                    // \'namespace\' \'score\'\n' +
'    case 116952:                    // \'processing-instruction\' \'score\'\n' +
'    case 117330:                    // \'attribute\' \'self\'\n' +
'    case 117369:                    // \'element\' \'self\'\n' +
'    case 117432:                    // \'namespace\' \'self\'\n' +
'    case 117464:                    // \'processing-instruction\' \'self\'\n' +
'    case 119890:                    // \'attribute\' \'sliding\'\n' +
'    case 119929:                    // \'element\' \'sliding\'\n' +
'    case 119992:                    // \'namespace\' \'sliding\'\n' +
'    case 120024:                    // \'processing-instruction\' \'sliding\'\n' +
'    case 120402:                    // \'attribute\' \'some\'\n' +
'    case 120441:                    // \'element\' \'some\'\n' +
'    case 120504:                    // \'namespace\' \'some\'\n' +
'    case 120536:                    // \'processing-instruction\' \'some\'\n' +
'    case 122962:                    // \'attribute\' \'strict\'\n' +
'    case 123001:                    // \'element\' \'strict\'\n' +
'    case 123064:                    // \'namespace\' \'strict\'\n' +
'    case 123096:                    // \'processing-instruction\' \'strict\'\n' +
'    case 124498:                    // \'attribute\' \'switch\'\n' +
'    case 124537:                    // \'element\' \'switch\'\n' +
'    case 124600:                    // \'namespace\' \'switch\'\n' +
'    case 124632:                    // \'processing-instruction\' \'switch\'\n' +
'    case 125010:                    // \'attribute\' \'text\'\n' +
'    case 125049:                    // \'element\' \'text\'\n' +
'    case 125112:                    // \'namespace\' \'text\'\n' +
'    case 125144:                    // \'processing-instruction\' \'text\'\n' +
'    case 128082:                    // \'attribute\' \'try\'\n' +
'    case 128121:                    // \'element\' \'try\'\n' +
'    case 128184:                    // \'namespace\' \'try\'\n' +
'    case 128216:                    // \'processing-instruction\' \'try\'\n' +
'    case 128594:                    // \'attribute\' \'tumbling\'\n' +
'    case 128633:                    // \'element\' \'tumbling\'\n' +
'    case 128696:                    // \'namespace\' \'tumbling\'\n' +
'    case 128728:                    // \'processing-instruction\' \'tumbling\'\n' +
'    case 129106:                    // \'attribute\' \'type\'\n' +
'    case 129145:                    // \'element\' \'type\'\n' +
'    case 129208:                    // \'namespace\' \'type\'\n' +
'    case 129240:                    // \'processing-instruction\' \'type\'\n' +
'    case 129618:                    // \'attribute\' \'typeswitch\'\n' +
'    case 129657:                    // \'element\' \'typeswitch\'\n' +
'    case 129720:                    // \'namespace\' \'typeswitch\'\n' +
'    case 129752:                    // \'processing-instruction\' \'typeswitch\'\n' +
'    case 131154:                    // \'attribute\' \'unordered\'\n' +
'    case 131193:                    // \'element\' \'unordered\'\n' +
'    case 131256:                    // \'namespace\' \'unordered\'\n' +
'    case 131288:                    // \'processing-instruction\' \'unordered\'\n' +
'    case 131666:                    // \'attribute\' \'updating\'\n' +
'    case 131705:                    // \'element\' \'updating\'\n' +
'    case 131768:                    // \'namespace\' \'updating\'\n' +
'    case 131800:                    // \'processing-instruction\' \'updating\'\n' +
'    case 133202:                    // \'attribute\' \'validate\'\n' +
'    case 133241:                    // \'element\' \'validate\'\n' +
'    case 133304:                    // \'namespace\' \'validate\'\n' +
'    case 133336:                    // \'processing-instruction\' \'validate\'\n' +
'    case 133714:                    // \'attribute\' \'value\'\n' +
'    case 133753:                    // \'element\' \'value\'\n' +
'    case 133816:                    // \'namespace\' \'value\'\n' +
'    case 133848:                    // \'processing-instruction\' \'value\'\n' +
'    case 134226:                    // \'attribute\' \'variable\'\n' +
'    case 134265:                    // \'element\' \'variable\'\n' +
'    case 134328:                    // \'namespace\' \'variable\'\n' +
'    case 134360:                    // \'processing-instruction\' \'variable\'\n' +
'    case 134738:                    // \'attribute\' \'version\'\n' +
'    case 134777:                    // \'element\' \'version\'\n' +
'    case 134840:                    // \'namespace\' \'version\'\n' +
'    case 134872:                    // \'processing-instruction\' \'version\'\n' +
'    case 136786:                    // \'attribute\' \'while\'\n' +
'    case 136825:                    // \'element\' \'while\'\n' +
'    case 136888:                    // \'namespace\' \'while\'\n' +
'    case 136920:                    // \'processing-instruction\' \'while\'\n' +
'    case 140370:                    // \'attribute\' \'xquery\'\n' +
'    case 140409:                    // \'element\' \'xquery\'\n' +
'    case 140472:                    // \'namespace\' \'xquery\'\n' +
'    case 140504:                    // \'processing-instruction\' \'xquery\'\n' +
'    case 141394:                    // \'attribute\' \'{\'\n' +
'    case 141408:                    // \'comment\' \'{\'\n' +
'    case 141431:                    // \'document\' \'{\'\n' +
'    case 141433:                    // \'element\' \'{\'\n' +
'    case 141496:                    // \'namespace\' \'{\'\n' +
'    case 141514:                    // \'ordered\' \'{\'\n' +
'    case 141528:                    // \'processing-instruction\' \'{\'\n' +
'    case 141556:                    // \'text\' \'{\'\n' +
'    case 141568:                    // \'unordered\' \'{\'\n' +
'      try_PostfixExpr();\n' +
'      break;\n' +
'    case -3:\n' +
'      break;\n' +
'    default:\n' +
'      try_AxisStep();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AxisStep()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AxisStep", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      lookahead2W(240);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 45:                        // \'..\'\n' +
'    case 26185:                     // \'ancestor\' \'::\'\n' +
'    case 26186:                     // \'ancestor-or-self\' \'::\'\n' +
'    case 26318:                     // \'parent\' \'::\'\n' +
'    case 26324:                     // \'preceding\' \'::\'\n' +
'    case 26325:                     // \'preceding-sibling\' \'::\'\n' +
'      parse_ReverseStep();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ForwardStep();\n' +
'    }\n' +
'    lookahead1W(236);               // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' | \'castable\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'    whitespace();\n' +
'    parse_PredicateList();\n' +
'    eventHandler.endNonterminal("AxisStep", e0);\n' +
'  }\n' +
'\n' +
'  function try_AxisStep()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      lookahead2W(240);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 45:                        // \'..\'\n' +
'    case 26185:                     // \'ancestor\' \'::\'\n' +
'    case 26186:                     // \'ancestor-or-self\' \'::\'\n' +
'    case 26318:                     // \'parent\' \'::\'\n' +
'    case 26324:                     // \'preceding\' \'::\'\n' +
'    case 26325:                     // \'preceding-sibling\' \'::\'\n' +
'      try_ReverseStep();\n' +
'      break;\n' +
'    default:\n' +
'      try_ForwardStep();\n' +
'    }\n' +
'    lookahead1W(236);               // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' | \'castable\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'    try_PredicateList();\n' +
'  }\n' +
'\n' +
'  function parse_ForwardStep()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ForwardStep", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      lookahead2W(243);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 229:                       // \'self\'\n' +
'      lookahead2W(240);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 26194:                     // \'attribute\' \'::\'\n' +
'    case 26205:                     // \'child\' \'::\'\n' +
'    case 26223:                     // \'descendant\' \'::\'\n' +
'    case 26224:                     // \'descendant-or-self\' \'::\'\n' +
'    case 26247:                     // \'following\' \'::\'\n' +
'    case 26248:                     // \'following-sibling\' \'::\'\n' +
'    case 26341:                     // \'self\' \'::\'\n' +
'      parse_ForwardAxis();\n' +
'      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NodeTest();\n' +
'      break;\n' +
'    default:\n' +
'      parse_AbbrevForwardStep();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ForwardStep", e0);\n' +
'  }\n' +
'\n' +
'  function try_ForwardStep()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      lookahead2W(243);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 229:                       // \'self\'\n' +
'      lookahead2W(240);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 26194:                     // \'attribute\' \'::\'\n' +
'    case 26205:                     // \'child\' \'::\'\n' +
'    case 26223:                     // \'descendant\' \'::\'\n' +
'    case 26224:                     // \'descendant-or-self\' \'::\'\n' +
'    case 26247:                     // \'following\' \'::\'\n' +
'    case 26248:                     // \'following-sibling\' \'::\'\n' +
'    case 26341:                     // \'self\' \'::\'\n' +
'      try_ForwardAxis();\n' +
'      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_NodeTest();\n' +
'      break;\n' +
'    default:\n' +
'      try_AbbrevForwardStep();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ForwardAxis()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ForwardAxis", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 93:                        // \'child\'\n' +
'      shift(93);                    // \'child\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shift(111);                   // \'descendant\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      shift(82);                    // \'attribute\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shift(229);                   // \'self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shift(112);                   // \'descendant-or-self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shift(136);                   // \'following-sibling\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(135);                   // \'following\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("ForwardAxis", e0);\n' +
'  }\n' +
'\n' +
'  function try_ForwardAxis()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 93:                        // \'child\'\n' +
'      shiftT(93);                   // \'child\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shiftT(111);                  // \'descendant\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      shiftT(82);                   // \'attribute\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shiftT(229);                  // \'self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shiftT(112);                  // \'descendant-or-self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shiftT(136);                  // \'following-sibling\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(135);                  // \'following\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AbbrevForwardStep()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AbbrevForwardStep", e0);\n' +
'    if (l1 == 66)                   // \'@\'\n' +
'    {\n' +
'      shift(66);                    // \'@\'\n' +
'    }\n' +
'    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_NodeTest();\n' +
'    eventHandler.endNonterminal("AbbrevForwardStep", e0);\n' +
'  }\n' +
'\n' +
'  function try_AbbrevForwardStep()\n' +
'  {\n' +
'    if (l1 == 66)                   // \'@\'\n' +
'    {\n' +
'      shiftT(66);                   // \'@\'\n' +
'    }\n' +
'    lookahead1W(259);               // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_NodeTest();\n' +
'  }\n' +
'\n' +
'  function parse_ReverseStep()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ReverseStep", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 45:                        // \'..\'\n' +
'      parse_AbbrevReverseStep();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ReverseAxis();\n' +
'      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_NodeTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ReverseStep", e0);\n' +
'  }\n' +
'\n' +
'  function try_ReverseStep()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 45:                        // \'..\'\n' +
'      try_AbbrevReverseStep();\n' +
'      break;\n' +
'    default:\n' +
'      try_ReverseAxis();\n' +
'      lookahead1W(259);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_NodeTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ReverseAxis()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ReverseAxis", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 206:                       // \'parent\'\n' +
'      shift(206);                   // \'parent\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shift(73);                    // \'ancestor\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shift(213);                   // \'preceding-sibling\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shift(212);                   // \'preceding\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(74);                    // \'ancestor-or-self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shift(51);                    // \'::\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("ReverseAxis", e0);\n' +
'  }\n' +
'\n' +
'  function try_ReverseAxis()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 206:                       // \'parent\'\n' +
'      shiftT(206);                  // \'parent\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shiftT(73);                   // \'ancestor\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shiftT(213);                  // \'preceding-sibling\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shiftT(212);                  // \'preceding\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(74);                   // \'ancestor-or-self\'\n' +
'      lookahead1W(26);              // S^WS | \'(:\' | \'::\'\n' +
'      shiftT(51);                   // \'::\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AbbrevReverseStep()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AbbrevReverseStep", e0);\n' +
'    shift(45);                      // \'..\'\n' +
'    eventHandler.endNonterminal("AbbrevReverseStep", e0);\n' +
'  }\n' +
'\n' +
'  function try_AbbrevReverseStep()\n' +
'  {\n' +
'    shiftT(45);                     // \'..\'\n' +
'  }\n' +
'\n' +
'  function parse_NodeTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NodeTest", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 96:                        // \'comment\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 121:                       // \'element\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(239);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 78:                        // \'array\'\n' +
'    case 167:                       // \'json-item\'\n' +
'    case 194:                       // \'object\'\n' +
'    case 17490:                     // \'attribute\' \'(\'\n' +
'    case 17504:                     // \'comment\' \'(\'\n' +
'    case 17528:                     // \'document-node\' \'(\'\n' +
'    case 17529:                     // \'element\' \'(\'\n' +
'    case 17593:                     // \'namespace-node\' \'(\'\n' +
'    case 17599:                     // \'node\' \'(\'\n' +
'    case 17624:                     // \'processing-instruction\' \'(\'\n' +
'    case 17634:                     // \'schema-attribute\' \'(\'\n' +
'    case 17635:                     // \'schema-element\' \'(\'\n' +
'    case 17652:                     // \'text\' \'(\'\n' +
'      parse_KindTest();\n' +
'      break;\n' +
'    default:\n' +
'      parse_NameTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("NodeTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_NodeTest()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 96:                        // \'comment\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 121:                       // \'element\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(239);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 78:                        // \'array\'\n' +
'    case 167:                       // \'json-item\'\n' +
'    case 194:                       // \'object\'\n' +
'    case 17490:                     // \'attribute\' \'(\'\n' +
'    case 17504:                     // \'comment\' \'(\'\n' +
'    case 17528:                     // \'document-node\' \'(\'\n' +
'    case 17529:                     // \'element\' \'(\'\n' +
'    case 17593:                     // \'namespace-node\' \'(\'\n' +
'    case 17599:                     // \'node\' \'(\'\n' +
'    case 17624:                     // \'processing-instruction\' \'(\'\n' +
'    case 17634:                     // \'schema-attribute\' \'(\'\n' +
'    case 17635:                     // \'schema-element\' \'(\'\n' +
'    case 17652:                     // \'text\' \'(\'\n' +
'      try_KindTest();\n' +
'      break;\n' +
'    default:\n' +
'      try_NameTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_NameTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NameTest", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 5:                         // Wildcard\n' +
'      shift(5);                     // Wildcard\n' +
'      break;\n' +
'    default:\n' +
'      parse_EQName();\n' +
'    }\n' +
'    eventHandler.endNonterminal("NameTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_NameTest()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 5:                         // Wildcard\n' +
'      shiftT(5);                    // Wildcard\n' +
'      break;\n' +
'    default:\n' +
'      try_EQName();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_PostfixExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PostfixExpr", e0);\n' +
'    parse_PrimaryExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(239);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 34                  // \'(\'\n' +
'       && l1 != 68)                 // \'[\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 68:                      // \'[\'\n' +
'        whitespace();\n' +
'        parse_Predicate();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_ArgumentList();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("PostfixExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_PostfixExpr()\n' +
'  {\n' +
'    try_PrimaryExpr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(239);             // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 34                  // \'(\'\n' +
'       && l1 != 68)                 // \'[\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 68:                      // \'[\'\n' +
'        try_Predicate();\n' +
'        break;\n' +
'      default:\n' +
'        try_ArgumentList();\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ArgumentList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ArgumentList", e0);\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'?\' | \'@\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Argument();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_Argument();\n' +
'      }\n' +
'    }\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("ArgumentList", e0);\n' +
'  }\n' +
'\n' +
'  function try_ArgumentList()\n' +
'  {\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'?\' | \'@\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      try_Argument();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        try_Argument();\n' +
'      }\n' +
'    }\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_PredicateList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PredicateList", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(236);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' | \'castable\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 68)                 // \'[\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_Predicate();\n' +
'    }\n' +
'    eventHandler.endNonterminal("PredicateList", e0);\n' +
'  }\n' +
'\n' +
'  function try_PredicateList()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(236);             // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \':\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' | \'after\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'before\' | \'by\' | \'case\' | \'cast\' | \'castable\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      if (l1 != 68)                 // \'[\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_Predicate();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_Predicate()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Predicate", e0);\n' +
'    shift(68);                      // \'[\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(69);                      // \']\'\n' +
'    eventHandler.endNonterminal("Predicate", e0);\n' +
'  }\n' +
'\n' +
'  function try_Predicate()\n' +
'  {\n' +
'    shiftT(68);                     // \'[\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(69);                     // \']\'\n' +
'  }\n' +
'\n' +
'  function parse_Literal()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Literal", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 11:                        // StringLiteral\n' +
'      shift(11);                    // StringLiteral\n' +
'      break;\n' +
'    default:\n' +
'      parse_NumericLiteral();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Literal", e0);\n' +
'  }\n' +
'\n' +
'  function try_Literal()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 11:                        // StringLiteral\n' +
'      shiftT(11);                   // StringLiteral\n' +
'      break;\n' +
'    default:\n' +
'      try_NumericLiteral();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_NumericLiteral()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NumericLiteral", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 8:                         // IntegerLiteral\n' +
'      shift(8);                     // IntegerLiteral\n' +
'      break;\n' +
'    case 9:                         // DecimalLiteral\n' +
'      shift(9);                     // DecimalLiteral\n' +
'      break;\n' +
'    default:\n' +
'      shift(10);                    // DoubleLiteral\n' +
'    }\n' +
'    eventHandler.endNonterminal("NumericLiteral", e0);\n' +
'  }\n' +
'\n' +
'  function try_NumericLiteral()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 8:                         // IntegerLiteral\n' +
'      shiftT(8);                    // IntegerLiteral\n' +
'      break;\n' +
'    case 9:                         // DecimalLiteral\n' +
'      shiftT(9);                    // DecimalLiteral\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(10);                   // DoubleLiteral\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_VarRef()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarRef", e0);\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    eventHandler.endNonterminal("VarRef", e0);\n' +
'  }\n' +
'\n' +
'  function try_VarRef()\n' +
'  {\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'  }\n' +
'\n' +
'  function parse_VarName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarName", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("VarName", e0);\n' +
'  }\n' +
'\n' +
'  function try_VarName()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_ParenthesizedExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ParenthesizedExpr", e0);\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'    }\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("ParenthesizedExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ParenthesizedExpr()\n' +
'  {\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      try_Expr();\n' +
'    }\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_ContextItemExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ContextItemExpr", e0);\n' +
'    shift(44);                      // \'.\'\n' +
'    eventHandler.endNonterminal("ContextItemExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ContextItemExpr()\n' +
'  {\n' +
'    shiftT(44);                     // \'.\'\n' +
'  }\n' +
'\n' +
'  function parse_OrderedExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OrderedExpr", e0);\n' +
'    shift(202);                     // \'ordered\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("OrderedExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_OrderedExpr()\n' +
'  {\n' +
'    shiftT(202);                    // \'ordered\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_UnorderedExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("UnorderedExpr", e0);\n' +
'    shift(256);                     // \'unordered\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("UnorderedExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_UnorderedExpr()\n' +
'  {\n' +
'    shiftT(256);                    // \'unordered\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_FunctionCall()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionCall", e0);\n' +
'    parse_FunctionName();\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_ArgumentList();\n' +
'    eventHandler.endNonterminal("FunctionCall", e0);\n' +
'  }\n' +
'\n' +
'  function try_FunctionCall()\n' +
'  {\n' +
'    try_FunctionName();\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    try_ArgumentList();\n' +
'  }\n' +
'\n' +
'  function parse_Argument()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Argument", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 64:                        // \'?\'\n' +
'      parse_ArgumentPlaceholder();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Argument", e0);\n' +
'  }\n' +
'\n' +
'  function try_Argument()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 64:                        // \'?\'\n' +
'      try_ArgumentPlaceholder();\n' +
'      break;\n' +
'    default:\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ArgumentPlaceholder()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ArgumentPlaceholder", e0);\n' +
'    shift(64);                      // \'?\'\n' +
'    eventHandler.endNonterminal("ArgumentPlaceholder", e0);\n' +
'  }\n' +
'\n' +
'  function try_ArgumentPlaceholder()\n' +
'  {\n' +
'    shiftT(64);                     // \'?\'\n' +
'  }\n' +
'\n' +
'  function parse_Constructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Constructor", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'      parse_DirectConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ComputedConstructor();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Constructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_Constructor()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'      try_DirectConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      try_ComputedConstructor();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirectConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirectConstructor", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'      parse_DirElemConstructor();\n' +
'      break;\n' +
'    case 55:                        // \'<!--\'\n' +
'      parse_DirCommentConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      parse_DirPIConstructor();\n' +
'    }\n' +
'    eventHandler.endNonterminal("DirectConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirectConstructor()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'      try_DirElemConstructor();\n' +
'      break;\n' +
'    case 55:                        // \'<!--\'\n' +
'      try_DirCommentConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      try_DirPIConstructor();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirElemConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirElemConstructor", e0);\n' +
'    shift(54);                      // \'<\'\n' +
'    lookahead1(4);                  // QName\n' +
'    shift(20);                      // QName\n' +
'    parse_DirAttributeList();\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 48:                        // \'/>\'\n' +
'      shift(48);                    // \'/>\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(61);                    // \'>\'\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | \'<\' |\n' +
'                                    // \'<!--\' | \'</\' | \'<?\' | \'{\' | \'{{\' | \'}}\'\n' +
'        if (l1 == 56)               // \'</\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        parse_DirElemContent();\n' +
'      }\n' +
'      shift(56);                    // \'</\'\n' +
'      lookahead1(4);                // QName\n' +
'      shift(20);                    // QName\n' +
'      lookahead1(12);               // S | \'>\'\n' +
'      if (l1 == 21)                 // S\n' +
'      {\n' +
'        shift(21);                  // S\n' +
'      }\n' +
'      lookahead1(8);                // \'>\'\n' +
'      shift(61);                    // \'>\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("DirElemConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirElemConstructor()\n' +
'  {\n' +
'    shiftT(54);                     // \'<\'\n' +
'    lookahead1(4);                  // QName\n' +
'    shiftT(20);                     // QName\n' +
'    try_DirAttributeList();\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 48:                        // \'/>\'\n' +
'      shiftT(48);                   // \'/>\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(61);                   // \'>\'\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | \'<\' |\n' +
'                                    // \'<!--\' | \'</\' | \'<?\' | \'{\' | \'{{\' | \'}}\'\n' +
'        if (l1 == 56)               // \'</\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        try_DirElemContent();\n' +
'      }\n' +
'      shiftT(56);                   // \'</\'\n' +
'      lookahead1(4);                // QName\n' +
'      shiftT(20);                   // QName\n' +
'      lookahead1(12);               // S | \'>\'\n' +
'      if (l1 == 21)                 // S\n' +
'      {\n' +
'        shiftT(21);                 // S\n' +
'      }\n' +
'      lookahead1(8);                // \'>\'\n' +
'      shiftT(61);                   // \'>\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirAttributeList()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirAttributeList", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1(19);               // S | \'/>\' | \'>\'\n' +
'      if (l1 != 21)                 // S\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(21);                    // S\n' +
'      lookahead1(91);               // QName | S | \'/>\' | \'>\'\n' +
'      if (l1 == 20)                 // QName\n' +
'      {\n' +
'        shift(20);                  // QName\n' +
'        lookahead1(11);             // S | \'=\'\n' +
'        if (l1 == 21)               // S\n' +
'        {\n' +
'          shift(21);                // S\n' +
'        }\n' +
'        lookahead1(7);              // \'=\'\n' +
'        shift(60);                  // \'=\'\n' +
'        lookahead1(18);             // S | \'"\' | "\'"\n' +
'        if (l1 == 21)               // S\n' +
'        {\n' +
'          shift(21);                // S\n' +
'        }\n' +
'        parse_DirAttributeValue();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("DirAttributeList", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirAttributeList()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1(19);               // S | \'/>\' | \'>\'\n' +
'      if (l1 != 21)                 // S\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(21);                   // S\n' +
'      lookahead1(91);               // QName | S | \'/>\' | \'>\'\n' +
'      if (l1 == 20)                 // QName\n' +
'      {\n' +
'        shiftT(20);                 // QName\n' +
'        lookahead1(11);             // S | \'=\'\n' +
'        if (l1 == 21)               // S\n' +
'        {\n' +
'          shiftT(21);               // S\n' +
'        }\n' +
'        lookahead1(7);              // \'=\'\n' +
'        shiftT(60);                 // \'=\'\n' +
'        lookahead1(18);             // S | \'"\' | "\'"\n' +
'        if (l1 == 21)               // S\n' +
'        {\n' +
'          shiftT(21);               // S\n' +
'        }\n' +
'        try_DirAttributeValue();\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirAttributeValue()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirAttributeValue", e0);\n' +
'    lookahead1(14);                 // \'"\' | "\'"\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 28:                        // \'"\'\n' +
'      shift(28);                    // \'"\'\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | \'"\' | \'{\' |\n' +
'                                    // \'{{\' | \'}}\'\n' +
'        if (l1 == 28)               // \'"\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 13:                    // EscapeQuot\n' +
'          shift(13);                // EscapeQuot\n' +
'          break;\n' +
'        default:\n' +
'          parse_QuotAttrValueContent();\n' +
'        }\n' +
'      }\n' +
'      shift(28);                    // \'"\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(33);                    // "\'"\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "\'" | \'{\' |\n' +
'                                    // \'{{\' | \'}}\'\n' +
'        if (l1 == 33)               // "\'"\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 14:                    // EscapeApos\n' +
'          shift(14);                // EscapeApos\n' +
'          break;\n' +
'        default:\n' +
'          parse_AposAttrValueContent();\n' +
'        }\n' +
'      }\n' +
'      shift(33);                    // "\'"\n' +
'    }\n' +
'    eventHandler.endNonterminal("DirAttributeValue", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirAttributeValue()\n' +
'  {\n' +
'    lookahead1(14);                 // \'"\' | "\'"\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 28:                        // \'"\'\n' +
'      shiftT(28);                   // \'"\'\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | \'"\' | \'{\' |\n' +
'                                    // \'{{\' | \'}}\'\n' +
'        if (l1 == 28)               // \'"\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 13:                    // EscapeQuot\n' +
'          shiftT(13);               // EscapeQuot\n' +
'          break;\n' +
'        default:\n' +
'          try_QuotAttrValueContent();\n' +
'        }\n' +
'      }\n' +
'      shiftT(28);                   // \'"\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(33);                   // "\'"\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "\'" | \'{\' |\n' +
'                                    // \'{{\' | \'}}\'\n' +
'        if (l1 == 33)               // "\'"\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 14:                    // EscapeApos\n' +
'          shiftT(14);               // EscapeApos\n' +
'          break;\n' +
'        default:\n' +
'          try_AposAttrValueContent();\n' +
'        }\n' +
'      }\n' +
'      shiftT(33);                   // "\'"\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_QuotAttrValueContent()\n' +
'  {\n' +
'    eventHandler.startNonterminal("QuotAttrValueContent", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 16:                        // QuotAttrContentChar\n' +
'      shift(16);                    // QuotAttrContentChar\n' +
'      break;\n' +
'    default:\n' +
'      parse_CommonContent();\n' +
'    }\n' +
'    eventHandler.endNonterminal("QuotAttrValueContent", e0);\n' +
'  }\n' +
'\n' +
'  function try_QuotAttrValueContent()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 16:                        // QuotAttrContentChar\n' +
'      shiftT(16);                   // QuotAttrContentChar\n' +
'      break;\n' +
'    default:\n' +
'      try_CommonContent();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AposAttrValueContent()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AposAttrValueContent", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 17:                        // AposAttrContentChar\n' +
'      shift(17);                    // AposAttrContentChar\n' +
'      break;\n' +
'    default:\n' +
'      parse_CommonContent();\n' +
'    }\n' +
'    eventHandler.endNonterminal("AposAttrValueContent", e0);\n' +
'  }\n' +
'\n' +
'  function try_AposAttrValueContent()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 17:                        // AposAttrContentChar\n' +
'      shiftT(17);                   // AposAttrContentChar\n' +
'      break;\n' +
'    default:\n' +
'      try_CommonContent();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirElemContent()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirElemContent", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'      parse_DirectConstructor();\n' +
'      break;\n' +
'    case 4:                         // CDataSection\n' +
'      shift(4);                     // CDataSection\n' +
'      break;\n' +
'    case 15:                        // ElementContentChar\n' +
'      shift(15);                    // ElementContentChar\n' +
'      break;\n' +
'    default:\n' +
'      parse_CommonContent();\n' +
'    }\n' +
'    eventHandler.endNonterminal("DirElemContent", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirElemContent()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 54:                        // \'<\'\n' +
'    case 55:                        // \'<!--\'\n' +
'    case 59:                        // \'<?\'\n' +
'      try_DirectConstructor();\n' +
'      break;\n' +
'    case 4:                         // CDataSection\n' +
'      shiftT(4);                    // CDataSection\n' +
'      break;\n' +
'    case 15:                        // ElementContentChar\n' +
'      shiftT(15);                   // ElementContentChar\n' +
'      break;\n' +
'    default:\n' +
'      try_CommonContent();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_DirCommentConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirCommentConstructor", e0);\n' +
'    shift(55);                      // \'<!--\'\n' +
'    lookahead1(1);                  // DirCommentContents\n' +
'    shift(2);                       // DirCommentContents\n' +
'    lookahead1(6);                  // \'-->\'\n' +
'    shift(43);                      // \'-->\'\n' +
'    eventHandler.endNonterminal("DirCommentConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirCommentConstructor()\n' +
'  {\n' +
'    shiftT(55);                     // \'<!--\'\n' +
'    lookahead1(1);                  // DirCommentContents\n' +
'    shiftT(2);                      // DirCommentContents\n' +
'    lookahead1(6);                  // \'-->\'\n' +
'    shiftT(43);                     // \'-->\'\n' +
'  }\n' +
'\n' +
'  function parse_DirPIConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DirPIConstructor", e0);\n' +
'    shift(59);                      // \'<?\'\n' +
'    lookahead1(3);                  // PITarget\n' +
'    shift(18);                      // PITarget\n' +
'    lookahead1(13);                 // S | \'?>\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shift(21);                    // S\n' +
'      lookahead1(2);                // DirPIContents\n' +
'      shift(3);                     // DirPIContents\n' +
'    }\n' +
'    lookahead1(9);                  // \'?>\'\n' +
'    shift(65);                      // \'?>\'\n' +
'    eventHandler.endNonterminal("DirPIConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_DirPIConstructor()\n' +
'  {\n' +
'    shiftT(59);                     // \'<?\'\n' +
'    lookahead1(3);                  // PITarget\n' +
'    shiftT(18);                     // PITarget\n' +
'    lookahead1(13);                 // S | \'?>\'\n' +
'    if (l1 == 21)                   // S\n' +
'    {\n' +
'      shiftT(21);                   // S\n' +
'      lookahead1(2);                // DirPIContents\n' +
'      shiftT(3);                    // DirPIContents\n' +
'    }\n' +
'    lookahead1(9);                  // \'?>\'\n' +
'    shiftT(65);                     // \'?>\'\n' +
'  }\n' +
'\n' +
'  function parse_ComputedConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ComputedConstructor", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 119:                       // \'document\'\n' +
'      parse_CompDocConstructor();\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      parse_CompElemConstructor();\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      parse_CompAttrConstructor();\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      parse_CompNamespaceConstructor();\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      parse_CompTextConstructor();\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      parse_CompCommentConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      parse_CompPIConstructor();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ComputedConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_ComputedConstructor()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 119:                       // \'document\'\n' +
'      try_CompDocConstructor();\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      try_CompElemConstructor();\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      try_CompAttrConstructor();\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      try_CompNamespaceConstructor();\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      try_CompTextConstructor();\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      try_CompCommentConstructor();\n' +
'      break;\n' +
'    default:\n' +
'      try_CompPIConstructor();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CompElemConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompElemConstructor", e0);\n' +
'    shift(121);                     // \'element\'\n' +
'    lookahead1W(252);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_EQName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_ContentExpr();\n' +
'    }\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("CompElemConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompElemConstructor()\n' +
'  {\n' +
'    shiftT(121);                    // \'element\'\n' +
'    lookahead1W(252);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_Expr();\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      try_EQName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      try_ContentExpr();\n' +
'    }\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_CompNamespaceConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompNamespaceConstructor", e0);\n' +
'    shift(184);                     // \'namespace\'\n' +
'    lookahead1W(253);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_PrefixExpr();\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_Prefix();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_URIExpr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("CompNamespaceConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompNamespaceConstructor()\n' +
'  {\n' +
'    shiftT(184);                    // \'namespace\'\n' +
'    lookahead1W(253);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_PrefixExpr();\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      try_Prefix();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_URIExpr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_Prefix()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Prefix", e0);\n' +
'    parse_NCName();\n' +
'    eventHandler.endNonterminal("Prefix", e0);\n' +
'  }\n' +
'\n' +
'  function try_Prefix()\n' +
'  {\n' +
'    try_NCName();\n' +
'  }\n' +
'\n' +
'  function parse_PrefixExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PrefixExpr", e0);\n' +
'    parse_Expr();\n' +
'    eventHandler.endNonterminal("PrefixExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_PrefixExpr()\n' +
'  {\n' +
'    try_Expr();\n' +
'  }\n' +
'\n' +
'  function parse_URIExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("URIExpr", e0);\n' +
'    parse_Expr();\n' +
'    eventHandler.endNonterminal("URIExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_URIExpr()\n' +
'  {\n' +
'    try_Expr();\n' +
'  }\n' +
'\n' +
'  function parse_FunctionItemExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionItemExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 145:                       // \'function\'\n' +
'      lookahead2W(92);              // S^WS | \'#\' | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 32:                        // \'%\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'      parse_InlineFunctionExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_NamedFunctionRef();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FunctionItemExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_FunctionItemExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 145:                       // \'function\'\n' +
'      lookahead2W(92);              // S^WS | \'#\' | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 32:                        // \'%\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'      try_InlineFunctionExpr();\n' +
'      break;\n' +
'    default:\n' +
'      try_NamedFunctionRef();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_NamedFunctionRef()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NamedFunctionRef", e0);\n' +
'    parse_EQName();\n' +
'    lookahead1W(20);                // S^WS | \'#\' | \'(:\'\n' +
'    shift(29);                      // \'#\'\n' +
'    lookahead1W(16);                // IntegerLiteral | S^WS | \'(:\'\n' +
'    shift(8);                       // IntegerLiteral\n' +
'    eventHandler.endNonterminal("NamedFunctionRef", e0);\n' +
'  }\n' +
'\n' +
'  function try_NamedFunctionRef()\n' +
'  {\n' +
'    try_EQName();\n' +
'    lookahead1W(20);                // S^WS | \'#\' | \'(:\'\n' +
'    shiftT(29);                     // \'#\'\n' +
'    lookahead1W(16);                // IntegerLiteral | S^WS | \'(:\'\n' +
'    shiftT(8);                      // IntegerLiteral\n' +
'  }\n' +
'\n' +
'  function parse_InlineFunctionExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InlineFunctionExpr", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(97);              // S^WS | \'%\' | \'(:\' | \'function\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_Annotation();\n' +
'    }\n' +
'    shift(145);                     // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(94);                // S^WS | \'$\' | \'(:\' | \')\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_ParamList();\n' +
'    }\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(111);               // S^WS | \'(:\' | \'as\' | \'{\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_FunctionBody();\n' +
'    eventHandler.endNonterminal("InlineFunctionExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_InlineFunctionExpr()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(97);              // S^WS | \'%\' | \'(:\' | \'function\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_Annotation();\n' +
'    }\n' +
'    shiftT(145);                    // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(94);                // S^WS | \'$\' | \'(:\' | \')\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      try_ParamList();\n' +
'    }\n' +
'    shiftT(37);                     // \')\'\n' +
'    lookahead1W(111);               // S^WS | \'(:\' | \'as\' | \'{\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      shiftT(79);                   // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      try_SequenceType();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    try_FunctionBody();\n' +
'  }\n' +
'\n' +
'  function parse_SingleType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SingleType", e0);\n' +
'    parse_SimpleTypeName();\n' +
'    lookahead1W(226);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'before\' | \'case\' | \'castable\' | \'collation\' | \'contains\' |\n' +
'                                    // \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' |\n' +
'                                    // \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' |\n' +
'                                    // \'start\' | \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 64)                   // \'?\'\n' +
'    {\n' +
'      shift(64);                    // \'?\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("SingleType", e0);\n' +
'  }\n' +
'\n' +
'  function try_SingleType()\n' +
'  {\n' +
'    try_SimpleTypeName();\n' +
'    lookahead1W(226);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \';\' | \'<\' | \'<<\' |\n' +
'                                    // \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'before\' | \'case\' | \'castable\' | \'collation\' | \'contains\' |\n' +
'                                    // \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'instance\' | \'intersect\' |\n' +
'                                    // \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'paragraphs\' | \'return\' | \'satisfies\' | \'sentences\' | \'stable\' |\n' +
'                                    // \'start\' | \'times\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'words\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'    if (l1 == 64)                   // \'?\'\n' +
'    {\n' +
'      shiftT(64);                   // \'?\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_TypeDeclaration()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TypeDeclaration", e0);\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    whitespace();\n' +
'    parse_SequenceType();\n' +
'    eventHandler.endNonterminal("TypeDeclaration", e0);\n' +
'  }\n' +
'\n' +
'  function try_TypeDeclaration()\n' +
'  {\n' +
'    shiftT(79);                     // \'as\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    try_SequenceType();\n' +
'  }\n' +
'\n' +
'  function parse_SequenceType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SequenceType", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      lookahead2W(241);             // S^WS | EOF | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' |\n' +
'                                    // \'allowing\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 17532:                     // \'empty-sequence\' \'(\'\n' +
'      shift(124);                   // \'empty-sequence\'\n' +
'      lookahead1W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      shift(34);                    // \'(\'\n' +
'      lookahead1W(23);              // S^WS | \'(:\' | \')\'\n' +
'      shift(37);                    // \')\'\n' +
'      break;\n' +
'    default:\n' +
'      parse_ItemType();\n' +
'      lookahead1W(237);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'collation\' |\n' +
'                                    // \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' |\n' +
'                                    // \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 39:                      // \'*\'\n' +
'      case 40:                      // \'+\'\n' +
'      case 64:                      // \'?\'\n' +
'        whitespace();\n' +
'        parse_OccurrenceIndicator();\n' +
'        break;\n' +
'      default:\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("SequenceType", e0);\n' +
'  }\n' +
'\n' +
'  function try_SequenceType()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      lookahead2W(241);             // S^WS | EOF | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' |\n' +
'                                    // \'allowing\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 17532:                     // \'empty-sequence\' \'(\'\n' +
'      shiftT(124);                  // \'empty-sequence\'\n' +
'      lookahead1W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      shiftT(34);                   // \'(\'\n' +
'      lookahead1W(23);              // S^WS | \'(:\' | \')\'\n' +
'      shiftT(37);                   // \')\'\n' +
'      break;\n' +
'    default:\n' +
'      try_ItemType();\n' +
'      lookahead1W(237);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'collation\' |\n' +
'                                    // \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' | \'empty\' |\n' +
'                                    // \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 39:                      // \'*\'\n' +
'      case 40:                      // \'+\'\n' +
'      case 64:                      // \'?\'\n' +
'        try_OccurrenceIndicator();\n' +
'        break;\n' +
'      default:\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_OccurrenceIndicator()\n' +
'  {\n' +
'    eventHandler.startNonterminal("OccurrenceIndicator", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 64:                        // \'?\'\n' +
'      shift(64);                    // \'?\'\n' +
'      break;\n' +
'    case 39:                        // \'*\'\n' +
'      shift(39);                    // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(40);                    // \'+\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("OccurrenceIndicator", e0);\n' +
'  }\n' +
'\n' +
'  function try_OccurrenceIndicator()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 64:                        // \'?\'\n' +
'      shiftT(64);                   // \'?\'\n' +
'      break;\n' +
'    case 39:                        // \'*\'\n' +
'      shiftT(39);                   // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(40);                   // \'+\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ItemType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ItemType", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 78:                        // \'array\'\n' +
'    case 167:                       // \'json-item\'\n' +
'    case 194:                       // \'object\'\n' +
'      lookahead2W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 96:                        // \'comment\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 121:                       // \'element\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(241);             // S^WS | EOF | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' |\n' +
'                                    // \'allowing\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 17486                 // \'array\' \'(\'\n' +
'     || lk == 17575                 // \'json-item\' \'(\'\n' +
'     || lk == 17602)                // \'object\' \'(\'\n' +
'    {\n' +
'      lk = memoized(4, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_KindTest();\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -6;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(4, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'    case 17490:                     // \'attribute\' \'(\'\n' +
'    case 17504:                     // \'comment\' \'(\'\n' +
'    case 17528:                     // \'document-node\' \'(\'\n' +
'    case 17529:                     // \'element\' \'(\'\n' +
'    case 17593:                     // \'namespace-node\' \'(\'\n' +
'    case 17599:                     // \'node\' \'(\'\n' +
'    case 17624:                     // \'processing-instruction\' \'(\'\n' +
'    case 17634:                     // \'schema-attribute\' \'(\'\n' +
'    case 17635:                     // \'schema-element\' \'(\'\n' +
'    case 17652:                     // \'text\' \'(\'\n' +
'      parse_KindTest();\n' +
'      break;\n' +
'    case 17573:                     // \'item\' \'(\'\n' +
'      shift(165);                   // \'item\'\n' +
'      lookahead1W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      shift(34);                    // \'(\'\n' +
'      lookahead1W(23);              // S^WS | \'(:\' | \')\'\n' +
'      shift(37);                    // \')\'\n' +
'      break;\n' +
'    case 32:                        // \'%\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'      parse_FunctionTest();\n' +
'      break;\n' +
'    case 34:                        // \'(\'\n' +
'      parse_ParenthesizedItemType();\n' +
'      break;\n' +
'    case -6:\n' +
'      parse_JSONTest();\n' +
'      break;\n' +
'    case 242:                       // \'structured-item\'\n' +
'      parse_StructuredItemTest();\n' +
'      break;\n' +
'    default:\n' +
'      parse_AtomicOrUnionType();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ItemType", e0);\n' +
'  }\n' +
'\n' +
'  function try_ItemType()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 78:                        // \'array\'\n' +
'    case 167:                       // \'json-item\'\n' +
'    case 194:                       // \'object\'\n' +
'      lookahead2W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 96:                        // \'comment\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 121:                       // \'element\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(241);             // S^WS | EOF | \'!=\' | \'(\' | \'(:\' | \')\' | \'*\' | \'*\' | \'+\' | \',\' | \'-\' | \':\' | \':=\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'?\' | \']\' | \'after\' |\n' +
'                                    // \'allowing\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' |\n' +
'                                    // \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' | \'div\' | \'else\' |\n' +
'                                    // \'empty\' | \'end\' | \'eq\' | \'except\' | \'external\' | \'for\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'in\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'paragraphs\' | \'return\' |\n' +
'                                    // \'satisfies\' | \'score\' | \'sentences\' | \'stable\' | \'start\' | \'times\' | \'to\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'words\' | \'{\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 17486                 // \'array\' \'(\'\n' +
'     || lk == 17575                 // \'json-item\' \'(\'\n' +
'     || lk == 17602)                // \'object\' \'(\'\n' +
'    {\n' +
'      lk = memoized(4, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_KindTest();\n' +
'          memoize(4, e0A, -1);\n' +
'          lk = -8;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -6;\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(4, e0A, -6);\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'    case 17490:                     // \'attribute\' \'(\'\n' +
'    case 17504:                     // \'comment\' \'(\'\n' +
'    case 17528:                     // \'document-node\' \'(\'\n' +
'    case 17529:                     // \'element\' \'(\'\n' +
'    case 17593:                     // \'namespace-node\' \'(\'\n' +
'    case 17599:                     // \'node\' \'(\'\n' +
'    case 17624:                     // \'processing-instruction\' \'(\'\n' +
'    case 17634:                     // \'schema-attribute\' \'(\'\n' +
'    case 17635:                     // \'schema-element\' \'(\'\n' +
'    case 17652:                     // \'text\' \'(\'\n' +
'      try_KindTest();\n' +
'      break;\n' +
'    case 17573:                     // \'item\' \'(\'\n' +
'      shiftT(165);                  // \'item\'\n' +
'      lookahead1W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      shiftT(34);                   // \'(\'\n' +
'      lookahead1W(23);              // S^WS | \'(:\' | \')\'\n' +
'      shiftT(37);                   // \')\'\n' +
'      break;\n' +
'    case 32:                        // \'%\'\n' +
'    case 17553:                     // \'function\' \'(\'\n' +
'      try_FunctionTest();\n' +
'      break;\n' +
'    case 34:                        // \'(\'\n' +
'      try_ParenthesizedItemType();\n' +
'      break;\n' +
'    case -6:\n' +
'      try_JSONTest();\n' +
'      break;\n' +
'    case 242:                       // \'structured-item\'\n' +
'      try_StructuredItemTest();\n' +
'      break;\n' +
'    case -8:\n' +
'      break;\n' +
'    default:\n' +
'      try_AtomicOrUnionType();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_JSONTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONTest", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 167:                       // \'json-item\'\n' +
'      parse_JSONItemTest();\n' +
'      break;\n' +
'    case 194:                       // \'object\'\n' +
'      parse_JSONObjectTest();\n' +
'      break;\n' +
'    default:\n' +
'      parse_JSONArrayTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("JSONTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONTest()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 167:                       // \'json-item\'\n' +
'      try_JSONItemTest();\n' +
'      break;\n' +
'    case 194:                       // \'object\'\n' +
'      try_JSONObjectTest();\n' +
'      break;\n' +
'    default:\n' +
'      try_JSONArrayTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_StructuredItemTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("StructuredItemTest", e0);\n' +
'    shift(242);                     // \'structured-item\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("StructuredItemTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_StructuredItemTest()\n' +
'  {\n' +
'    shiftT(242);                    // \'structured-item\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_JSONItemTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONItemTest", e0);\n' +
'    shift(167);                     // \'json-item\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("JSONItemTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONItemTest()\n' +
'  {\n' +
'    shiftT(167);                    // \'json-item\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_JSONObjectTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONObjectTest", e0);\n' +
'    shift(194);                     // \'object\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("JSONObjectTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONObjectTest()\n' +
'  {\n' +
'    shiftT(194);                    // \'object\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_JSONArrayTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONArrayTest", e0);\n' +
'    shift(78);                      // \'array\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("JSONArrayTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONArrayTest()\n' +
'  {\n' +
'    shiftT(78);                     // \'array\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_AtomicOrUnionType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AtomicOrUnionType", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("AtomicOrUnionType", e0);\n' +
'  }\n' +
'\n' +
'  function try_AtomicOrUnionType()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_KindTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("KindTest", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 120:                       // \'document-node\'\n' +
'      parse_DocumentTest();\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      parse_ElementTest();\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      parse_AttributeTest();\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      parse_SchemaElementTest();\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      parse_SchemaAttributeTest();\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      parse_PITest();\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      parse_CommentTest();\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      parse_TextTest();\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      parse_NamespaceNodeTest();\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      parse_AnyKindTest();\n' +
'      break;\n' +
'    default:\n' +
'      parse_JSONTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("KindTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_KindTest()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 120:                       // \'document-node\'\n' +
'      try_DocumentTest();\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      try_ElementTest();\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      try_AttributeTest();\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      try_SchemaElementTest();\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      try_SchemaAttributeTest();\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      try_PITest();\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      try_CommentTest();\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      try_TextTest();\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      try_NamespaceNodeTest();\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      try_AnyKindTest();\n' +
'      break;\n' +
'    default:\n' +
'      try_JSONTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AnyKindTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AnyKindTest", e0);\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("AnyKindTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_AnyKindTest()\n' +
'  {\n' +
'    shiftT(191);                    // \'node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_DocumentTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DocumentTest", e0);\n' +
'    shift(120);                     // \'document-node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(144);               // S^WS | \'(:\' | \')\' | \'element\' | \'schema-element\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 121:                     // \'element\'\n' +
'        whitespace();\n' +
'        parse_ElementTest();\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_SchemaElementTest();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("DocumentTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_DocumentTest()\n' +
'  {\n' +
'    shiftT(120);                    // \'document-node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(144);               // S^WS | \'(:\' | \')\' | \'element\' | \'schema-element\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 121:                     // \'element\'\n' +
'        try_ElementTest();\n' +
'        break;\n' +
'      default:\n' +
'        try_SchemaElementTest();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_TextTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TextTest", e0);\n' +
'    shift(244);                     // \'text\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("TextTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_TextTest()\n' +
'  {\n' +
'    shiftT(244);                    // \'text\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_CommentTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CommentTest", e0);\n' +
'    shift(96);                      // \'comment\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("CommentTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_CommentTest()\n' +
'  {\n' +
'    shiftT(96);                     // \'comment\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_NamespaceNodeTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NamespaceNodeTest", e0);\n' +
'    shift(185);                     // \'namespace-node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("NamespaceNodeTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_NamespaceNodeTest()\n' +
'  {\n' +
'    shiftT(185);                    // \'namespace-node\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_PITest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PITest", e0);\n' +
'    shift(216);                     // \'processing-instruction\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | \'(:\' | \')\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 11:                      // StringLiteral\n' +
'        shift(11);                  // StringLiteral\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_NCName();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("PITest", e0);\n' +
'  }\n' +
'\n' +
'  function try_PITest()\n' +
'  {\n' +
'    shiftT(216);                    // \'processing-instruction\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | \'(:\' | \')\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 11:                      // StringLiteral\n' +
'        shiftT(11);                 // StringLiteral\n' +
'        break;\n' +
'      default:\n' +
'        try_NCName();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_AttributeTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AttributeTest", e0);\n' +
'    shift(82);                      // \'attribute\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(255);               // EQName^Token | S^WS | \'(:\' | \')\' | \'*\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_AttribNameOrWildcard();\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 == 41)                 // \',\'\n' +
'      {\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        whitespace();\n' +
'        parse_TypeName();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("AttributeTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_AttributeTest()\n' +
'  {\n' +
'    shiftT(82);                     // \'attribute\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(255);               // EQName^Token | S^WS | \'(:\' | \')\' | \'*\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      try_AttribNameOrWildcard();\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 == 41)                 // \',\'\n' +
'      {\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        try_TypeName();\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_AttribNameOrWildcard()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AttribNameOrWildcard", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 38:                        // \'*\'\n' +
'      shift(38);                    // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      parse_AttributeName();\n' +
'    }\n' +
'    eventHandler.endNonterminal("AttribNameOrWildcard", e0);\n' +
'  }\n' +
'\n' +
'  function try_AttribNameOrWildcard()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 38:                        // \'*\'\n' +
'      shiftT(38);                   // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      try_AttributeName();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_SchemaAttributeTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SchemaAttributeTest", e0);\n' +
'    shift(226);                     // \'schema-attribute\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_AttributeDeclaration();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("SchemaAttributeTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_SchemaAttributeTest()\n' +
'  {\n' +
'    shiftT(226);                    // \'schema-attribute\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_AttributeDeclaration();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_AttributeDeclaration()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AttributeDeclaration", e0);\n' +
'    parse_AttributeName();\n' +
'    eventHandler.endNonterminal("AttributeDeclaration", e0);\n' +
'  }\n' +
'\n' +
'  function try_AttributeDeclaration()\n' +
'  {\n' +
'    try_AttributeName();\n' +
'  }\n' +
'\n' +
'  function parse_ElementTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ElementTest", e0);\n' +
'    shift(121);                     // \'element\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(255);               // EQName^Token | S^WS | \'(:\' | \')\' | \'*\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_ElementNameOrWildcard();\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 == 41)                 // \',\'\n' +
'      {\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        whitespace();\n' +
'        parse_TypeName();\n' +
'        lookahead1W(102);           // S^WS | \'(:\' | \')\' | \'?\'\n' +
'        if (l1 == 64)               // \'?\'\n' +
'        {\n' +
'          shift(64);                // \'?\'\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("ElementTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_ElementTest()\n' +
'  {\n' +
'    shiftT(121);                    // \'element\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(255);               // EQName^Token | S^WS | \'(:\' | \')\' | \'*\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      try_ElementNameOrWildcard();\n' +
'      lookahead1W(101);             // S^WS | \'(:\' | \')\' | \',\'\n' +
'      if (l1 == 41)                 // \',\'\n' +
'      {\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        try_TypeName();\n' +
'        lookahead1W(102);           // S^WS | \'(:\' | \')\' | \'?\'\n' +
'        if (l1 == 64)               // \'?\'\n' +
'        {\n' +
'          shiftT(64);               // \'?\'\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_ElementNameOrWildcard()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ElementNameOrWildcard", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 38:                        // \'*\'\n' +
'      shift(38);                    // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      parse_ElementName();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ElementNameOrWildcard", e0);\n' +
'  }\n' +
'\n' +
'  function try_ElementNameOrWildcard()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 38:                        // \'*\'\n' +
'      shiftT(38);                   // \'*\'\n' +
'      break;\n' +
'    default:\n' +
'      try_ElementName();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_SchemaElementTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SchemaElementTest", e0);\n' +
'    shift(227);                     // \'schema-element\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_ElementDeclaration();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("SchemaElementTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_SchemaElementTest()\n' +
'  {\n' +
'    shiftT(227);                    // \'schema-element\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_ElementDeclaration();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_ElementDeclaration()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ElementDeclaration", e0);\n' +
'    parse_ElementName();\n' +
'    eventHandler.endNonterminal("ElementDeclaration", e0);\n' +
'  }\n' +
'\n' +
'  function try_ElementDeclaration()\n' +
'  {\n' +
'    try_ElementName();\n' +
'  }\n' +
'\n' +
'  function parse_AttributeName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AttributeName", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("AttributeName", e0);\n' +
'  }\n' +
'\n' +
'  function try_AttributeName()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_ElementName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ElementName", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("ElementName", e0);\n' +
'  }\n' +
'\n' +
'  function try_ElementName()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_SimpleTypeName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SimpleTypeName", e0);\n' +
'    parse_TypeName();\n' +
'    eventHandler.endNonterminal("SimpleTypeName", e0);\n' +
'  }\n' +
'\n' +
'  function try_SimpleTypeName()\n' +
'  {\n' +
'    try_TypeName();\n' +
'  }\n' +
'\n' +
'  function parse_TypeName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TypeName", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("TypeName", e0);\n' +
'  }\n' +
'\n' +
'  function try_TypeName()\n' +
'  {\n' +
'    try_EQName();\n' +
'  }\n' +
'\n' +
'  function parse_FunctionTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionTest", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(97);              // S^WS | \'%\' | \'(:\' | \'function\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_Annotation();\n' +
'    }\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 145:                       // \'function\'\n' +
'      lookahead2W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    lk = memoized(5, e0);\n' +
'    if (lk == 0)\n' +
'    {\n' +
'      var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'      var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'      var b2A = b2; var e2A = e2;\n' +
'      try\n' +
'      {\n' +
'        try_AnyFunctionTest();\n' +
'        lk = -1;\n' +
'      }\n' +
'      catch (p1A)\n' +
'      {\n' +
'        lk = -2;\n' +
'      }\n' +
'      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'      b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'      memoize(5, e0, lk);\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      whitespace();\n' +
'      parse_AnyFunctionTest();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_TypedFunctionTest();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FunctionTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_FunctionTest()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(97);              // S^WS | \'%\' | \'(:\' | \'function\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_Annotation();\n' +
'    }\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 145:                       // \'function\'\n' +
'      lookahead2W(22);              // S^WS | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    lk = memoized(5, e0);\n' +
'    if (lk == 0)\n' +
'    {\n' +
'      var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'      var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'      var b2A = b2; var e2A = e2;\n' +
'      try\n' +
'      {\n' +
'        try_AnyFunctionTest();\n' +
'        memoize(5, e0A, -1);\n' +
'        lk = -3;\n' +
'      }\n' +
'      catch (p1A)\n' +
'      {\n' +
'        lk = -2;\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(5, e0A, -2);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      try_AnyFunctionTest();\n' +
'      break;\n' +
'    case -3:\n' +
'      break;\n' +
'    default:\n' +
'      try_TypedFunctionTest();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_AnyFunctionTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AnyFunctionTest", e0);\n' +
'    shift(145);                     // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(24);                // S^WS | \'(:\' | \'*\'\n' +
'    shift(38);                      // \'*\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("AnyFunctionTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_AnyFunctionTest()\n' +
'  {\n' +
'    shiftT(145);                    // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(24);                // S^WS | \'(:\' | \'*\'\n' +
'    shiftT(38);                     // \'*\'\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_TypedFunctionTest()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TypedFunctionTest", e0);\n' +
'    shift(145);                     // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(262);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \')\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(260);           // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'        whitespace();\n' +
'        parse_SequenceType();\n' +
'      }\n' +
'    }\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(30);                // S^WS | \'(:\' | \'as\'\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    whitespace();\n' +
'    parse_SequenceType();\n' +
'    eventHandler.endNonterminal("TypedFunctionTest", e0);\n' +
'  }\n' +
'\n' +
'  function try_TypedFunctionTest()\n' +
'  {\n' +
'    shiftT(145);                    // \'function\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(262);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \')\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 != 37)                   // \')\'\n' +
'    {\n' +
'      try_SequenceType();\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(260);           // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'        try_SequenceType();\n' +
'      }\n' +
'    }\n' +
'    shiftT(37);                     // \')\'\n' +
'    lookahead1W(30);                // S^WS | \'(:\' | \'as\'\n' +
'    shiftT(79);                     // \'as\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    try_SequenceType();\n' +
'  }\n' +
'\n' +
'  function parse_ParenthesizedItemType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ParenthesizedItemType", e0);\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    whitespace();\n' +
'    parse_ItemType();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shift(37);                      // \')\'\n' +
'    eventHandler.endNonterminal("ParenthesizedItemType", e0);\n' +
'  }\n' +
'\n' +
'  function try_ParenthesizedItemType()\n' +
'  {\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    try_ItemType();\n' +
'    lookahead1W(23);                // S^WS | \'(:\' | \')\'\n' +
'    shiftT(37);                     // \')\'\n' +
'  }\n' +
'\n' +
'  function parse_RevalidationDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("RevalidationDecl", e0);\n' +
'    shift(108);                     // \'declare\'\n' +
'    lookahead1W(72);                // S^WS | \'(:\' | \'revalidation\'\n' +
'    shift(222);                     // \'revalidation\'\n' +
'    lookahead1W(152);               // S^WS | \'(:\' | \'lax\' | \'skip\' | \'strict\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 240:                       // \'strict\'\n' +
'      shift(240);                   // \'strict\'\n' +
'      break;\n' +
'    case 171:                       // \'lax\'\n' +
'      shift(171);                   // \'lax\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(233);                   // \'skip\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("RevalidationDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_InsertExprTargetChoice()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InsertExprTargetChoice", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 70:                        // \'after\'\n' +
'      shift(70);                    // \'after\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shift(84);                    // \'before\'\n' +
'      break;\n' +
'    default:\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        shift(79);                  // \'as\'\n' +
'        lookahead1W(119);           // S^WS | \'(:\' | \'first\' | \'last\'\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 134:                   // \'first\'\n' +
'          shift(134);               // \'first\'\n' +
'          break;\n' +
'        default:\n' +
'          shift(170);               // \'last\'\n' +
'        }\n' +
'      }\n' +
'      lookahead1W(54);              // S^WS | \'(:\' | \'into\'\n' +
'      shift(163);                   // \'into\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("InsertExprTargetChoice", e0);\n' +
'  }\n' +
'\n' +
'  function try_InsertExprTargetChoice()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 70:                        // \'after\'\n' +
'      shiftT(70);                   // \'after\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shiftT(84);                   // \'before\'\n' +
'      break;\n' +
'    default:\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        shiftT(79);                 // \'as\'\n' +
'        lookahead1W(119);           // S^WS | \'(:\' | \'first\' | \'last\'\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 134:                   // \'first\'\n' +
'          shiftT(134);              // \'first\'\n' +
'          break;\n' +
'        default:\n' +
'          shiftT(170);              // \'last\'\n' +
'        }\n' +
'      }\n' +
'      lookahead1W(54);              // S^WS | \'(:\' | \'into\'\n' +
'      shiftT(163);                  // \'into\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_InsertExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("InsertExpr", e0);\n' +
'    shift(159);                     // \'insert\'\n' +
'    lookahead1W(129);               // S^WS | \'(:\' | \'node\' | \'nodes\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 191:                       // \'node\'\n' +
'      shift(191);                   // \'node\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(192);                   // \'nodes\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_SourceExpr();\n' +
'    whitespace();\n' +
'    parse_InsertExprTargetChoice();\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_TargetExpr();\n' +
'    eventHandler.endNonterminal("InsertExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_InsertExpr()\n' +
'  {\n' +
'    shiftT(159);                    // \'insert\'\n' +
'    lookahead1W(129);               // S^WS | \'(:\' | \'node\' | \'nodes\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 191:                       // \'node\'\n' +
'      shiftT(191);                  // \'node\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(192);                  // \'nodes\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_SourceExpr();\n' +
'    try_InsertExprTargetChoice();\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_TargetExpr();\n' +
'  }\n' +
'\n' +
'  function parse_DeleteExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("DeleteExpr", e0);\n' +
'    shift(110);                     // \'delete\'\n' +
'    lookahead1W(129);               // S^WS | \'(:\' | \'node\' | \'nodes\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 191:                       // \'node\'\n' +
'      shift(191);                   // \'node\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(192);                   // \'nodes\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_TargetExpr();\n' +
'    eventHandler.endNonterminal("DeleteExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_DeleteExpr()\n' +
'  {\n' +
'    shiftT(110);                    // \'delete\'\n' +
'    lookahead1W(129);               // S^WS | \'(:\' | \'node\' | \'nodes\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 191:                       // \'node\'\n' +
'      shiftT(191);                  // \'node\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(192);                  // \'nodes\'\n' +
'    }\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_TargetExpr();\n' +
'  }\n' +
'\n' +
'  function parse_ReplaceExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ReplaceExpr", e0);\n' +
'    shift(219);                     // \'replace\'\n' +
'    lookahead1W(130);               // S^WS | \'(:\' | \'node\' | \'value\'\n' +
'    if (l1 == 261)                  // \'value\'\n' +
'    {\n' +
'      shift(261);                   // \'value\'\n' +
'      lookahead1W(64);              // S^WS | \'(:\' | \'of\'\n' +
'      shift(196);                   // \'of\'\n' +
'    }\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_TargetExpr();\n' +
'    shift(270);                     // \'with\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("ReplaceExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ReplaceExpr()\n' +
'  {\n' +
'    shiftT(219);                    // \'replace\'\n' +
'    lookahead1W(130);               // S^WS | \'(:\' | \'node\' | \'value\'\n' +
'    if (l1 == 261)                  // \'value\'\n' +
'    {\n' +
'      shiftT(261);                  // \'value\'\n' +
'      lookahead1W(64);              // S^WS | \'(:\' | \'of\'\n' +
'      shiftT(196);                  // \'of\'\n' +
'    }\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shiftT(191);                    // \'node\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_TargetExpr();\n' +
'    shiftT(270);                    // \'with\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_RenameExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("RenameExpr", e0);\n' +
'    shift(218);                     // \'rename\'\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_TargetExpr();\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_NewNameExpr();\n' +
'    eventHandler.endNonterminal("RenameExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_RenameExpr()\n' +
'  {\n' +
'    shiftT(218);                    // \'rename\'\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shiftT(191);                    // \'node\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_TargetExpr();\n' +
'    shiftT(79);                     // \'as\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_NewNameExpr();\n' +
'  }\n' +
'\n' +
'  function parse_SourceExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SourceExpr", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("SourceExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_SourceExpr()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_TargetExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TargetExpr", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("TargetExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TargetExpr()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_NewNameExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NewNameExpr", e0);\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("NewNameExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_NewNameExpr()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_TransformExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TransformExpr", e0);\n' +
'    shift(103);                     // \'copy\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shift(52);                      // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(27);              // S^WS | \'(:\' | \':=\'\n' +
'      shift(52);                    // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    shift(181);                     // \'modify\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("TransformExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_TransformExpr()\n' +
'  {\n' +
'    shiftT(103);                    // \'copy\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shiftT(52);                     // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(27);              // S^WS | \'(:\' | \':=\'\n' +
'      shiftT(52);                   // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'    shiftT(181);                    // \'modify\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_FTSelection()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTSelection", e0);\n' +
'    parse_FTOr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(211);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' |\n' +
'                                    // \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' | \'same\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 81:                      // \'at\'\n' +
'        lookahead2W(151);           // S^WS | \'(:\' | \'end\' | \'position\' | \'start\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 115                 // \'different\'\n' +
'       && lk != 117                 // \'distance\'\n' +
'       && lk != 127                 // \'entire\'\n' +
'       && lk != 202                 // \'ordered\'\n' +
'       && lk != 223                 // \'same\'\n' +
'       && lk != 269                 // \'window\'\n' +
'       && lk != 64593               // \'at\' \'end\'\n' +
'       && lk != 121425)             // \'at\' \'start\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_FTPosFilter();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTSelection", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTSelection()\n' +
'  {\n' +
'    try_FTOr();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(211);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' |\n' +
'                                    // \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' | \'same\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 81:                      // \'at\'\n' +
'        lookahead2W(151);           // S^WS | \'(:\' | \'end\' | \'position\' | \'start\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 115                 // \'different\'\n' +
'       && lk != 117                 // \'distance\'\n' +
'       && lk != 127                 // \'entire\'\n' +
'       && lk != 202                 // \'ordered\'\n' +
'       && lk != 223                 // \'same\'\n' +
'       && lk != 269                 // \'window\'\n' +
'       && lk != 64593               // \'at\' \'end\'\n' +
'       && lk != 121425)             // \'at\' \'start\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_FTPosFilter();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTWeight()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTWeight", e0);\n' +
'    shift(264);                     // \'weight\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("FTWeight", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTWeight()\n' +
'  {\n' +
'    shiftT(264);                    // \'weight\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_FTOr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTOr", e0);\n' +
'    parse_FTAnd();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 144)                // \'ftor\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(144);                   // \'ftor\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      whitespace();\n' +
'      parse_FTAnd();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTOr", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTOr()\n' +
'  {\n' +
'    try_FTAnd();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 144)                // \'ftor\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(144);                  // \'ftor\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      try_FTAnd();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTAnd()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTAnd", e0);\n' +
'    parse_FTMildNot();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 142)                // \'ftand\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(142);                   // \'ftand\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      whitespace();\n' +
'      parse_FTMildNot();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTAnd", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTAnd()\n' +
'  {\n' +
'    try_FTMildNot();\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 142)                // \'ftand\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(142);                  // \'ftand\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      try_FTMildNot();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTMildNot()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTMildNot", e0);\n' +
'    parse_FTUnaryNot();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(212);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'where\' | \'window\' | \'with\' |\n' +
'                                    // \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 != 193)                // \'not\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(193);                   // \'not\'\n' +
'      lookahead1W(53);              // S^WS | \'(:\' | \'in\'\n' +
'      shift(154);                   // \'in\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      whitespace();\n' +
'      parse_FTUnaryNot();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTMildNot", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTMildNot()\n' +
'  {\n' +
'    try_FTUnaryNot();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(212);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'where\' | \'window\' | \'with\' |\n' +
'                                    // \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 != 193)                // \'not\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(193);                  // \'not\'\n' +
'      lookahead1W(53);              // S^WS | \'(:\' | \'in\'\n' +
'      shiftT(154);                  // \'in\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      try_FTUnaryNot();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTUnaryNot()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTUnaryNot", e0);\n' +
'    if (l1 == 143)                  // \'ftnot\'\n' +
'    {\n' +
'      shift(143);                   // \'ftnot\'\n' +
'    }\n' +
'    lookahead1W(155);               // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_FTPrimaryWithOptions();\n' +
'    eventHandler.endNonterminal("FTUnaryNot", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTUnaryNot()\n' +
'  {\n' +
'    if (l1 == 143)                  // \'ftnot\'\n' +
'    {\n' +
'      shiftT(143);                  // \'ftnot\'\n' +
'    }\n' +
'    lookahead1W(155);               // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'{\'\n' +
'    try_FTPrimaryWithOptions();\n' +
'  }\n' +
'\n' +
'  function parse_FTPrimaryWithOptions()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);\n' +
'    parse_FTPrimary();\n' +
'    lookahead1W(214);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' | \'where\' |\n' +
'                                    // \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    if (l1 == 259)                  // \'using\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTMatchOptions();\n' +
'    }\n' +
'    if (l1 == 264)                  // \'weight\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTWeight();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTPrimaryWithOptions()\n' +
'  {\n' +
'    try_FTPrimary();\n' +
'    lookahead1W(214);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' | \'where\' |\n' +
'                                    // \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    if (l1 == 259)                  // \'using\'\n' +
'    {\n' +
'      try_FTMatchOptions();\n' +
'    }\n' +
'    if (l1 == 264)                  // \'weight\'\n' +
'    {\n' +
'      try_FTWeight();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTPrimary()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTPrimary", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 34:                        // \'(\'\n' +
'      shift(34);                    // \'(\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      whitespace();\n' +
'      parse_FTSelection();\n' +
'      shift(37);                    // \')\'\n' +
'      break;\n' +
'    case 35:                        // \'(#\'\n' +
'      parse_FTExtensionSelection();\n' +
'      break;\n' +
'    default:\n' +
'      parse_FTWords();\n' +
'      lookahead1W(215);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 == 195)                // \'occurs\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_FTTimes();\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTPrimary", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTPrimary()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 34:                        // \'(\'\n' +
'      shiftT(34);                   // \'(\'\n' +
'      lookahead1W(162);             // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\'\n' +
'      try_FTSelection();\n' +
'      shiftT(37);                   // \')\'\n' +
'      break;\n' +
'    case 35:                        // \'(#\'\n' +
'      try_FTExtensionSelection();\n' +
'      break;\n' +
'    default:\n' +
'      try_FTWords();\n' +
'      lookahead1W(215);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 == 195)                // \'occurs\'\n' +
'      {\n' +
'        try_FTTimes();\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTWords()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTWords", e0);\n' +
'    parse_FTWordsValue();\n' +
'    lookahead1W(221);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'all\' | \'and\' | \'any\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'phrase\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' |\n' +
'                                    // \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    if (l1 == 71                    // \'all\'\n' +
'     || l1 == 76                    // \'any\'\n' +
'     || l1 == 210)                  // \'phrase\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTAnyallOption();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTWords", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTWords()\n' +
'  {\n' +
'    try_FTWordsValue();\n' +
'    lookahead1W(221);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'all\' | \'and\' | \'any\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'phrase\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' |\n' +
'                                    // \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    if (l1 == 71                    // \'all\'\n' +
'     || l1 == 76                    // \'any\'\n' +
'     || l1 == 210)                  // \'phrase\'\n' +
'    {\n' +
'      try_FTAnyallOption();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTWordsValue()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTWordsValue", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 11:                        // StringLiteral\n' +
'      shift(11);                    // StringLiteral\n' +
'      break;\n' +
'    default:\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'      shift(282);                   // \'}\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTWordsValue", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTWordsValue()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 11:                        // StringLiteral\n' +
'      shiftT(11);                   // StringLiteral\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_Expr();\n' +
'      shiftT(282);                  // \'}\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTExtensionSelection()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTExtensionSelection", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Pragma();\n' +
'      lookahead1W(100);             // S^WS | \'(#\' | \'(:\' | \'{\'\n' +
'      if (l1 != 35)                 // \'(#\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(166);               // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTSelection();\n' +
'    }\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("FTExtensionSelection", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTExtensionSelection()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      try_Pragma();\n' +
'      lookahead1W(100);             // S^WS | \'(#\' | \'(:\' | \'{\'\n' +
'      if (l1 != 35)                 // \'(#\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(166);               // StringLiteral | S^WS | \'(\' | \'(#\' | \'(:\' | \'ftnot\' | \'{\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      try_FTSelection();\n' +
'    }\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_FTAnyallOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTAnyallOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 76:                        // \'any\'\n' +
'      shift(76);                    // \'any\'\n' +
'      lookahead1W(218);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'word\' | \'|}\' | \'}\'\n' +
'      if (l1 == 272)                // \'word\'\n' +
'      {\n' +
'        shift(272);                 // \'word\'\n' +
'      }\n' +
'      break;\n' +
'    case 71:                        // \'all\'\n' +
'      shift(71);                    // \'all\'\n' +
'      lookahead1W(219);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'words\' | \'|}\' | \'}\'\n' +
'      if (l1 == 273)                // \'words\'\n' +
'      {\n' +
'        shift(273);                 // \'words\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(210);                   // \'phrase\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTAnyallOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTAnyallOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 76:                        // \'any\'\n' +
'      shiftT(76);                   // \'any\'\n' +
'      lookahead1W(218);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'word\' | \'|}\' | \'}\'\n' +
'      if (l1 == 272)                // \'word\'\n' +
'      {\n' +
'        shiftT(272);                // \'word\'\n' +
'      }\n' +
'      break;\n' +
'    case 71:                        // \'all\'\n' +
'      shiftT(71);                   // \'all\'\n' +
'      lookahead1W(219);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'occurs\' | \'only\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' |\n' +
'                                    // \'where\' | \'window\' | \'with\' | \'without\' | \'words\' | \'|}\' | \'}\'\n' +
'      if (l1 == 273)                // \'words\'\n' +
'      {\n' +
'        shiftT(273);                // \'words\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(210);                  // \'phrase\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTTimes()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTTimes", e0);\n' +
'    shift(195);                     // \'occurs\'\n' +
'    lookahead1W(149);               // S^WS | \'(:\' | \'at\' | \'exactly\' | \'from\'\n' +
'    whitespace();\n' +
'    parse_FTRange();\n' +
'    shift(247);                     // \'times\'\n' +
'    eventHandler.endNonterminal("FTTimes", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTTimes()\n' +
'  {\n' +
'    shiftT(195);                    // \'occurs\'\n' +
'    lookahead1W(149);               // S^WS | \'(:\' | \'at\' | \'exactly\' | \'from\'\n' +
'    try_FTRange();\n' +
'    shiftT(247);                    // \'times\'\n' +
'  }\n' +
'\n' +
'  function parse_FTRange()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTRange", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 130:                       // \'exactly\'\n' +
'      shift(130);                   // \'exactly\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_AdditiveExpr();\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(125);             // S^WS | \'(:\' | \'least\' | \'most\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 173:                     // \'least\'\n' +
'        shift(173);                 // \'least\'\n' +
'        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_AdditiveExpr();\n' +
'        break;\n' +
'      default:\n' +
'        shift(183);                 // \'most\'\n' +
'        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_AdditiveExpr();\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(140);                   // \'from\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_AdditiveExpr();\n' +
'      shift(248);                   // \'to\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_AdditiveExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTRange", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTRange()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 130:                       // \'exactly\'\n' +
'      shiftT(130);                  // \'exactly\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_AdditiveExpr();\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      lookahead1W(125);             // S^WS | \'(:\' | \'least\' | \'most\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 173:                     // \'least\'\n' +
'        shiftT(173);                // \'least\'\n' +
'        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        try_AdditiveExpr();\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(183);                // \'most\'\n' +
'        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        try_AdditiveExpr();\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(140);                  // \'from\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_AdditiveExpr();\n' +
'      shiftT(248);                  // \'to\'\n' +
'      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_AdditiveExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTPosFilter()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTPosFilter", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 202:                       // \'ordered\'\n' +
'      parse_FTOrder();\n' +
'      break;\n' +
'    case 269:                       // \'window\'\n' +
'      parse_FTWindow();\n' +
'      break;\n' +
'    case 117:                       // \'distance\'\n' +
'      parse_FTDistance();\n' +
'      break;\n' +
'    case 115:                       // \'different\'\n' +
'    case 223:                       // \'same\'\n' +
'      parse_FTScope();\n' +
'      break;\n' +
'    default:\n' +
'      parse_FTContent();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTPosFilter", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTPosFilter()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 202:                       // \'ordered\'\n' +
'      try_FTOrder();\n' +
'      break;\n' +
'    case 269:                       // \'window\'\n' +
'      try_FTWindow();\n' +
'      break;\n' +
'    case 117:                       // \'distance\'\n' +
'      try_FTDistance();\n' +
'      break;\n' +
'    case 115:                       // \'different\'\n' +
'    case 223:                       // \'same\'\n' +
'      try_FTScope();\n' +
'      break;\n' +
'    default:\n' +
'      try_FTContent();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTOrder()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTOrder", e0);\n' +
'    shift(202);                     // \'ordered\'\n' +
'    eventHandler.endNonterminal("FTOrder", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTOrder()\n' +
'  {\n' +
'    shiftT(202);                    // \'ordered\'\n' +
'  }\n' +
'\n' +
'  function parse_FTWindow()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTWindow", e0);\n' +
'    shift(269);                     // \'window\'\n' +
'    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_AdditiveExpr();\n' +
'    whitespace();\n' +
'    parse_FTUnit();\n' +
'    eventHandler.endNonterminal("FTWindow", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTWindow()\n' +
'  {\n' +
'    shiftT(269);                    // \'window\'\n' +
'    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_AdditiveExpr();\n' +
'    try_FTUnit();\n' +
'  }\n' +
'\n' +
'  function parse_FTDistance()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTDistance", e0);\n' +
'    shift(117);                     // \'distance\'\n' +
'    lookahead1W(149);               // S^WS | \'(:\' | \'at\' | \'exactly\' | \'from\'\n' +
'    whitespace();\n' +
'    parse_FTRange();\n' +
'    whitespace();\n' +
'    parse_FTUnit();\n' +
'    eventHandler.endNonterminal("FTDistance", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTDistance()\n' +
'  {\n' +
'    shiftT(117);                    // \'distance\'\n' +
'    lookahead1W(149);               // S^WS | \'(:\' | \'at\' | \'exactly\' | \'from\'\n' +
'    try_FTRange();\n' +
'    try_FTUnit();\n' +
'  }\n' +
'\n' +
'  function parse_FTUnit()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTUnit", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 273:                       // \'words\'\n' +
'      shift(273);                   // \'words\'\n' +
'      break;\n' +
'    case 232:                       // \'sentences\'\n' +
'      shift(232);                   // \'sentences\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(205);                   // \'paragraphs\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTUnit", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTUnit()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 273:                       // \'words\'\n' +
'      shiftT(273);                  // \'words\'\n' +
'      break;\n' +
'    case 232:                       // \'sentences\'\n' +
'      shiftT(232);                  // \'sentences\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(205);                  // \'paragraphs\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTScope()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTScope", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 223:                       // \'same\'\n' +
'      shift(223);                   // \'same\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(115);                   // \'different\'\n' +
'    }\n' +
'    lookahead1W(132);               // S^WS | \'(:\' | \'paragraph\' | \'sentence\'\n' +
'    whitespace();\n' +
'    parse_FTBigUnit();\n' +
'    eventHandler.endNonterminal("FTScope", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTScope()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 223:                       // \'same\'\n' +
'      shiftT(223);                  // \'same\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(115);                  // \'different\'\n' +
'    }\n' +
'    lookahead1W(132);               // S^WS | \'(:\' | \'paragraph\' | \'sentence\'\n' +
'    try_FTBigUnit();\n' +
'  }\n' +
'\n' +
'  function parse_FTBigUnit()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTBigUnit", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 231:                       // \'sentence\'\n' +
'      shift(231);                   // \'sentence\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(204);                   // \'paragraph\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTBigUnit", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTBigUnit()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 231:                       // \'sentence\'\n' +
'      shiftT(231);                  // \'sentence\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(204);                  // \'paragraph\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTContent()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTContent", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(117);             // S^WS | \'(:\' | \'end\' | \'start\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 237:                     // \'start\'\n' +
'        shift(237);                 // \'start\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(126);                 // \'end\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(127);                   // \'entire\'\n' +
'      lookahead1W(42);              // S^WS | \'(:\' | \'content\'\n' +
'      shift(100);                   // \'content\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTContent", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTContent()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      lookahead1W(117);             // S^WS | \'(:\' | \'end\' | \'start\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 237:                     // \'start\'\n' +
'        shiftT(237);                // \'start\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(126);                // \'end\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(127);                  // \'entire\'\n' +
'      lookahead1W(42);              // S^WS | \'(:\' | \'content\'\n' +
'      shiftT(100);                  // \'content\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTMatchOptions()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTMatchOptions", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      shift(259);                   // \'using\'\n' +
'      lookahead1W(181);             // S^WS | \'(:\' | \'case\' | \'diacritics\' | \'language\' | \'lowercase\' | \'no\' |\n' +
'                                    // \'option\' | \'stemming\' | \'stop\' | \'thesaurus\' | \'uppercase\' | \'wildcards\'\n' +
'      whitespace();\n' +
'      parse_FTMatchOption();\n' +
'      lookahead1W(214);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' | \'where\' |\n' +
'                                    // \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 != 259)                // \'using\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTMatchOptions", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTMatchOptions()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      shiftT(259);                  // \'using\'\n' +
'      lookahead1W(181);             // S^WS | \'(:\' | \'case\' | \'diacritics\' | \'language\' | \'lowercase\' | \'no\' |\n' +
'                                    // \'option\' | \'stemming\' | \'stop\' | \'thesaurus\' | \'uppercase\' | \'wildcards\'\n' +
'      try_FTMatchOption();\n' +
'      lookahead1W(214);             // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' | \'for\' |\n' +
'                                    // \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' | \'ordered\' | \'return\' |\n' +
'                                    // \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' | \'weight\' | \'where\' |\n' +
'                                    // \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'      if (l1 != 259)                // \'using\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTMatchOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTMatchOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 188:                       // \'no\'\n' +
'      lookahead2W(161);             // S^WS | \'(:\' | \'stemming\' | \'stop\' | \'thesaurus\' | \'wildcards\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 169:                       // \'language\'\n' +
'      parse_FTLanguageOption();\n' +
'      break;\n' +
'    case 268:                       // \'wildcards\'\n' +
'    case 137404:                    // \'no\' \'wildcards\'\n' +
'      parse_FTWildCardOption();\n' +
'      break;\n' +
'    case 246:                       // \'thesaurus\'\n' +
'    case 126140:                    // \'no\' \'thesaurus\'\n' +
'      parse_FTThesaurusOption();\n' +
'      break;\n' +
'    case 238:                       // \'stemming\'\n' +
'    case 122044:                    // \'no\' \'stemming\'\n' +
'      parse_FTStemOption();\n' +
'      break;\n' +
'    case 114:                       // \'diacritics\'\n' +
'      parse_FTDiacriticsOption();\n' +
'      break;\n' +
'    case 239:                       // \'stop\'\n' +
'    case 122556:                    // \'no\' \'stop\'\n' +
'      parse_FTStopWordOption();\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      parse_FTExtensionOption();\n' +
'      break;\n' +
'    default:\n' +
'      parse_FTCaseOption();\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTMatchOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTMatchOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 188:                       // \'no\'\n' +
'      lookahead2W(161);             // S^WS | \'(:\' | \'stemming\' | \'stop\' | \'thesaurus\' | \'wildcards\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 169:                       // \'language\'\n' +
'      try_FTLanguageOption();\n' +
'      break;\n' +
'    case 268:                       // \'wildcards\'\n' +
'    case 137404:                    // \'no\' \'wildcards\'\n' +
'      try_FTWildCardOption();\n' +
'      break;\n' +
'    case 246:                       // \'thesaurus\'\n' +
'    case 126140:                    // \'no\' \'thesaurus\'\n' +
'      try_FTThesaurusOption();\n' +
'      break;\n' +
'    case 238:                       // \'stemming\'\n' +
'    case 122044:                    // \'no\' \'stemming\'\n' +
'      try_FTStemOption();\n' +
'      break;\n' +
'    case 114:                       // \'diacritics\'\n' +
'      try_FTDiacriticsOption();\n' +
'      break;\n' +
'    case 239:                       // \'stop\'\n' +
'    case 122556:                    // \'no\' \'stop\'\n' +
'      try_FTStopWordOption();\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      try_FTExtensionOption();\n' +
'      break;\n' +
'    default:\n' +
'      try_FTCaseOption();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTCaseOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTCaseOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 88:                        // \'case\'\n' +
'      shift(88);                    // \'case\'\n' +
'      lookahead1W(124);             // S^WS | \'(:\' | \'insensitive\' | \'sensitive\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 158:                     // \'insensitive\'\n' +
'        shift(158);                 // \'insensitive\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(230);                 // \'sensitive\'\n' +
'      }\n' +
'      break;\n' +
'    case 177:                       // \'lowercase\'\n' +
'      shift(177);                   // \'lowercase\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(258);                   // \'uppercase\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTCaseOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTCaseOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 88:                        // \'case\'\n' +
'      shiftT(88);                   // \'case\'\n' +
'      lookahead1W(124);             // S^WS | \'(:\' | \'insensitive\' | \'sensitive\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 158:                     // \'insensitive\'\n' +
'        shiftT(158);                // \'insensitive\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(230);                // \'sensitive\'\n' +
'      }\n' +
'      break;\n' +
'    case 177:                       // \'lowercase\'\n' +
'      shiftT(177);                  // \'lowercase\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(258);                  // \'uppercase\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTDiacriticsOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTDiacriticsOption", e0);\n' +
'    shift(114);                     // \'diacritics\'\n' +
'    lookahead1W(124);               // S^WS | \'(:\' | \'insensitive\' | \'sensitive\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 158:                       // \'insensitive\'\n' +
'      shift(158);                   // \'insensitive\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(230);                   // \'sensitive\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTDiacriticsOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTDiacriticsOption()\n' +
'  {\n' +
'    shiftT(114);                    // \'diacritics\'\n' +
'    lookahead1W(124);               // S^WS | \'(:\' | \'insensitive\' | \'sensitive\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 158:                       // \'insensitive\'\n' +
'      shiftT(158);                  // \'insensitive\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(230);                  // \'sensitive\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTStemOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTStemOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 238:                       // \'stemming\'\n' +
'      shift(238);                   // \'stemming\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(188);                   // \'no\'\n' +
'      lookahead1W(74);              // S^WS | \'(:\' | \'stemming\'\n' +
'      shift(238);                   // \'stemming\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTStemOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTStemOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 238:                       // \'stemming\'\n' +
'      shiftT(238);                  // \'stemming\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(188);                  // \'no\'\n' +
'      lookahead1W(74);              // S^WS | \'(:\' | \'stemming\'\n' +
'      shiftT(238);                  // \'stemming\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTThesaurusOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTThesaurusOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 246:                       // \'thesaurus\'\n' +
'      shift(246);                   // \'thesaurus\'\n' +
'      lookahead1W(142);             // S^WS | \'(\' | \'(:\' | \'at\' | \'default\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 81:                      // \'at\'\n' +
'        whitespace();\n' +
'        parse_FTThesaurusID();\n' +
'        break;\n' +
'      case 109:                     // \'default\'\n' +
'        shift(109);                 // \'default\'\n' +
'        break;\n' +
'      default:\n' +
'        shift(34);                  // \'(\'\n' +
'        lookahead1W(112);           // S^WS | \'(:\' | \'at\' | \'default\'\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 81:                    // \'at\'\n' +
'          whitespace();\n' +
'          parse_FTThesaurusID();\n' +
'          break;\n' +
'        default:\n' +
'          shift(109);               // \'default\'\n' +
'        }\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(101);         // S^WS | \'(:\' | \')\' | \',\'\n' +
'          if (l1 != 41)             // \',\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          shift(41);                // \',\'\n' +
'          lookahead1W(31);          // S^WS | \'(:\' | \'at\'\n' +
'          whitespace();\n' +
'          parse_FTThesaurusID();\n' +
'        }\n' +
'        shift(37);                  // \')\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(188);                   // \'no\'\n' +
'      lookahead1W(78);              // S^WS | \'(:\' | \'thesaurus\'\n' +
'      shift(246);                   // \'thesaurus\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTThesaurusOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTThesaurusOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 246:                       // \'thesaurus\'\n' +
'      shiftT(246);                  // \'thesaurus\'\n' +
'      lookahead1W(142);             // S^WS | \'(\' | \'(:\' | \'at\' | \'default\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 81:                      // \'at\'\n' +
'        try_FTThesaurusID();\n' +
'        break;\n' +
'      case 109:                     // \'default\'\n' +
'        shiftT(109);                // \'default\'\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(34);                 // \'(\'\n' +
'        lookahead1W(112);           // S^WS | \'(:\' | \'at\' | \'default\'\n' +
'        switch (l1)\n' +
'        {\n' +
'        case 81:                    // \'at\'\n' +
'          try_FTThesaurusID();\n' +
'          break;\n' +
'        default:\n' +
'          shiftT(109);              // \'default\'\n' +
'        }\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(101);         // S^WS | \'(:\' | \')\' | \',\'\n' +
'          if (l1 != 41)             // \',\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          shiftT(41);               // \',\'\n' +
'          lookahead1W(31);          // S^WS | \'(:\' | \'at\'\n' +
'          try_FTThesaurusID();\n' +
'        }\n' +
'        shiftT(37);                 // \')\'\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(188);                  // \'no\'\n' +
'      lookahead1W(78);              // S^WS | \'(:\' | \'thesaurus\'\n' +
'      shiftT(246);                  // \'thesaurus\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTThesaurusID()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTThesaurusID", e0);\n' +
'    shift(81);                      // \'at\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    lookahead1W(220);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'exactly\' | \'for\' | \'from\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'relationship\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' |\n' +
'                                    // \'start\' | \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' |\n' +
'                                    // \'}\'\n' +
'    if (l1 == 217)                  // \'relationship\'\n' +
'    {\n' +
'      shift(217);                   // \'relationship\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shift(11);                    // StringLiteral\n' +
'    }\n' +
'    lookahead1W(216);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'exactly\' | \'for\' | \'from\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' |\n' +
'                                    // \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      lookahead2W(165);             // S^WS | \'(:\' | \'end\' | \'least\' | \'most\' | \'position\' | \'start\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 130                   // \'exactly\'\n' +
'     || lk == 140                   // \'from\'\n' +
'     || lk == 88657                 // \'at\' \'least\'\n' +
'     || lk == 93777)                // \'at\' \'most\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_FTLiteralRange();\n' +
'      lookahead1W(58);              // S^WS | \'(:\' | \'levels\'\n' +
'      shift(175);                   // \'levels\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTThesaurusID", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTThesaurusID()\n' +
'  {\n' +
'    shiftT(81);                     // \'at\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shiftT(7);                      // URILiteral\n' +
'    lookahead1W(220);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'exactly\' | \'for\' | \'from\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'relationship\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' |\n' +
'                                    // \'start\' | \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' |\n' +
'                                    // \'}\'\n' +
'    if (l1 == 217)                  // \'relationship\'\n' +
'    {\n' +
'      shiftT(217);                  // \'relationship\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shiftT(11);                   // StringLiteral\n' +
'    }\n' +
'    lookahead1W(216);               // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'exactly\' | \'for\' | \'from\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' |\n' +
'                                    // \'is\' | \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'using\' |\n' +
'                                    // \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      lookahead2W(165);             // S^WS | \'(:\' | \'end\' | \'least\' | \'most\' | \'position\' | \'start\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 130                   // \'exactly\'\n' +
'     || lk == 140                   // \'from\'\n' +
'     || lk == 88657                 // \'at\' \'least\'\n' +
'     || lk == 93777)                // \'at\' \'most\'\n' +
'    {\n' +
'      try_FTLiteralRange();\n' +
'      lookahead1W(58);              // S^WS | \'(:\' | \'levels\'\n' +
'      shiftT(175);                  // \'levels\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTLiteralRange()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTLiteralRange", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 130:                       // \'exactly\'\n' +
'      shift(130);                   // \'exactly\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shift(8);                     // IntegerLiteral\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(125);             // S^WS | \'(:\' | \'least\' | \'most\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 173:                     // \'least\'\n' +
'        shift(173);                 // \'least\'\n' +
'        lookahead1W(16);            // IntegerLiteral | S^WS | \'(:\'\n' +
'        shift(8);                   // IntegerLiteral\n' +
'        break;\n' +
'      default:\n' +
'        shift(183);                 // \'most\'\n' +
'        lookahead1W(16);            // IntegerLiteral | S^WS | \'(:\'\n' +
'        shift(8);                   // IntegerLiteral\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(140);                   // \'from\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shift(8);                     // IntegerLiteral\n' +
'      lookahead1W(79);              // S^WS | \'(:\' | \'to\'\n' +
'      shift(248);                   // \'to\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shift(8);                     // IntegerLiteral\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTLiteralRange", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTLiteralRange()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 130:                       // \'exactly\'\n' +
'      shiftT(130);                  // \'exactly\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shiftT(8);                    // IntegerLiteral\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      lookahead1W(125);             // S^WS | \'(:\' | \'least\' | \'most\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 173:                     // \'least\'\n' +
'        shiftT(173);                // \'least\'\n' +
'        lookahead1W(16);            // IntegerLiteral | S^WS | \'(:\'\n' +
'        shiftT(8);                  // IntegerLiteral\n' +
'        break;\n' +
'      default:\n' +
'        shiftT(183);                // \'most\'\n' +
'        lookahead1W(16);            // IntegerLiteral | S^WS | \'(:\'\n' +
'        shiftT(8);                  // IntegerLiteral\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(140);                  // \'from\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shiftT(8);                    // IntegerLiteral\n' +
'      lookahead1W(79);              // S^WS | \'(:\' | \'to\'\n' +
'      shiftT(248);                  // \'to\'\n' +
'      lookahead1W(16);              // IntegerLiteral | S^WS | \'(:\'\n' +
'      shiftT(8);                    // IntegerLiteral\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTStopWordOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTStopWordOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 239:                       // \'stop\'\n' +
'      shift(239);                   // \'stop\'\n' +
'      lookahead1W(86);              // S^WS | \'(:\' | \'words\'\n' +
'      shift(273);                   // \'words\'\n' +
'      lookahead1W(142);             // S^WS | \'(\' | \'(:\' | \'at\' | \'default\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 109:                     // \'default\'\n' +
'        shift(109);                 // \'default\'\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(217);         // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'union\' |\n' +
'                                    // \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'          if (l1 != 131             // \'except\'\n' +
'           && l1 != 254)            // \'union\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          whitespace();\n' +
'          parse_FTStopWordsInclExcl();\n' +
'        }\n' +
'        break;\n' +
'      default:\n' +
'        whitespace();\n' +
'        parse_FTStopWords();\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(217);         // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'union\' |\n' +
'                                    // \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'          if (l1 != 131             // \'except\'\n' +
'           && l1 != 254)            // \'union\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          whitespace();\n' +
'          parse_FTStopWordsInclExcl();\n' +
'        }\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shift(188);                   // \'no\'\n' +
'      lookahead1W(75);              // S^WS | \'(:\' | \'stop\'\n' +
'      shift(239);                   // \'stop\'\n' +
'      lookahead1W(86);              // S^WS | \'(:\' | \'words\'\n' +
'      shift(273);                   // \'words\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTStopWordOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTStopWordOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 239:                       // \'stop\'\n' +
'      shiftT(239);                  // \'stop\'\n' +
'      lookahead1W(86);              // S^WS | \'(:\' | \'words\'\n' +
'      shiftT(273);                  // \'words\'\n' +
'      lookahead1W(142);             // S^WS | \'(\' | \'(:\' | \'at\' | \'default\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 109:                     // \'default\'\n' +
'        shiftT(109);                // \'default\'\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(217);         // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'union\' |\n' +
'                                    // \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'          if (l1 != 131             // \'except\'\n' +
'           && l1 != 254)            // \'union\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          try_FTStopWordsInclExcl();\n' +
'        }\n' +
'        break;\n' +
'      default:\n' +
'        try_FTStopWords();\n' +
'        for (;;)\n' +
'        {\n' +
'          lookahead1W(217);         // S^WS | EOF | \'!=\' | \'(:\' | \')\' | \',\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' |\n' +
'                                    // \'>\' | \'>=\' | \'>>\' | \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'before\' | \'case\' | \'collation\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'different\' | \'distance\' | \'else\' | \'empty\' | \'end\' | \'entire\' | \'eq\' |\n' +
'                                    // \'except\' | \'for\' | \'ftand\' | \'ftor\' | \'ge\' | \'group\' | \'gt\' | \'into\' | \'is\' |\n' +
'                                    // \'le\' | \'let\' | \'lt\' | \'modify\' | \'ne\' | \'not\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'ordered\' | \'return\' | \'same\' | \'satisfies\' | \'stable\' | \'start\' | \'union\' |\n' +
'                                    // \'using\' | \'weight\' | \'where\' | \'window\' | \'with\' | \'without\' | \'|}\' | \'}\'\n' +
'          if (l1 != 131             // \'except\'\n' +
'           && l1 != 254)            // \'union\'\n' +
'          {\n' +
'            break;\n' +
'          }\n' +
'          try_FTStopWordsInclExcl();\n' +
'        }\n' +
'      }\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(188);                  // \'no\'\n' +
'      lookahead1W(75);              // S^WS | \'(:\' | \'stop\'\n' +
'      shiftT(239);                  // \'stop\'\n' +
'      lookahead1W(86);              // S^WS | \'(:\' | \'words\'\n' +
'      shiftT(273);                  // \'words\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTStopWords()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTStopWords", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shift(7);                     // URILiteral\n' +
'      break;\n' +
'    default:\n' +
'      shift(34);                    // \'(\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shift(11);                    // StringLiteral\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(17);            // StringLiteral | S^WS | \'(:\'\n' +
'        shift(11);                  // StringLiteral\n' +
'      }\n' +
'      shift(37);                    // \')\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTStopWords", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTStopWords()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      lookahead1W(15);              // URILiteral | S^WS | \'(:\'\n' +
'      shiftT(7);                    // URILiteral\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(34);                   // \'(\'\n' +
'      lookahead1W(17);              // StringLiteral | S^WS | \'(:\'\n' +
'      shiftT(11);                   // StringLiteral\n' +
'      for (;;)\n' +
'      {\n' +
'        lookahead1W(101);           // S^WS | \'(:\' | \')\' | \',\'\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(17);            // StringLiteral | S^WS | \'(:\'\n' +
'        shiftT(11);                 // StringLiteral\n' +
'      }\n' +
'      shiftT(37);                   // \')\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTStopWordsInclExcl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 254:                       // \'union\'\n' +
'      shift(254);                   // \'union\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(131);                   // \'except\'\n' +
'    }\n' +
'    lookahead1W(99);                // S^WS | \'(\' | \'(:\' | \'at\'\n' +
'    whitespace();\n' +
'    parse_FTStopWords();\n' +
'    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTStopWordsInclExcl()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 254:                       // \'union\'\n' +
'      shiftT(254);                  // \'union\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(131);                  // \'except\'\n' +
'    }\n' +
'    lookahead1W(99);                // S^WS | \'(\' | \'(:\' | \'at\'\n' +
'    try_FTStopWords();\n' +
'  }\n' +
'\n' +
'  function parse_FTLanguageOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTLanguageOption", e0);\n' +
'    shift(169);                     // \'language\'\n' +
'    lookahead1W(17);                // StringLiteral | S^WS | \'(:\'\n' +
'    shift(11);                      // StringLiteral\n' +
'    eventHandler.endNonterminal("FTLanguageOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTLanguageOption()\n' +
'  {\n' +
'    shiftT(169);                    // \'language\'\n' +
'    lookahead1W(17);                // StringLiteral | S^WS | \'(:\'\n' +
'    shiftT(11);                     // StringLiteral\n' +
'  }\n' +
'\n' +
'  function parse_FTWildCardOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTWildCardOption", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 268:                       // \'wildcards\'\n' +
'      shift(268);                   // \'wildcards\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(188);                   // \'no\'\n' +
'      lookahead1W(84);              // S^WS | \'(:\' | \'wildcards\'\n' +
'      shift(268);                   // \'wildcards\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FTWildCardOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTWildCardOption()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 268:                       // \'wildcards\'\n' +
'      shiftT(268);                  // \'wildcards\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(188);                  // \'no\'\n' +
'      lookahead1W(84);              // S^WS | \'(:\' | \'wildcards\'\n' +
'      shiftT(268);                  // \'wildcards\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FTExtensionOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTExtensionOption", e0);\n' +
'    shift(199);                     // \'option\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(17);                // StringLiteral | S^WS | \'(:\'\n' +
'    shift(11);                      // StringLiteral\n' +
'    eventHandler.endNonterminal("FTExtensionOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTExtensionOption()\n' +
'  {\n' +
'    shiftT(199);                    // \'option\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_EQName();\n' +
'    lookahead1W(17);                // StringLiteral | S^WS | \'(:\'\n' +
'    shiftT(11);                     // StringLiteral\n' +
'  }\n' +
'\n' +
'  function parse_FTIgnoreOption()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FTIgnoreOption", e0);\n' +
'    shift(271);                     // \'without\'\n' +
'    lookahead1W(42);                // S^WS | \'(:\' | \'content\'\n' +
'    shift(100);                     // \'content\'\n' +
'    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_UnionExpr();\n' +
'    eventHandler.endNonterminal("FTIgnoreOption", e0);\n' +
'  }\n' +
'\n' +
'  function try_FTIgnoreOption()\n' +
'  {\n' +
'    shiftT(271);                    // \'without\'\n' +
'    lookahead1W(42);                // S^WS | \'(:\' | \'content\'\n' +
'    shiftT(100);                    // \'content\'\n' +
'    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_UnionExpr();\n' +
'  }\n' +
'\n' +
'  function parse_CollectionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CollectionDecl", e0);\n' +
'    shift(95);                      // \'collection\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(107);               // S^WS | \'(:\' | \';\' | \'as\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_CollectionTypeDecl();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CollectionDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_CollectionTypeDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CollectionTypeDecl", e0);\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(183);               // S^WS | \'(:\' | \'array\' | \'attribute\' | \'comment\' | \'document-node\' | \'element\' |\n' +
'                                    // \'json-item\' | \'namespace-node\' | \'node\' | \'object\' | \'processing-instruction\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'text\'\n' +
'    whitespace();\n' +
'    parse_KindTest();\n' +
'    lookahead1W(156);               // S^WS | \'(:\' | \'*\' | \'+\' | \';\' | \'?\'\n' +
'    if (l1 != 53)                   // \';\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_OccurrenceIndicator();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CollectionTypeDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexName", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("IndexName", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexDomainExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexDomainExpr", e0);\n' +
'    parse_PathExpr();\n' +
'    eventHandler.endNonterminal("IndexDomainExpr", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexKeySpec()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexKeySpec", e0);\n' +
'    parse_IndexKeyExpr();\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_IndexKeyTypeDecl();\n' +
'    }\n' +
'    lookahead1W(146);               // S^WS | \'(:\' | \',\' | \';\' | \'collation\'\n' +
'    if (l1 == 94)                   // \'collation\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_IndexKeyCollation();\n' +
'    }\n' +
'    eventHandler.endNonterminal("IndexKeySpec", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexKeyExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexKeyExpr", e0);\n' +
'    parse_PathExpr();\n' +
'    eventHandler.endNonterminal("IndexKeyExpr", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexKeyTypeDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_AtomicType();\n' +
'    lookahead1W(169);               // S^WS | \'(:\' | \'*\' | \'+\' | \',\' | \';\' | \'?\' | \'collation\'\n' +
'    if (l1 == 39                    // \'*\'\n' +
'     || l1 == 40                    // \'+\'\n' +
'     || l1 == 64)                   // \'?\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_OccurrenceIndicator();\n' +
'    }\n' +
'    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_AtomicType()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AtomicType", e0);\n' +
'    parse_EQName();\n' +
'    eventHandler.endNonterminal("AtomicType", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexKeyCollation()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexKeyCollation", e0);\n' +
'    shift(94);                      // \'collation\'\n' +
'    lookahead1W(15);                // URILiteral | S^WS | \'(:\'\n' +
'    shift(7);                       // URILiteral\n' +
'    eventHandler.endNonterminal("IndexKeyCollation", e0);\n' +
'  }\n' +
'\n' +
'  function parse_IndexDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IndexDecl", e0);\n' +
'    shift(155);                     // \'index\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_IndexName();\n' +
'    lookahead1W(65);                // S^WS | \'(:\' | \'on\'\n' +
'    shift(197);                     // \'on\'\n' +
'    lookahead1W(63);                // S^WS | \'(:\' | \'nodes\'\n' +
'    shift(192);                     // \'nodes\'\n' +
'    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_IndexDomainExpr();\n' +
'    shift(87);                      // \'by\'\n' +
'    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_IndexKeySpec();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(103);             // S^WS | \'(:\' | \',\' | \';\'\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_IndexKeySpec();\n' +
'    }\n' +
'    eventHandler.endNonterminal("IndexDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICDecl", e0);\n' +
'    shift(161);                     // \'integrity\'\n' +
'    lookahead1W(40);                // S^WS | \'(:\' | \'constraint\'\n' +
'    shift(97);                      // \'constraint\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(120);               // S^WS | \'(:\' | \'foreign\' | \'on\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 197:                       // \'on\'\n' +
'      whitespace();\n' +
'      parse_ICCollection();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_ICForeignKey();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ICDecl", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICCollection()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICCollection", e0);\n' +
'    shift(197);                     // \'on\'\n' +
'    lookahead1W(39);                // S^WS | \'(:\' | \'collection\'\n' +
'    shift(95);                      // \'collection\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(140);               // S^WS | \'$\' | \'(:\' | \'foreach\' | \'node\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 31:                        // \'$\'\n' +
'      whitespace();\n' +
'      parse_ICCollSequence();\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      whitespace();\n' +
'      parse_ICCollSequenceUnique();\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_ICCollNode();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ICCollection", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICCollSequence()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICCollSequence", e0);\n' +
'    parse_VarRef();\n' +
'    lookahead1W(37);                // S^WS | \'(:\' | \'check\'\n' +
'    shift(92);                      // \'check\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("ICCollSequence", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICCollSequenceUnique()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICCollSequenceUnique", e0);\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_VarRef();\n' +
'    lookahead1W(37);                // S^WS | \'(:\' | \'check\'\n' +
'    shift(92);                      // \'check\'\n' +
'    lookahead1W(80);                // S^WS | \'(:\' | \'unique\'\n' +
'    shift(255);                     // \'unique\'\n' +
'    lookahead1W(57);                // S^WS | \'(:\' | \'key\'\n' +
'    shift(168);                     // \'key\'\n' +
'    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_PathExpr();\n' +
'    eventHandler.endNonterminal("ICCollSequenceUnique", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICCollNode()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICCollNode", e0);\n' +
'    shift(138);                     // \'foreach\'\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_VarRef();\n' +
'    lookahead1W(37);                // S^WS | \'(:\' | \'check\'\n' +
'    shift(92);                      // \'check\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("ICCollNode", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICForeignKey()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICForeignKey", e0);\n' +
'    shift(139);                     // \'foreign\'\n' +
'    lookahead1W(57);                // S^WS | \'(:\' | \'key\'\n' +
'    shift(168);                     // \'key\'\n' +
'    lookahead1W(51);                // S^WS | \'(:\' | \'from\'\n' +
'    whitespace();\n' +
'    parse_ICForeignKeySource();\n' +
'    whitespace();\n' +
'    parse_ICForeignKeyTarget();\n' +
'    eventHandler.endNonterminal("ICForeignKey", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICForeignKeySource()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICForeignKeySource", e0);\n' +
'    shift(140);                     // \'from\'\n' +
'    lookahead1W(39);                // S^WS | \'(:\' | \'collection\'\n' +
'    whitespace();\n' +
'    parse_ICForeignKeyValues();\n' +
'    eventHandler.endNonterminal("ICForeignKeySource", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICForeignKeyTarget()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICForeignKeyTarget", e0);\n' +
'    shift(248);                     // \'to\'\n' +
'    lookahead1W(39);                // S^WS | \'(:\' | \'collection\'\n' +
'    whitespace();\n' +
'    parse_ICForeignKeyValues();\n' +
'    eventHandler.endNonterminal("ICForeignKeyTarget", e0);\n' +
'  }\n' +
'\n' +
'  function parse_ICForeignKeyValues()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ICForeignKeyValues", e0);\n' +
'    shift(95);                      // \'collection\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(62);                // S^WS | \'(:\' | \'node\'\n' +
'    shift(191);                     // \'node\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    whitespace();\n' +
'    parse_VarRef();\n' +
'    lookahead1W(57);                // S^WS | \'(:\' | \'key\'\n' +
'    shift(168);                     // \'key\'\n' +
'    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'/\' | \'//\' | \'<\' |\n' +
'                                    // \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_PathExpr();\n' +
'    eventHandler.endNonterminal("ICForeignKeyValues", e0);\n' +
'  }\n' +
'\n' +
'  function try_Comment()\n' +
'  {\n' +
'    shiftT(36);                     // \'(:\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1(89);               // CommentContents | \'(:\' | \':)\'\n' +
'      if (l1 == 50)                 // \':)\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 24:                      // CommentContents\n' +
'        shiftT(24);                 // CommentContents\n' +
'        break;\n' +
'      default:\n' +
'        try_Comment();\n' +
'      }\n' +
'    }\n' +
'    shiftT(50);                     // \':)\'\n' +
'  }\n' +
'\n' +
'  function try_Whitespace()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 22:                        // S^WS\n' +
'      shiftT(22);                   // S^WS\n' +
'      break;\n' +
'    default:\n' +
'      try_Comment();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_EQName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("EQName", e0);\n' +
'    lookahead1(247);                // EQName^Token | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      shift(82);                    // \'attribute\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      shift(96);                    // \'comment\'\n' +
'      break;\n' +
'    case 120:                       // \'document-node\'\n' +
'      shift(120);                   // \'document-node\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      shift(121);                   // \'element\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      shift(124);                   // \'empty-sequence\'\n' +
'      break;\n' +
'    case 145:                       // \'function\'\n' +
'      shift(145);                   // \'function\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'      shift(152);                   // \'if\'\n' +
'      break;\n' +
'    case 165:                       // \'item\'\n' +
'      shift(165);                   // \'item\'\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      shift(185);                   // \'namespace-node\'\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      shift(191);                   // \'node\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      shift(216);                   // \'processing-instruction\'\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      shift(226);                   // \'schema-attribute\'\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      shift(227);                   // \'schema-element\'\n' +
'      break;\n' +
'    case 243:                       // \'switch\'\n' +
'      shift(243);                   // \'switch\'\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      shift(244);                   // \'text\'\n' +
'      break;\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      shift(253);                   // \'typeswitch\'\n' +
'      break;\n' +
'    default:\n' +
'      parse_FunctionName();\n' +
'    }\n' +
'    eventHandler.endNonterminal("EQName", e0);\n' +
'  }\n' +
'\n' +
'  function try_EQName()\n' +
'  {\n' +
'    lookahead1(247);                // EQName^Token | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 82:                        // \'attribute\'\n' +
'      shiftT(82);                   // \'attribute\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      shiftT(96);                   // \'comment\'\n' +
'      break;\n' +
'    case 120:                       // \'document-node\'\n' +
'      shiftT(120);                  // \'document-node\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      shiftT(121);                  // \'element\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      shiftT(124);                  // \'empty-sequence\'\n' +
'      break;\n' +
'    case 145:                       // \'function\'\n' +
'      shiftT(145);                  // \'function\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'      shiftT(152);                  // \'if\'\n' +
'      break;\n' +
'    case 165:                       // \'item\'\n' +
'      shiftT(165);                  // \'item\'\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      shiftT(185);                  // \'namespace-node\'\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      shiftT(191);                  // \'node\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      shiftT(216);                  // \'processing-instruction\'\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      shiftT(226);                  // \'schema-attribute\'\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      shiftT(227);                  // \'schema-element\'\n' +
'      break;\n' +
'    case 243:                       // \'switch\'\n' +
'      shiftT(243);                  // \'switch\'\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      shiftT(244);                  // \'text\'\n' +
'      break;\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      shiftT(253);                  // \'typeswitch\'\n' +
'      break;\n' +
'    default:\n' +
'      try_FunctionName();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_FunctionName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionName", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 6:                         // EQName^Token\n' +
'      shift(6);                     // EQName^Token\n' +
'      break;\n' +
'    case 70:                        // \'after\'\n' +
'      shift(70);                    // \'after\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shift(73);                    // \'ancestor\'\n' +
'      break;\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'      shift(74);                    // \'ancestor-or-self\'\n' +
'      break;\n' +
'    case 75:                        // \'and\'\n' +
'      shift(75);                    // \'and\'\n' +
'      break;\n' +
'    case 79:                        // \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'      break;\n' +
'    case 80:                        // \'ascending\'\n' +
'      shift(80);                    // \'ascending\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shift(84);                    // \'before\'\n' +
'      break;\n' +
'    case 88:                        // \'case\'\n' +
'      shift(88);                    // \'case\'\n' +
'      break;\n' +
'    case 89:                        // \'cast\'\n' +
'      shift(89);                    // \'cast\'\n' +
'      break;\n' +
'    case 90:                        // \'castable\'\n' +
'      shift(90);                    // \'castable\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'      shift(93);                    // \'child\'\n' +
'      break;\n' +
'    case 94:                        // \'collation\'\n' +
'      shift(94);                    // \'collation\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'      shift(103);                   // \'copy\'\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      shift(105);                   // \'count\'\n' +
'      break;\n' +
'    case 108:                       // \'declare\'\n' +
'      shift(108);                   // \'declare\'\n' +
'      break;\n' +
'    case 109:                       // \'default\'\n' +
'      shift(109);                   // \'default\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'      shift(110);                   // \'delete\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shift(111);                   // \'descendant\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shift(112);                   // \'descendant-or-self\'\n' +
'      break;\n' +
'    case 113:                       // \'descending\'\n' +
'      shift(113);                   // \'descending\'\n' +
'      break;\n' +
'    case 118:                       // \'div\'\n' +
'      shift(118);                   // \'div\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'      shift(119);                   // \'document\'\n' +
'      break;\n' +
'    case 122:                       // \'else\'\n' +
'      shift(122);                   // \'else\'\n' +
'      break;\n' +
'    case 123:                       // \'empty\'\n' +
'      shift(123);                   // \'empty\'\n' +
'      break;\n' +
'    case 126:                       // \'end\'\n' +
'      shift(126);                   // \'end\'\n' +
'      break;\n' +
'    case 128:                       // \'eq\'\n' +
'      shift(128);                   // \'eq\'\n' +
'      break;\n' +
'    case 129:                       // \'every\'\n' +
'      shift(129);                   // \'every\'\n' +
'      break;\n' +
'    case 131:                       // \'except\'\n' +
'      shift(131);                   // \'except\'\n' +
'      break;\n' +
'    case 134:                       // \'first\'\n' +
'      shift(134);                   // \'first\'\n' +
'      break;\n' +
'    case 135:                       // \'following\'\n' +
'      shift(135);                   // \'following\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shift(136);                   // \'following-sibling\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      shift(137);                   // \'for\'\n' +
'      break;\n' +
'    case 146:                       // \'ge\'\n' +
'      shift(146);                   // \'ge\'\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      shift(148);                   // \'group\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shift(150);                   // \'gt\'\n' +
'      break;\n' +
'    case 151:                       // \'idiv\'\n' +
'      shift(151);                   // \'idiv\'\n' +
'      break;\n' +
'    case 153:                       // \'import\'\n' +
'      shift(153);                   // \'import\'\n' +
'      break;\n' +
'    case 159:                       // \'insert\'\n' +
'      shift(159);                   // \'insert\'\n' +
'      break;\n' +
'    case 160:                       // \'instance\'\n' +
'      shift(160);                   // \'instance\'\n' +
'      break;\n' +
'    case 162:                       // \'intersect\'\n' +
'      shift(162);                   // \'intersect\'\n' +
'      break;\n' +
'    case 163:                       // \'into\'\n' +
'      shift(163);                   // \'into\'\n' +
'      break;\n' +
'    case 164:                       // \'is\'\n' +
'      shift(164);                   // \'is\'\n' +
'      break;\n' +
'    case 170:                       // \'last\'\n' +
'      shift(170);                   // \'last\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shift(172);                   // \'le\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      shift(174);                   // \'let\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shift(178);                   // \'lt\'\n' +
'      break;\n' +
'    case 180:                       // \'mod\'\n' +
'      shift(180);                   // \'mod\'\n' +
'      break;\n' +
'    case 181:                       // \'modify\'\n' +
'      shift(181);                   // \'modify\'\n' +
'      break;\n' +
'    case 182:                       // \'module\'\n' +
'      shift(182);                   // \'module\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      shift(184);                   // \'namespace\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shift(186);                   // \'ne\'\n' +
'      break;\n' +
'    case 198:                       // \'only\'\n' +
'      shift(198);                   // \'only\'\n' +
'      break;\n' +
'    case 200:                       // \'or\'\n' +
'      shift(200);                   // \'or\'\n' +
'      break;\n' +
'    case 201:                       // \'order\'\n' +
'      shift(201);                   // \'order\'\n' +
'      break;\n' +
'    case 202:                       // \'ordered\'\n' +
'      shift(202);                   // \'ordered\'\n' +
'      break;\n' +
'    case 206:                       // \'parent\'\n' +
'      shift(206);                   // \'parent\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shift(212);                   // \'preceding\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shift(213);                   // \'preceding-sibling\'\n' +
'      break;\n' +
'    case 218:                       // \'rename\'\n' +
'      shift(218);                   // \'rename\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      shift(219);                   // \'replace\'\n' +
'      break;\n' +
'    case 220:                       // \'return\'\n' +
'      shift(220);                   // \'return\'\n' +
'      break;\n' +
'    case 224:                       // \'satisfies\'\n' +
'      shift(224);                   // \'satisfies\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shift(229);                   // \'self\'\n' +
'      break;\n' +
'    case 235:                       // \'some\'\n' +
'      shift(235);                   // \'some\'\n' +
'      break;\n' +
'    case 236:                       // \'stable\'\n' +
'      shift(236);                   // \'stable\'\n' +
'      break;\n' +
'    case 237:                       // \'start\'\n' +
'      shift(237);                   // \'start\'\n' +
'      break;\n' +
'    case 248:                       // \'to\'\n' +
'      shift(248);                   // \'to\'\n' +
'      break;\n' +
'    case 249:                       // \'treat\'\n' +
'      shift(249);                   // \'treat\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      shift(250);                   // \'try\'\n' +
'      break;\n' +
'    case 254:                       // \'union\'\n' +
'      shift(254);                   // \'union\'\n' +
'      break;\n' +
'    case 256:                       // \'unordered\'\n' +
'      shift(256);                   // \'unordered\'\n' +
'      break;\n' +
'    case 260:                       // \'validate\'\n' +
'      shift(260);                   // \'validate\'\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      shift(266);                   // \'where\'\n' +
'      break;\n' +
'    case 270:                       // \'with\'\n' +
'      shift(270);                   // \'with\'\n' +
'      break;\n' +
'    case 274:                       // \'xquery\'\n' +
'      shift(274);                   // \'xquery\'\n' +
'      break;\n' +
'    case 72:                        // \'allowing\'\n' +
'      shift(72);                    // \'allowing\'\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      break;\n' +
'    case 83:                        // \'base-uri\'\n' +
'      shift(83);                    // \'base-uri\'\n' +
'      break;\n' +
'    case 85:                        // \'boundary-space\'\n' +
'      shift(85);                    // \'boundary-space\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'      shift(86);                    // \'break\'\n' +
'      break;\n' +
'    case 91:                        // \'catch\'\n' +
'      shift(91);                    // \'catch\'\n' +
'      break;\n' +
'    case 98:                        // \'construction\'\n' +
'      shift(98);                    // \'construction\'\n' +
'      break;\n' +
'    case 101:                       // \'context\'\n' +
'      shift(101);                   // \'context\'\n' +
'      break;\n' +
'    case 102:                       // \'continue\'\n' +
'      shift(102);                   // \'continue\'\n' +
'      break;\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'      shift(104);                   // \'copy-namespaces\'\n' +
'      break;\n' +
'    case 106:                       // \'decimal-format\'\n' +
'      shift(106);                   // \'decimal-format\'\n' +
'      break;\n' +
'    case 125:                       // \'encoding\'\n' +
'      shift(125);                   // \'encoding\'\n' +
'      break;\n' +
'    case 132:                       // \'exit\'\n' +
'      shift(132);                   // \'exit\'\n' +
'      break;\n' +
'    case 133:                       // \'external\'\n' +
'      shift(133);                   // \'external\'\n' +
'      break;\n' +
'    case 141:                       // \'ft-option\'\n' +
'      shift(141);                   // \'ft-option\'\n' +
'      break;\n' +
'    case 154:                       // \'in\'\n' +
'      shift(154);                   // \'in\'\n' +
'      break;\n' +
'    case 155:                       // \'index\'\n' +
'      shift(155);                   // \'index\'\n' +
'      break;\n' +
'    case 161:                       // \'integrity\'\n' +
'      shift(161);                   // \'integrity\'\n' +
'      break;\n' +
'    case 171:                       // \'lax\'\n' +
'      shift(171);                   // \'lax\'\n' +
'      break;\n' +
'    case 192:                       // \'nodes\'\n' +
'      shift(192);                   // \'nodes\'\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      shift(199);                   // \'option\'\n' +
'      break;\n' +
'    case 203:                       // \'ordering\'\n' +
'      shift(203);                   // \'ordering\'\n' +
'      break;\n' +
'    case 222:                       // \'revalidation\'\n' +
'      shift(222);                   // \'revalidation\'\n' +
'      break;\n' +
'    case 225:                       // \'schema\'\n' +
'      shift(225);                   // \'schema\'\n' +
'      break;\n' +
'    case 228:                       // \'score\'\n' +
'      shift(228);                   // \'score\'\n' +
'      break;\n' +
'    case 234:                       // \'sliding\'\n' +
'      shift(234);                   // \'sliding\'\n' +
'      break;\n' +
'    case 240:                       // \'strict\'\n' +
'      shift(240);                   // \'strict\'\n' +
'      break;\n' +
'    case 251:                       // \'tumbling\'\n' +
'      shift(251);                   // \'tumbling\'\n' +
'      break;\n' +
'    case 252:                       // \'type\'\n' +
'      shift(252);                   // \'type\'\n' +
'      break;\n' +
'    case 257:                       // \'updating\'\n' +
'      shift(257);                   // \'updating\'\n' +
'      break;\n' +
'    case 261:                       // \'value\'\n' +
'      shift(261);                   // \'value\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      shift(262);                   // \'variable\'\n' +
'      break;\n' +
'    case 263:                       // \'version\'\n' +
'      shift(263);                   // \'version\'\n' +
'      break;\n' +
'    case 267:                       // \'while\'\n' +
'      shift(267);                   // \'while\'\n' +
'      break;\n' +
'    case 97:                        // \'constraint\'\n' +
'      shift(97);                    // \'constraint\'\n' +
'      break;\n' +
'    case 176:                       // \'loop\'\n' +
'      shift(176);                   // \'loop\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(221);                   // \'returning\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FunctionName", e0);\n' +
'  }\n' +
'\n' +
'  function try_FunctionName()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 6:                         // EQName^Token\n' +
'      shiftT(6);                    // EQName^Token\n' +
'      break;\n' +
'    case 70:                        // \'after\'\n' +
'      shiftT(70);                   // \'after\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shiftT(73);                   // \'ancestor\'\n' +
'      break;\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'      shiftT(74);                   // \'ancestor-or-self\'\n' +
'      break;\n' +
'    case 75:                        // \'and\'\n' +
'      shiftT(75);                   // \'and\'\n' +
'      break;\n' +
'    case 79:                        // \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'      break;\n' +
'    case 80:                        // \'ascending\'\n' +
'      shiftT(80);                   // \'ascending\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shiftT(84);                   // \'before\'\n' +
'      break;\n' +
'    case 88:                        // \'case\'\n' +
'      shiftT(88);                   // \'case\'\n' +
'      break;\n' +
'    case 89:                        // \'cast\'\n' +
'      shiftT(89);                   // \'cast\'\n' +
'      break;\n' +
'    case 90:                        // \'castable\'\n' +
'      shiftT(90);                   // \'castable\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'      shiftT(93);                   // \'child\'\n' +
'      break;\n' +
'    case 94:                        // \'collation\'\n' +
'      shiftT(94);                   // \'collation\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'      shiftT(103);                  // \'copy\'\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      shiftT(105);                  // \'count\'\n' +
'      break;\n' +
'    case 108:                       // \'declare\'\n' +
'      shiftT(108);                  // \'declare\'\n' +
'      break;\n' +
'    case 109:                       // \'default\'\n' +
'      shiftT(109);                  // \'default\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'      shiftT(110);                  // \'delete\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shiftT(111);                  // \'descendant\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shiftT(112);                  // \'descendant-or-self\'\n' +
'      break;\n' +
'    case 113:                       // \'descending\'\n' +
'      shiftT(113);                  // \'descending\'\n' +
'      break;\n' +
'    case 118:                       // \'div\'\n' +
'      shiftT(118);                  // \'div\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'      shiftT(119);                  // \'document\'\n' +
'      break;\n' +
'    case 122:                       // \'else\'\n' +
'      shiftT(122);                  // \'else\'\n' +
'      break;\n' +
'    case 123:                       // \'empty\'\n' +
'      shiftT(123);                  // \'empty\'\n' +
'      break;\n' +
'    case 126:                       // \'end\'\n' +
'      shiftT(126);                  // \'end\'\n' +
'      break;\n' +
'    case 128:                       // \'eq\'\n' +
'      shiftT(128);                  // \'eq\'\n' +
'      break;\n' +
'    case 129:                       // \'every\'\n' +
'      shiftT(129);                  // \'every\'\n' +
'      break;\n' +
'    case 131:                       // \'except\'\n' +
'      shiftT(131);                  // \'except\'\n' +
'      break;\n' +
'    case 134:                       // \'first\'\n' +
'      shiftT(134);                  // \'first\'\n' +
'      break;\n' +
'    case 135:                       // \'following\'\n' +
'      shiftT(135);                  // \'following\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shiftT(136);                  // \'following-sibling\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      shiftT(137);                  // \'for\'\n' +
'      break;\n' +
'    case 146:                       // \'ge\'\n' +
'      shiftT(146);                  // \'ge\'\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      shiftT(148);                  // \'group\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shiftT(150);                  // \'gt\'\n' +
'      break;\n' +
'    case 151:                       // \'idiv\'\n' +
'      shiftT(151);                  // \'idiv\'\n' +
'      break;\n' +
'    case 153:                       // \'import\'\n' +
'      shiftT(153);                  // \'import\'\n' +
'      break;\n' +
'    case 159:                       // \'insert\'\n' +
'      shiftT(159);                  // \'insert\'\n' +
'      break;\n' +
'    case 160:                       // \'instance\'\n' +
'      shiftT(160);                  // \'instance\'\n' +
'      break;\n' +
'    case 162:                       // \'intersect\'\n' +
'      shiftT(162);                  // \'intersect\'\n' +
'      break;\n' +
'    case 163:                       // \'into\'\n' +
'      shiftT(163);                  // \'into\'\n' +
'      break;\n' +
'    case 164:                       // \'is\'\n' +
'      shiftT(164);                  // \'is\'\n' +
'      break;\n' +
'    case 170:                       // \'last\'\n' +
'      shiftT(170);                  // \'last\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shiftT(172);                  // \'le\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      shiftT(174);                  // \'let\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shiftT(178);                  // \'lt\'\n' +
'      break;\n' +
'    case 180:                       // \'mod\'\n' +
'      shiftT(180);                  // \'mod\'\n' +
'      break;\n' +
'    case 181:                       // \'modify\'\n' +
'      shiftT(181);                  // \'modify\'\n' +
'      break;\n' +
'    case 182:                       // \'module\'\n' +
'      shiftT(182);                  // \'module\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      shiftT(184);                  // \'namespace\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shiftT(186);                  // \'ne\'\n' +
'      break;\n' +
'    case 198:                       // \'only\'\n' +
'      shiftT(198);                  // \'only\'\n' +
'      break;\n' +
'    case 200:                       // \'or\'\n' +
'      shiftT(200);                  // \'or\'\n' +
'      break;\n' +
'    case 201:                       // \'order\'\n' +
'      shiftT(201);                  // \'order\'\n' +
'      break;\n' +
'    case 202:                       // \'ordered\'\n' +
'      shiftT(202);                  // \'ordered\'\n' +
'      break;\n' +
'    case 206:                       // \'parent\'\n' +
'      shiftT(206);                  // \'parent\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shiftT(212);                  // \'preceding\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shiftT(213);                  // \'preceding-sibling\'\n' +
'      break;\n' +
'    case 218:                       // \'rename\'\n' +
'      shiftT(218);                  // \'rename\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      shiftT(219);                  // \'replace\'\n' +
'      break;\n' +
'    case 220:                       // \'return\'\n' +
'      shiftT(220);                  // \'return\'\n' +
'      break;\n' +
'    case 224:                       // \'satisfies\'\n' +
'      shiftT(224);                  // \'satisfies\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shiftT(229);                  // \'self\'\n' +
'      break;\n' +
'    case 235:                       // \'some\'\n' +
'      shiftT(235);                  // \'some\'\n' +
'      break;\n' +
'    case 236:                       // \'stable\'\n' +
'      shiftT(236);                  // \'stable\'\n' +
'      break;\n' +
'    case 237:                       // \'start\'\n' +
'      shiftT(237);                  // \'start\'\n' +
'      break;\n' +
'    case 248:                       // \'to\'\n' +
'      shiftT(248);                  // \'to\'\n' +
'      break;\n' +
'    case 249:                       // \'treat\'\n' +
'      shiftT(249);                  // \'treat\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      shiftT(250);                  // \'try\'\n' +
'      break;\n' +
'    case 254:                       // \'union\'\n' +
'      shiftT(254);                  // \'union\'\n' +
'      break;\n' +
'    case 256:                       // \'unordered\'\n' +
'      shiftT(256);                  // \'unordered\'\n' +
'      break;\n' +
'    case 260:                       // \'validate\'\n' +
'      shiftT(260);                  // \'validate\'\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      shiftT(266);                  // \'where\'\n' +
'      break;\n' +
'    case 270:                       // \'with\'\n' +
'      shiftT(270);                  // \'with\'\n' +
'      break;\n' +
'    case 274:                       // \'xquery\'\n' +
'      shiftT(274);                  // \'xquery\'\n' +
'      break;\n' +
'    case 72:                        // \'allowing\'\n' +
'      shiftT(72);                   // \'allowing\'\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      break;\n' +
'    case 83:                        // \'base-uri\'\n' +
'      shiftT(83);                   // \'base-uri\'\n' +
'      break;\n' +
'    case 85:                        // \'boundary-space\'\n' +
'      shiftT(85);                   // \'boundary-space\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'      shiftT(86);                   // \'break\'\n' +
'      break;\n' +
'    case 91:                        // \'catch\'\n' +
'      shiftT(91);                   // \'catch\'\n' +
'      break;\n' +
'    case 98:                        // \'construction\'\n' +
'      shiftT(98);                   // \'construction\'\n' +
'      break;\n' +
'    case 101:                       // \'context\'\n' +
'      shiftT(101);                  // \'context\'\n' +
'      break;\n' +
'    case 102:                       // \'continue\'\n' +
'      shiftT(102);                  // \'continue\'\n' +
'      break;\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'      shiftT(104);                  // \'copy-namespaces\'\n' +
'      break;\n' +
'    case 106:                       // \'decimal-format\'\n' +
'      shiftT(106);                  // \'decimal-format\'\n' +
'      break;\n' +
'    case 125:                       // \'encoding\'\n' +
'      shiftT(125);                  // \'encoding\'\n' +
'      break;\n' +
'    case 132:                       // \'exit\'\n' +
'      shiftT(132);                  // \'exit\'\n' +
'      break;\n' +
'    case 133:                       // \'external\'\n' +
'      shiftT(133);                  // \'external\'\n' +
'      break;\n' +
'    case 141:                       // \'ft-option\'\n' +
'      shiftT(141);                  // \'ft-option\'\n' +
'      break;\n' +
'    case 154:                       // \'in\'\n' +
'      shiftT(154);                  // \'in\'\n' +
'      break;\n' +
'    case 155:                       // \'index\'\n' +
'      shiftT(155);                  // \'index\'\n' +
'      break;\n' +
'    case 161:                       // \'integrity\'\n' +
'      shiftT(161);                  // \'integrity\'\n' +
'      break;\n' +
'    case 171:                       // \'lax\'\n' +
'      shiftT(171);                  // \'lax\'\n' +
'      break;\n' +
'    case 192:                       // \'nodes\'\n' +
'      shiftT(192);                  // \'nodes\'\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      shiftT(199);                  // \'option\'\n' +
'      break;\n' +
'    case 203:                       // \'ordering\'\n' +
'      shiftT(203);                  // \'ordering\'\n' +
'      break;\n' +
'    case 222:                       // \'revalidation\'\n' +
'      shiftT(222);                  // \'revalidation\'\n' +
'      break;\n' +
'    case 225:                       // \'schema\'\n' +
'      shiftT(225);                  // \'schema\'\n' +
'      break;\n' +
'    case 228:                       // \'score\'\n' +
'      shiftT(228);                  // \'score\'\n' +
'      break;\n' +
'    case 234:                       // \'sliding\'\n' +
'      shiftT(234);                  // \'sliding\'\n' +
'      break;\n' +
'    case 240:                       // \'strict\'\n' +
'      shiftT(240);                  // \'strict\'\n' +
'      break;\n' +
'    case 251:                       // \'tumbling\'\n' +
'      shiftT(251);                  // \'tumbling\'\n' +
'      break;\n' +
'    case 252:                       // \'type\'\n' +
'      shiftT(252);                  // \'type\'\n' +
'      break;\n' +
'    case 257:                       // \'updating\'\n' +
'      shiftT(257);                  // \'updating\'\n' +
'      break;\n' +
'    case 261:                       // \'value\'\n' +
'      shiftT(261);                  // \'value\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      shiftT(262);                  // \'variable\'\n' +
'      break;\n' +
'    case 263:                       // \'version\'\n' +
'      shiftT(263);                  // \'version\'\n' +
'      break;\n' +
'    case 267:                       // \'while\'\n' +
'      shiftT(267);                  // \'while\'\n' +
'      break;\n' +
'    case 97:                        // \'constraint\'\n' +
'      shiftT(97);                   // \'constraint\'\n' +
'      break;\n' +
'    case 176:                       // \'loop\'\n' +
'      shiftT(176);                  // \'loop\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(221);                  // \'returning\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_NCName()\n' +
'  {\n' +
'    eventHandler.startNonterminal("NCName", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 19:                        // NCName^Token\n' +
'      shift(19);                    // NCName^Token\n' +
'      break;\n' +
'    case 70:                        // \'after\'\n' +
'      shift(70);                    // \'after\'\n' +
'      break;\n' +
'    case 75:                        // \'and\'\n' +
'      shift(75);                    // \'and\'\n' +
'      break;\n' +
'    case 79:                        // \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'      break;\n' +
'    case 80:                        // \'ascending\'\n' +
'      shift(80);                    // \'ascending\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shift(84);                    // \'before\'\n' +
'      break;\n' +
'    case 88:                        // \'case\'\n' +
'      shift(88);                    // \'case\'\n' +
'      break;\n' +
'    case 89:                        // \'cast\'\n' +
'      shift(89);                    // \'cast\'\n' +
'      break;\n' +
'    case 90:                        // \'castable\'\n' +
'      shift(90);                    // \'castable\'\n' +
'      break;\n' +
'    case 94:                        // \'collation\'\n' +
'      shift(94);                    // \'collation\'\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      shift(105);                   // \'count\'\n' +
'      break;\n' +
'    case 109:                       // \'default\'\n' +
'      shift(109);                   // \'default\'\n' +
'      break;\n' +
'    case 113:                       // \'descending\'\n' +
'      shift(113);                   // \'descending\'\n' +
'      break;\n' +
'    case 118:                       // \'div\'\n' +
'      shift(118);                   // \'div\'\n' +
'      break;\n' +
'    case 122:                       // \'else\'\n' +
'      shift(122);                   // \'else\'\n' +
'      break;\n' +
'    case 123:                       // \'empty\'\n' +
'      shift(123);                   // \'empty\'\n' +
'      break;\n' +
'    case 126:                       // \'end\'\n' +
'      shift(126);                   // \'end\'\n' +
'      break;\n' +
'    case 128:                       // \'eq\'\n' +
'      shift(128);                   // \'eq\'\n' +
'      break;\n' +
'    case 131:                       // \'except\'\n' +
'      shift(131);                   // \'except\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      shift(137);                   // \'for\'\n' +
'      break;\n' +
'    case 146:                       // \'ge\'\n' +
'      shift(146);                   // \'ge\'\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      shift(148);                   // \'group\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shift(150);                   // \'gt\'\n' +
'      break;\n' +
'    case 151:                       // \'idiv\'\n' +
'      shift(151);                   // \'idiv\'\n' +
'      break;\n' +
'    case 160:                       // \'instance\'\n' +
'      shift(160);                   // \'instance\'\n' +
'      break;\n' +
'    case 162:                       // \'intersect\'\n' +
'      shift(162);                   // \'intersect\'\n' +
'      break;\n' +
'    case 163:                       // \'into\'\n' +
'      shift(163);                   // \'into\'\n' +
'      break;\n' +
'    case 164:                       // \'is\'\n' +
'      shift(164);                   // \'is\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shift(172);                   // \'le\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      shift(174);                   // \'let\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shift(178);                   // \'lt\'\n' +
'      break;\n' +
'    case 180:                       // \'mod\'\n' +
'      shift(180);                   // \'mod\'\n' +
'      break;\n' +
'    case 181:                       // \'modify\'\n' +
'      shift(181);                   // \'modify\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shift(186);                   // \'ne\'\n' +
'      break;\n' +
'    case 198:                       // \'only\'\n' +
'      shift(198);                   // \'only\'\n' +
'      break;\n' +
'    case 200:                       // \'or\'\n' +
'      shift(200);                   // \'or\'\n' +
'      break;\n' +
'    case 201:                       // \'order\'\n' +
'      shift(201);                   // \'order\'\n' +
'      break;\n' +
'    case 220:                       // \'return\'\n' +
'      shift(220);                   // \'return\'\n' +
'      break;\n' +
'    case 224:                       // \'satisfies\'\n' +
'      shift(224);                   // \'satisfies\'\n' +
'      break;\n' +
'    case 236:                       // \'stable\'\n' +
'      shift(236);                   // \'stable\'\n' +
'      break;\n' +
'    case 237:                       // \'start\'\n' +
'      shift(237);                   // \'start\'\n' +
'      break;\n' +
'    case 248:                       // \'to\'\n' +
'      shift(248);                   // \'to\'\n' +
'      break;\n' +
'    case 249:                       // \'treat\'\n' +
'      shift(249);                   // \'treat\'\n' +
'      break;\n' +
'    case 254:                       // \'union\'\n' +
'      shift(254);                   // \'union\'\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      shift(266);                   // \'where\'\n' +
'      break;\n' +
'    case 270:                       // \'with\'\n' +
'      shift(270);                   // \'with\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shift(73);                    // \'ancestor\'\n' +
'      break;\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'      shift(74);                    // \'ancestor-or-self\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      shift(82);                    // \'attribute\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'      shift(93);                    // \'child\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      shift(96);                    // \'comment\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'      shift(103);                   // \'copy\'\n' +
'      break;\n' +
'    case 108:                       // \'declare\'\n' +
'      shift(108);                   // \'declare\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'      shift(110);                   // \'delete\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shift(111);                   // \'descendant\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shift(112);                   // \'descendant-or-self\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'      shift(119);                   // \'document\'\n' +
'      break;\n' +
'    case 120:                       // \'document-node\'\n' +
'      shift(120);                   // \'document-node\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      shift(121);                   // \'element\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      shift(124);                   // \'empty-sequence\'\n' +
'      break;\n' +
'    case 129:                       // \'every\'\n' +
'      shift(129);                   // \'every\'\n' +
'      break;\n' +
'    case 134:                       // \'first\'\n' +
'      shift(134);                   // \'first\'\n' +
'      break;\n' +
'    case 135:                       // \'following\'\n' +
'      shift(135);                   // \'following\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shift(136);                   // \'following-sibling\'\n' +
'      break;\n' +
'    case 145:                       // \'function\'\n' +
'      shift(145);                   // \'function\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'      shift(152);                   // \'if\'\n' +
'      break;\n' +
'    case 153:                       // \'import\'\n' +
'      shift(153);                   // \'import\'\n' +
'      break;\n' +
'    case 159:                       // \'insert\'\n' +
'      shift(159);                   // \'insert\'\n' +
'      break;\n' +
'    case 165:                       // \'item\'\n' +
'      shift(165);                   // \'item\'\n' +
'      break;\n' +
'    case 170:                       // \'last\'\n' +
'      shift(170);                   // \'last\'\n' +
'      break;\n' +
'    case 182:                       // \'module\'\n' +
'      shift(182);                   // \'module\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      shift(184);                   // \'namespace\'\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      shift(185);                   // \'namespace-node\'\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      shift(191);                   // \'node\'\n' +
'      break;\n' +
'    case 202:                       // \'ordered\'\n' +
'      shift(202);                   // \'ordered\'\n' +
'      break;\n' +
'    case 206:                       // \'parent\'\n' +
'      shift(206);                   // \'parent\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shift(212);                   // \'preceding\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shift(213);                   // \'preceding-sibling\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      shift(216);                   // \'processing-instruction\'\n' +
'      break;\n' +
'    case 218:                       // \'rename\'\n' +
'      shift(218);                   // \'rename\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      shift(219);                   // \'replace\'\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      shift(226);                   // \'schema-attribute\'\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      shift(227);                   // \'schema-element\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shift(229);                   // \'self\'\n' +
'      break;\n' +
'    case 235:                       // \'some\'\n' +
'      shift(235);                   // \'some\'\n' +
'      break;\n' +
'    case 243:                       // \'switch\'\n' +
'      shift(243);                   // \'switch\'\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      shift(244);                   // \'text\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      shift(250);                   // \'try\'\n' +
'      break;\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      shift(253);                   // \'typeswitch\'\n' +
'      break;\n' +
'    case 256:                       // \'unordered\'\n' +
'      shift(256);                   // \'unordered\'\n' +
'      break;\n' +
'    case 260:                       // \'validate\'\n' +
'      shift(260);                   // \'validate\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      shift(262);                   // \'variable\'\n' +
'      break;\n' +
'    case 274:                       // \'xquery\'\n' +
'      shift(274);                   // \'xquery\'\n' +
'      break;\n' +
'    case 72:                        // \'allowing\'\n' +
'      shift(72);                    // \'allowing\'\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shift(81);                    // \'at\'\n' +
'      break;\n' +
'    case 83:                        // \'base-uri\'\n' +
'      shift(83);                    // \'base-uri\'\n' +
'      break;\n' +
'    case 85:                        // \'boundary-space\'\n' +
'      shift(85);                    // \'boundary-space\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'      shift(86);                    // \'break\'\n' +
'      break;\n' +
'    case 91:                        // \'catch\'\n' +
'      shift(91);                    // \'catch\'\n' +
'      break;\n' +
'    case 98:                        // \'construction\'\n' +
'      shift(98);                    // \'construction\'\n' +
'      break;\n' +
'    case 101:                       // \'context\'\n' +
'      shift(101);                   // \'context\'\n' +
'      break;\n' +
'    case 102:                       // \'continue\'\n' +
'      shift(102);                   // \'continue\'\n' +
'      break;\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'      shift(104);                   // \'copy-namespaces\'\n' +
'      break;\n' +
'    case 106:                       // \'decimal-format\'\n' +
'      shift(106);                   // \'decimal-format\'\n' +
'      break;\n' +
'    case 125:                       // \'encoding\'\n' +
'      shift(125);                   // \'encoding\'\n' +
'      break;\n' +
'    case 132:                       // \'exit\'\n' +
'      shift(132);                   // \'exit\'\n' +
'      break;\n' +
'    case 133:                       // \'external\'\n' +
'      shift(133);                   // \'external\'\n' +
'      break;\n' +
'    case 141:                       // \'ft-option\'\n' +
'      shift(141);                   // \'ft-option\'\n' +
'      break;\n' +
'    case 154:                       // \'in\'\n' +
'      shift(154);                   // \'in\'\n' +
'      break;\n' +
'    case 155:                       // \'index\'\n' +
'      shift(155);                   // \'index\'\n' +
'      break;\n' +
'    case 161:                       // \'integrity\'\n' +
'      shift(161);                   // \'integrity\'\n' +
'      break;\n' +
'    case 171:                       // \'lax\'\n' +
'      shift(171);                   // \'lax\'\n' +
'      break;\n' +
'    case 192:                       // \'nodes\'\n' +
'      shift(192);                   // \'nodes\'\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      shift(199);                   // \'option\'\n' +
'      break;\n' +
'    case 203:                       // \'ordering\'\n' +
'      shift(203);                   // \'ordering\'\n' +
'      break;\n' +
'    case 222:                       // \'revalidation\'\n' +
'      shift(222);                   // \'revalidation\'\n' +
'      break;\n' +
'    case 225:                       // \'schema\'\n' +
'      shift(225);                   // \'schema\'\n' +
'      break;\n' +
'    case 228:                       // \'score\'\n' +
'      shift(228);                   // \'score\'\n' +
'      break;\n' +
'    case 234:                       // \'sliding\'\n' +
'      shift(234);                   // \'sliding\'\n' +
'      break;\n' +
'    case 240:                       // \'strict\'\n' +
'      shift(240);                   // \'strict\'\n' +
'      break;\n' +
'    case 251:                       // \'tumbling\'\n' +
'      shift(251);                   // \'tumbling\'\n' +
'      break;\n' +
'    case 252:                       // \'type\'\n' +
'      shift(252);                   // \'type\'\n' +
'      break;\n' +
'    case 257:                       // \'updating\'\n' +
'      shift(257);                   // \'updating\'\n' +
'      break;\n' +
'    case 261:                       // \'value\'\n' +
'      shift(261);                   // \'value\'\n' +
'      break;\n' +
'    case 263:                       // \'version\'\n' +
'      shift(263);                   // \'version\'\n' +
'      break;\n' +
'    case 267:                       // \'while\'\n' +
'      shift(267);                   // \'while\'\n' +
'      break;\n' +
'    case 97:                        // \'constraint\'\n' +
'      shift(97);                    // \'constraint\'\n' +
'      break;\n' +
'    case 176:                       // \'loop\'\n' +
'      shift(176);                   // \'loop\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(221);                   // \'returning\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("NCName", e0);\n' +
'  }\n' +
'\n' +
'  function try_NCName()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 19:                        // NCName^Token\n' +
'      shiftT(19);                   // NCName^Token\n' +
'      break;\n' +
'    case 70:                        // \'after\'\n' +
'      shiftT(70);                   // \'after\'\n' +
'      break;\n' +
'    case 75:                        // \'and\'\n' +
'      shiftT(75);                   // \'and\'\n' +
'      break;\n' +
'    case 79:                        // \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'      break;\n' +
'    case 80:                        // \'ascending\'\n' +
'      shiftT(80);                   // \'ascending\'\n' +
'      break;\n' +
'    case 84:                        // \'before\'\n' +
'      shiftT(84);                   // \'before\'\n' +
'      break;\n' +
'    case 88:                        // \'case\'\n' +
'      shiftT(88);                   // \'case\'\n' +
'      break;\n' +
'    case 89:                        // \'cast\'\n' +
'      shiftT(89);                   // \'cast\'\n' +
'      break;\n' +
'    case 90:                        // \'castable\'\n' +
'      shiftT(90);                   // \'castable\'\n' +
'      break;\n' +
'    case 94:                        // \'collation\'\n' +
'      shiftT(94);                   // \'collation\'\n' +
'      break;\n' +
'    case 105:                       // \'count\'\n' +
'      shiftT(105);                  // \'count\'\n' +
'      break;\n' +
'    case 109:                       // \'default\'\n' +
'      shiftT(109);                  // \'default\'\n' +
'      break;\n' +
'    case 113:                       // \'descending\'\n' +
'      shiftT(113);                  // \'descending\'\n' +
'      break;\n' +
'    case 118:                       // \'div\'\n' +
'      shiftT(118);                  // \'div\'\n' +
'      break;\n' +
'    case 122:                       // \'else\'\n' +
'      shiftT(122);                  // \'else\'\n' +
'      break;\n' +
'    case 123:                       // \'empty\'\n' +
'      shiftT(123);                  // \'empty\'\n' +
'      break;\n' +
'    case 126:                       // \'end\'\n' +
'      shiftT(126);                  // \'end\'\n' +
'      break;\n' +
'    case 128:                       // \'eq\'\n' +
'      shiftT(128);                  // \'eq\'\n' +
'      break;\n' +
'    case 131:                       // \'except\'\n' +
'      shiftT(131);                  // \'except\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      shiftT(137);                  // \'for\'\n' +
'      break;\n' +
'    case 146:                       // \'ge\'\n' +
'      shiftT(146);                  // \'ge\'\n' +
'      break;\n' +
'    case 148:                       // \'group\'\n' +
'      shiftT(148);                  // \'group\'\n' +
'      break;\n' +
'    case 150:                       // \'gt\'\n' +
'      shiftT(150);                  // \'gt\'\n' +
'      break;\n' +
'    case 151:                       // \'idiv\'\n' +
'      shiftT(151);                  // \'idiv\'\n' +
'      break;\n' +
'    case 160:                       // \'instance\'\n' +
'      shiftT(160);                  // \'instance\'\n' +
'      break;\n' +
'    case 162:                       // \'intersect\'\n' +
'      shiftT(162);                  // \'intersect\'\n' +
'      break;\n' +
'    case 163:                       // \'into\'\n' +
'      shiftT(163);                  // \'into\'\n' +
'      break;\n' +
'    case 164:                       // \'is\'\n' +
'      shiftT(164);                  // \'is\'\n' +
'      break;\n' +
'    case 172:                       // \'le\'\n' +
'      shiftT(172);                  // \'le\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      shiftT(174);                  // \'let\'\n' +
'      break;\n' +
'    case 178:                       // \'lt\'\n' +
'      shiftT(178);                  // \'lt\'\n' +
'      break;\n' +
'    case 180:                       // \'mod\'\n' +
'      shiftT(180);                  // \'mod\'\n' +
'      break;\n' +
'    case 181:                       // \'modify\'\n' +
'      shiftT(181);                  // \'modify\'\n' +
'      break;\n' +
'    case 186:                       // \'ne\'\n' +
'      shiftT(186);                  // \'ne\'\n' +
'      break;\n' +
'    case 198:                       // \'only\'\n' +
'      shiftT(198);                  // \'only\'\n' +
'      break;\n' +
'    case 200:                       // \'or\'\n' +
'      shiftT(200);                  // \'or\'\n' +
'      break;\n' +
'    case 201:                       // \'order\'\n' +
'      shiftT(201);                  // \'order\'\n' +
'      break;\n' +
'    case 220:                       // \'return\'\n' +
'      shiftT(220);                  // \'return\'\n' +
'      break;\n' +
'    case 224:                       // \'satisfies\'\n' +
'      shiftT(224);                  // \'satisfies\'\n' +
'      break;\n' +
'    case 236:                       // \'stable\'\n' +
'      shiftT(236);                  // \'stable\'\n' +
'      break;\n' +
'    case 237:                       // \'start\'\n' +
'      shiftT(237);                  // \'start\'\n' +
'      break;\n' +
'    case 248:                       // \'to\'\n' +
'      shiftT(248);                  // \'to\'\n' +
'      break;\n' +
'    case 249:                       // \'treat\'\n' +
'      shiftT(249);                  // \'treat\'\n' +
'      break;\n' +
'    case 254:                       // \'union\'\n' +
'      shiftT(254);                  // \'union\'\n' +
'      break;\n' +
'    case 266:                       // \'where\'\n' +
'      shiftT(266);                  // \'where\'\n' +
'      break;\n' +
'    case 270:                       // \'with\'\n' +
'      shiftT(270);                  // \'with\'\n' +
'      break;\n' +
'    case 73:                        // \'ancestor\'\n' +
'      shiftT(73);                   // \'ancestor\'\n' +
'      break;\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'      shiftT(74);                   // \'ancestor-or-self\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'      shiftT(82);                   // \'attribute\'\n' +
'      break;\n' +
'    case 93:                        // \'child\'\n' +
'      shiftT(93);                   // \'child\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'      shiftT(96);                   // \'comment\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'      shiftT(103);                  // \'copy\'\n' +
'      break;\n' +
'    case 108:                       // \'declare\'\n' +
'      shiftT(108);                  // \'declare\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'      shiftT(110);                  // \'delete\'\n' +
'      break;\n' +
'    case 111:                       // \'descendant\'\n' +
'      shiftT(111);                  // \'descendant\'\n' +
'      break;\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'      shiftT(112);                  // \'descendant-or-self\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'      shiftT(119);                  // \'document\'\n' +
'      break;\n' +
'    case 120:                       // \'document-node\'\n' +
'      shiftT(120);                  // \'document-node\'\n' +
'      break;\n' +
'    case 121:                       // \'element\'\n' +
'      shiftT(121);                  // \'element\'\n' +
'      break;\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'      shiftT(124);                  // \'empty-sequence\'\n' +
'      break;\n' +
'    case 129:                       // \'every\'\n' +
'      shiftT(129);                  // \'every\'\n' +
'      break;\n' +
'    case 134:                       // \'first\'\n' +
'      shiftT(134);                  // \'first\'\n' +
'      break;\n' +
'    case 135:                       // \'following\'\n' +
'      shiftT(135);                  // \'following\'\n' +
'      break;\n' +
'    case 136:                       // \'following-sibling\'\n' +
'      shiftT(136);                  // \'following-sibling\'\n' +
'      break;\n' +
'    case 145:                       // \'function\'\n' +
'      shiftT(145);                  // \'function\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'      shiftT(152);                  // \'if\'\n' +
'      break;\n' +
'    case 153:                       // \'import\'\n' +
'      shiftT(153);                  // \'import\'\n' +
'      break;\n' +
'    case 159:                       // \'insert\'\n' +
'      shiftT(159);                  // \'insert\'\n' +
'      break;\n' +
'    case 165:                       // \'item\'\n' +
'      shiftT(165);                  // \'item\'\n' +
'      break;\n' +
'    case 170:                       // \'last\'\n' +
'      shiftT(170);                  // \'last\'\n' +
'      break;\n' +
'    case 182:                       // \'module\'\n' +
'      shiftT(182);                  // \'module\'\n' +
'      break;\n' +
'    case 184:                       // \'namespace\'\n' +
'      shiftT(184);                  // \'namespace\'\n' +
'      break;\n' +
'    case 185:                       // \'namespace-node\'\n' +
'      shiftT(185);                  // \'namespace-node\'\n' +
'      break;\n' +
'    case 191:                       // \'node\'\n' +
'      shiftT(191);                  // \'node\'\n' +
'      break;\n' +
'    case 202:                       // \'ordered\'\n' +
'      shiftT(202);                  // \'ordered\'\n' +
'      break;\n' +
'    case 206:                       // \'parent\'\n' +
'      shiftT(206);                  // \'parent\'\n' +
'      break;\n' +
'    case 212:                       // \'preceding\'\n' +
'      shiftT(212);                  // \'preceding\'\n' +
'      break;\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'      shiftT(213);                  // \'preceding-sibling\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      shiftT(216);                  // \'processing-instruction\'\n' +
'      break;\n' +
'    case 218:                       // \'rename\'\n' +
'      shiftT(218);                  // \'rename\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      shiftT(219);                  // \'replace\'\n' +
'      break;\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'      shiftT(226);                  // \'schema-attribute\'\n' +
'      break;\n' +
'    case 227:                       // \'schema-element\'\n' +
'      shiftT(227);                  // \'schema-element\'\n' +
'      break;\n' +
'    case 229:                       // \'self\'\n' +
'      shiftT(229);                  // \'self\'\n' +
'      break;\n' +
'    case 235:                       // \'some\'\n' +
'      shiftT(235);                  // \'some\'\n' +
'      break;\n' +
'    case 243:                       // \'switch\'\n' +
'      shiftT(243);                  // \'switch\'\n' +
'      break;\n' +
'    case 244:                       // \'text\'\n' +
'      shiftT(244);                  // \'text\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      shiftT(250);                  // \'try\'\n' +
'      break;\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      shiftT(253);                  // \'typeswitch\'\n' +
'      break;\n' +
'    case 256:                       // \'unordered\'\n' +
'      shiftT(256);                  // \'unordered\'\n' +
'      break;\n' +
'    case 260:                       // \'validate\'\n' +
'      shiftT(260);                  // \'validate\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      shiftT(262);                  // \'variable\'\n' +
'      break;\n' +
'    case 274:                       // \'xquery\'\n' +
'      shiftT(274);                  // \'xquery\'\n' +
'      break;\n' +
'    case 72:                        // \'allowing\'\n' +
'      shiftT(72);                   // \'allowing\'\n' +
'      break;\n' +
'    case 81:                        // \'at\'\n' +
'      shiftT(81);                   // \'at\'\n' +
'      break;\n' +
'    case 83:                        // \'base-uri\'\n' +
'      shiftT(83);                   // \'base-uri\'\n' +
'      break;\n' +
'    case 85:                        // \'boundary-space\'\n' +
'      shiftT(85);                   // \'boundary-space\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'      shiftT(86);                   // \'break\'\n' +
'      break;\n' +
'    case 91:                        // \'catch\'\n' +
'      shiftT(91);                   // \'catch\'\n' +
'      break;\n' +
'    case 98:                        // \'construction\'\n' +
'      shiftT(98);                   // \'construction\'\n' +
'      break;\n' +
'    case 101:                       // \'context\'\n' +
'      shiftT(101);                  // \'context\'\n' +
'      break;\n' +
'    case 102:                       // \'continue\'\n' +
'      shiftT(102);                  // \'continue\'\n' +
'      break;\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'      shiftT(104);                  // \'copy-namespaces\'\n' +
'      break;\n' +
'    case 106:                       // \'decimal-format\'\n' +
'      shiftT(106);                  // \'decimal-format\'\n' +
'      break;\n' +
'    case 125:                       // \'encoding\'\n' +
'      shiftT(125);                  // \'encoding\'\n' +
'      break;\n' +
'    case 132:                       // \'exit\'\n' +
'      shiftT(132);                  // \'exit\'\n' +
'      break;\n' +
'    case 133:                       // \'external\'\n' +
'      shiftT(133);                  // \'external\'\n' +
'      break;\n' +
'    case 141:                       // \'ft-option\'\n' +
'      shiftT(141);                  // \'ft-option\'\n' +
'      break;\n' +
'    case 154:                       // \'in\'\n' +
'      shiftT(154);                  // \'in\'\n' +
'      break;\n' +
'    case 155:                       // \'index\'\n' +
'      shiftT(155);                  // \'index\'\n' +
'      break;\n' +
'    case 161:                       // \'integrity\'\n' +
'      shiftT(161);                  // \'integrity\'\n' +
'      break;\n' +
'    case 171:                       // \'lax\'\n' +
'      shiftT(171);                  // \'lax\'\n' +
'      break;\n' +
'    case 192:                       // \'nodes\'\n' +
'      shiftT(192);                  // \'nodes\'\n' +
'      break;\n' +
'    case 199:                       // \'option\'\n' +
'      shiftT(199);                  // \'option\'\n' +
'      break;\n' +
'    case 203:                       // \'ordering\'\n' +
'      shiftT(203);                  // \'ordering\'\n' +
'      break;\n' +
'    case 222:                       // \'revalidation\'\n' +
'      shiftT(222);                  // \'revalidation\'\n' +
'      break;\n' +
'    case 225:                       // \'schema\'\n' +
'      shiftT(225);                  // \'schema\'\n' +
'      break;\n' +
'    case 228:                       // \'score\'\n' +
'      shiftT(228);                  // \'score\'\n' +
'      break;\n' +
'    case 234:                       // \'sliding\'\n' +
'      shiftT(234);                  // \'sliding\'\n' +
'      break;\n' +
'    case 240:                       // \'strict\'\n' +
'      shiftT(240);                  // \'strict\'\n' +
'      break;\n' +
'    case 251:                       // \'tumbling\'\n' +
'      shiftT(251);                  // \'tumbling\'\n' +
'      break;\n' +
'    case 252:                       // \'type\'\n' +
'      shiftT(252);                  // \'type\'\n' +
'      break;\n' +
'    case 257:                       // \'updating\'\n' +
'      shiftT(257);                  // \'updating\'\n' +
'      break;\n' +
'    case 261:                       // \'value\'\n' +
'      shiftT(261);                  // \'value\'\n' +
'      break;\n' +
'    case 263:                       // \'version\'\n' +
'      shiftT(263);                  // \'version\'\n' +
'      break;\n' +
'    case 267:                       // \'while\'\n' +
'      shiftT(267);                  // \'while\'\n' +
'      break;\n' +
'    case 97:                        // \'constraint\'\n' +
'      shiftT(97);                   // \'constraint\'\n' +
'      break;\n' +
'    case 176:                       // \'loop\'\n' +
'      shiftT(176);                  // \'loop\'\n' +
'      break;\n' +
'    default:\n' +
'      shiftT(221);                  // \'returning\'\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_MainModule()\n' +
'  {\n' +
'    eventHandler.startNonterminal("MainModule", e0);\n' +
'    parse_Prolog();\n' +
'    whitespace();\n' +
'    parse_Program();\n' +
'    eventHandler.endNonterminal("MainModule", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Program()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Program", e0);\n' +
'    parse_StatementsAndOptionalExpr();\n' +
'    eventHandler.endNonterminal("Program", e0);\n' +
'  }\n' +
'\n' +
'  function parse_Statements()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Statements", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 34:                      // \'(\'\n' +
'        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 35:                      // \'(#\'\n' +
'        lookahead2(248);            // EQName^Token | S | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 46:                      // \'/\'\n' +
'        lookahead2W(283);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'!\' | \'!=\' | \'$\' | \'%\' | \'(\' | \'(:\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'.\' | \'..\' | \';\' | \'<\' | \'<!--\' | \'<<\' | \'<=\' | \'<?\' | \'=\' | \'>\' |\n' +
'                                    // \'>=\' | \'>>\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 47:                      // \'//\'\n' +
'        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 54:                      // \'<\'\n' +
'        lookahead2(4);              // QName\n' +
'        break;\n' +
'      case 55:                      // \'<!--\'\n' +
'        lookahead2(1);              // DirCommentContents\n' +
'        break;\n' +
'      case 59:                      // \'<?\'\n' +
'        lookahead2(3);              // PITarget\n' +
'        break;\n' +
'      case 66:                      // \'@\'\n' +
'        lookahead2W(259);           // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 68:                      // \'[\'\n' +
'        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 77:                      // \'append\'\n' +
'        lookahead2W(56);            // S^WS | \'(:\' | \'json\'\n' +
'        break;\n' +
'      case 82:                      // \'attribute\'\n' +
'        lookahead2W(271);           // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' |\n' +
'                                    // \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 121:                     // \'element\'\n' +
'        lookahead2W(268);           // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 132:                     // \'exit\'\n' +
'        lookahead2W(202);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'returning\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 137:                     // \'for\'\n' +
'        lookahead2W(206);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'sliding\' |\n' +
'                                    // \'to\' | \'treat\' | \'tumbling\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 174:                     // \'let\'\n' +
'        lookahead2W(204);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'score\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 218:                     // \'rename\'\n' +
'        lookahead2W(205);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'or\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 219:                     // \'replace\'\n' +
'        lookahead2W(208);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'or\' | \'to\' | \'treat\' | \'union\' | \'value\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 260:                     // \'validate\'\n' +
'        lookahead2W(209);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'lax\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'strict\' | \'to\' | \'treat\' | \'type\' | \'union\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 276:                     // \'{\'\n' +
'        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'        break;\n' +
'      case 278:                     // \'{|\'\n' +
'        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|}\'\n' +
'        break;\n' +
'      case 5:                       // Wildcard\n' +
'      case 45:                      // \'..\'\n' +
'        lookahead2W(186);           // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 31:                      // \'$\'\n' +
'      case 32:                      // \'%\'\n' +
'        lookahead2W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 40:                      // \'+\'\n' +
'      case 42:                      // \'-\'\n' +
'        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 86:                      // \'break\'\n' +
'      case 102:                     // \'continue\'\n' +
'        lookahead2W(200);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'loop\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 110:                     // \'delete\'\n' +
'      case 159:                     // \'insert\'\n' +
'        lookahead2W(207);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'or\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 124:                     // \'empty-sequence\'\n' +
'      case 165:                     // \'item\'\n' +
'        lookahead2W(191);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 184:                     // \'namespace\'\n' +
'      case 216:                     // \'processing-instruction\'\n' +
'        lookahead2W(269);           // NCName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 78:                      // \'array\'\n' +
'      case 167:                     // \'json-item\'\n' +
'      case 194:                     // \'object\'\n' +
'        lookahead2W(22);            // S^WS | \'(\' | \'(:\'\n' +
'        break;\n' +
'      case 103:                     // \'copy\'\n' +
'      case 129:                     // \'every\'\n' +
'      case 235:                     // \'some\'\n' +
'      case 262:                     // \'variable\'\n' +
'        lookahead2W(197);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 8:                       // IntegerLiteral\n' +
'      case 9:                       // DecimalLiteral\n' +
'      case 10:                      // DoubleLiteral\n' +
'      case 11:                      // StringLiteral\n' +
'      case 44:                      // \'.\'\n' +
'        lookahead2W(192);           // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 96:                      // \'comment\'\n' +
'      case 119:                     // \'document\'\n' +
'      case 202:                     // \'ordered\'\n' +
'      case 244:                     // \'text\'\n' +
'      case 250:                     // \'try\'\n' +
'      case 256:                     // \'unordered\'\n' +
'        lookahead2W(203);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 73:                      // \'ancestor\'\n' +
'      case 74:                      // \'ancestor-or-self\'\n' +
'      case 93:                      // \'child\'\n' +
'      case 111:                     // \'descendant\'\n' +
'      case 112:                     // \'descendant-or-self\'\n' +
'      case 135:                     // \'following\'\n' +
'      case 136:                     // \'following-sibling\'\n' +
'      case 206:                     // \'parent\'\n' +
'      case 212:                     // \'preceding\'\n' +
'      case 213:                     // \'preceding-sibling\'\n' +
'      case 229:                     // \'self\'\n' +
'        lookahead2W(198);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 6:                       // EQName^Token\n' +
'      case 70:                      // \'after\'\n' +
'      case 72:                      // \'allowing\'\n' +
'      case 75:                      // \'and\'\n' +
'      case 79:                      // \'as\'\n' +
'      case 80:                      // \'ascending\'\n' +
'      case 81:                      // \'at\'\n' +
'      case 83:                      // \'base-uri\'\n' +
'      case 84:                      // \'before\'\n' +
'      case 85:                      // \'boundary-space\'\n' +
'      case 88:                      // \'case\'\n' +
'      case 89:                      // \'cast\'\n' +
'      case 90:                      // \'castable\'\n' +
'      case 91:                      // \'catch\'\n' +
'      case 94:                      // \'collation\'\n' +
'      case 97:                      // \'constraint\'\n' +
'      case 98:                      // \'construction\'\n' +
'      case 101:                     // \'context\'\n' +
'      case 104:                     // \'copy-namespaces\'\n' +
'      case 105:                     // \'count\'\n' +
'      case 106:                     // \'decimal-format\'\n' +
'      case 108:                     // \'declare\'\n' +
'      case 109:                     // \'default\'\n' +
'      case 113:                     // \'descending\'\n' +
'      case 118:                     // \'div\'\n' +
'      case 120:                     // \'document-node\'\n' +
'      case 122:                     // \'else\'\n' +
'      case 123:                     // \'empty\'\n' +
'      case 125:                     // \'encoding\'\n' +
'      case 126:                     // \'end\'\n' +
'      case 128:                     // \'eq\'\n' +
'      case 131:                     // \'except\'\n' +
'      case 133:                     // \'external\'\n' +
'      case 134:                     // \'first\'\n' +
'      case 141:                     // \'ft-option\'\n' +
'      case 145:                     // \'function\'\n' +
'      case 146:                     // \'ge\'\n' +
'      case 148:                     // \'group\'\n' +
'      case 150:                     // \'gt\'\n' +
'      case 151:                     // \'idiv\'\n' +
'      case 152:                     // \'if\'\n' +
'      case 153:                     // \'import\'\n' +
'      case 154:                     // \'in\'\n' +
'      case 155:                     // \'index\'\n' +
'      case 160:                     // \'instance\'\n' +
'      case 161:                     // \'integrity\'\n' +
'      case 162:                     // \'intersect\'\n' +
'      case 163:                     // \'into\'\n' +
'      case 164:                     // \'is\'\n' +
'      case 170:                     // \'last\'\n' +
'      case 171:                     // \'lax\'\n' +
'      case 172:                     // \'le\'\n' +
'      case 176:                     // \'loop\'\n' +
'      case 178:                     // \'lt\'\n' +
'      case 180:                     // \'mod\'\n' +
'      case 181:                     // \'modify\'\n' +
'      case 182:                     // \'module\'\n' +
'      case 185:                     // \'namespace-node\'\n' +
'      case 186:                     // \'ne\'\n' +
'      case 191:                     // \'node\'\n' +
'      case 192:                     // \'nodes\'\n' +
'      case 198:                     // \'only\'\n' +
'      case 199:                     // \'option\'\n' +
'      case 200:                     // \'or\'\n' +
'      case 201:                     // \'order\'\n' +
'      case 203:                     // \'ordering\'\n' +
'      case 220:                     // \'return\'\n' +
'      case 221:                     // \'returning\'\n' +
'      case 222:                     // \'revalidation\'\n' +
'      case 224:                     // \'satisfies\'\n' +
'      case 225:                     // \'schema\'\n' +
'      case 226:                     // \'schema-attribute\'\n' +
'      case 227:                     // \'schema-element\'\n' +
'      case 228:                     // \'score\'\n' +
'      case 234:                     // \'sliding\'\n' +
'      case 236:                     // \'stable\'\n' +
'      case 237:                     // \'start\'\n' +
'      case 240:                     // \'strict\'\n' +
'      case 243:                     // \'switch\'\n' +
'      case 248:                     // \'to\'\n' +
'      case 249:                     // \'treat\'\n' +
'      case 251:                     // \'tumbling\'\n' +
'      case 252:                     // \'type\'\n' +
'      case 253:                     // \'typeswitch\'\n' +
'      case 254:                     // \'union\'\n' +
'      case 257:                     // \'updating\'\n' +
'      case 261:                     // \'value\'\n' +
'      case 263:                     // \'version\'\n' +
'      case 266:                     // \'where\'\n' +
'      case 267:                     // \'while\'\n' +
'      case 270:                     // \'with\'\n' +
'      case 274:                     // \'xquery\'\n' +
'        lookahead2W(195);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 25                  // EOF\n' +
'       && lk != 282                 // \'}\'\n' +
'       && lk != 12805               // Wildcard EOF\n' +
'       && lk != 12806               // EQName^Token EOF\n' +
'       && lk != 12808               // IntegerLiteral EOF\n' +
'       && lk != 12809               // DecimalLiteral EOF\n' +
'       && lk != 12810               // DoubleLiteral EOF\n' +
'       && lk != 12811               // StringLiteral EOF\n' +
'       && lk != 12844               // \'.\' EOF\n' +
'       && lk != 12845               // \'..\' EOF\n' +
'       && lk != 12846               // \'/\' EOF\n' +
'       && lk != 12870               // \'after\' EOF\n' +
'       && lk != 12872               // \'allowing\' EOF\n' +
'       && lk != 12873               // \'ancestor\' EOF\n' +
'       && lk != 12874               // \'ancestor-or-self\' EOF\n' +
'       && lk != 12875               // \'and\' EOF\n' +
'       && lk != 12879               // \'as\' EOF\n' +
'       && lk != 12880               // \'ascending\' EOF\n' +
'       && lk != 12881               // \'at\' EOF\n' +
'       && lk != 12882               // \'attribute\' EOF\n' +
'       && lk != 12883               // \'base-uri\' EOF\n' +
'       && lk != 12884               // \'before\' EOF\n' +
'       && lk != 12885               // \'boundary-space\' EOF\n' +
'       && lk != 12886               // \'break\' EOF\n' +
'       && lk != 12888               // \'case\' EOF\n' +
'       && lk != 12889               // \'cast\' EOF\n' +
'       && lk != 12890               // \'castable\' EOF\n' +
'       && lk != 12891               // \'catch\' EOF\n' +
'       && lk != 12893               // \'child\' EOF\n' +
'       && lk != 12894               // \'collation\' EOF\n' +
'       && lk != 12896               // \'comment\' EOF\n' +
'       && lk != 12897               // \'constraint\' EOF\n' +
'       && lk != 12898               // \'construction\' EOF\n' +
'       && lk != 12901               // \'context\' EOF\n' +
'       && lk != 12902               // \'continue\' EOF\n' +
'       && lk != 12903               // \'copy\' EOF\n' +
'       && lk != 12904               // \'copy-namespaces\' EOF\n' +
'       && lk != 12905               // \'count\' EOF\n' +
'       && lk != 12906               // \'decimal-format\' EOF\n' +
'       && lk != 12908               // \'declare\' EOF\n' +
'       && lk != 12909               // \'default\' EOF\n' +
'       && lk != 12910               // \'delete\' EOF\n' +
'       && lk != 12911               // \'descendant\' EOF\n' +
'       && lk != 12912               // \'descendant-or-self\' EOF\n' +
'       && lk != 12913               // \'descending\' EOF\n' +
'       && lk != 12918               // \'div\' EOF\n' +
'       && lk != 12919               // \'document\' EOF\n' +
'       && lk != 12920               // \'document-node\' EOF\n' +
'       && lk != 12921               // \'element\' EOF\n' +
'       && lk != 12922               // \'else\' EOF\n' +
'       && lk != 12923               // \'empty\' EOF\n' +
'       && lk != 12924               // \'empty-sequence\' EOF\n' +
'       && lk != 12925               // \'encoding\' EOF\n' +
'       && lk != 12926               // \'end\' EOF\n' +
'       && lk != 12928               // \'eq\' EOF\n' +
'       && lk != 12929               // \'every\' EOF\n' +
'       && lk != 12931               // \'except\' EOF\n' +
'       && lk != 12932               // \'exit\' EOF\n' +
'       && lk != 12933               // \'external\' EOF\n' +
'       && lk != 12934               // \'first\' EOF\n' +
'       && lk != 12935               // \'following\' EOF\n' +
'       && lk != 12936               // \'following-sibling\' EOF\n' +
'       && lk != 12937               // \'for\' EOF\n' +
'       && lk != 12941               // \'ft-option\' EOF\n' +
'       && lk != 12945               // \'function\' EOF\n' +
'       && lk != 12946               // \'ge\' EOF\n' +
'       && lk != 12948               // \'group\' EOF\n' +
'       && lk != 12950               // \'gt\' EOF\n' +
'       && lk != 12951               // \'idiv\' EOF\n' +
'       && lk != 12952               // \'if\' EOF\n' +
'       && lk != 12953               // \'import\' EOF\n' +
'       && lk != 12954               // \'in\' EOF\n' +
'       && lk != 12955               // \'index\' EOF\n' +
'       && lk != 12959               // \'insert\' EOF\n' +
'       && lk != 12960               // \'instance\' EOF\n' +
'       && lk != 12961               // \'integrity\' EOF\n' +
'       && lk != 12962               // \'intersect\' EOF\n' +
'       && lk != 12963               // \'into\' EOF\n' +
'       && lk != 12964               // \'is\' EOF\n' +
'       && lk != 12965               // \'item\' EOF\n' +
'       && lk != 12970               // \'last\' EOF\n' +
'       && lk != 12971               // \'lax\' EOF\n' +
'       && lk != 12972               // \'le\' EOF\n' +
'       && lk != 12974               // \'let\' EOF\n' +
'       && lk != 12976               // \'loop\' EOF\n' +
'       && lk != 12978               // \'lt\' EOF\n' +
'       && lk != 12980               // \'mod\' EOF\n' +
'       && lk != 12981               // \'modify\' EOF\n' +
'       && lk != 12982               // \'module\' EOF\n' +
'       && lk != 12984               // \'namespace\' EOF\n' +
'       && lk != 12985               // \'namespace-node\' EOF\n' +
'       && lk != 12986               // \'ne\' EOF\n' +
'       && lk != 12991               // \'node\' EOF\n' +
'       && lk != 12992               // \'nodes\' EOF\n' +
'       && lk != 12998               // \'only\' EOF\n' +
'       && lk != 12999               // \'option\' EOF\n' +
'       && lk != 13000               // \'or\' EOF\n' +
'       && lk != 13001               // \'order\' EOF\n' +
'       && lk != 13002               // \'ordered\' EOF\n' +
'       && lk != 13003               // \'ordering\' EOF\n' +
'       && lk != 13006               // \'parent\' EOF\n' +
'       && lk != 13012               // \'preceding\' EOF\n' +
'       && lk != 13013               // \'preceding-sibling\' EOF\n' +
'       && lk != 13016               // \'processing-instruction\' EOF\n' +
'       && lk != 13018               // \'rename\' EOF\n' +
'       && lk != 13019               // \'replace\' EOF\n' +
'       && lk != 13020               // \'return\' EOF\n' +
'       && lk != 13021               // \'returning\' EOF\n' +
'       && lk != 13022               // \'revalidation\' EOF\n' +
'       && lk != 13024               // \'satisfies\' EOF\n' +
'       && lk != 13025               // \'schema\' EOF\n' +
'       && lk != 13026               // \'schema-attribute\' EOF\n' +
'       && lk != 13027               // \'schema-element\' EOF\n' +
'       && lk != 13028               // \'score\' EOF\n' +
'       && lk != 13029               // \'self\' EOF\n' +
'       && lk != 13034               // \'sliding\' EOF\n' +
'       && lk != 13035               // \'some\' EOF\n' +
'       && lk != 13036               // \'stable\' EOF\n' +
'       && lk != 13037               // \'start\' EOF\n' +
'       && lk != 13040               // \'strict\' EOF\n' +
'       && lk != 13043               // \'switch\' EOF\n' +
'       && lk != 13044               // \'text\' EOF\n' +
'       && lk != 13048               // \'to\' EOF\n' +
'       && lk != 13049               // \'treat\' EOF\n' +
'       && lk != 13050               // \'try\' EOF\n' +
'       && lk != 13051               // \'tumbling\' EOF\n' +
'       && lk != 13052               // \'type\' EOF\n' +
'       && lk != 13053               // \'typeswitch\' EOF\n' +
'       && lk != 13054               // \'union\' EOF\n' +
'       && lk != 13056               // \'unordered\' EOF\n' +
'       && lk != 13057               // \'updating\' EOF\n' +
'       && lk != 13060               // \'validate\' EOF\n' +
'       && lk != 13061               // \'value\' EOF\n' +
'       && lk != 13062               // \'variable\' EOF\n' +
'       && lk != 13063               // \'version\' EOF\n' +
'       && lk != 13066               // \'where\' EOF\n' +
'       && lk != 13067               // \'while\' EOF\n' +
'       && lk != 13070               // \'with\' EOF\n' +
'       && lk != 13074               // \'xquery\' EOF\n' +
'       && lk != 16134               // \'variable\' \'$\'\n' +
'       && lk != 20997               // Wildcard \',\'\n' +
'       && lk != 20998               // EQName^Token \',\'\n' +
'       && lk != 21000               // IntegerLiteral \',\'\n' +
'       && lk != 21001               // DecimalLiteral \',\'\n' +
'       && lk != 21002               // DoubleLiteral \',\'\n' +
'       && lk != 21003               // StringLiteral \',\'\n' +
'       && lk != 21036               // \'.\' \',\'\n' +
'       && lk != 21037               // \'..\' \',\'\n' +
'       && lk != 21038               // \'/\' \',\'\n' +
'       && lk != 21062               // \'after\' \',\'\n' +
'       && lk != 21064               // \'allowing\' \',\'\n' +
'       && lk != 21065               // \'ancestor\' \',\'\n' +
'       && lk != 21066               // \'ancestor-or-self\' \',\'\n' +
'       && lk != 21067               // \'and\' \',\'\n' +
'       && lk != 21071               // \'as\' \',\'\n' +
'       && lk != 21072               // \'ascending\' \',\'\n' +
'       && lk != 21073               // \'at\' \',\'\n' +
'       && lk != 21074               // \'attribute\' \',\'\n' +
'       && lk != 21075               // \'base-uri\' \',\'\n' +
'       && lk != 21076               // \'before\' \',\'\n' +
'       && lk != 21077               // \'boundary-space\' \',\'\n' +
'       && lk != 21078               // \'break\' \',\'\n' +
'       && lk != 21080               // \'case\' \',\'\n' +
'       && lk != 21081               // \'cast\' \',\'\n' +
'       && lk != 21082               // \'castable\' \',\'\n' +
'       && lk != 21083               // \'catch\' \',\'\n' +
'       && lk != 21085               // \'child\' \',\'\n' +
'       && lk != 21086               // \'collation\' \',\'\n' +
'       && lk != 21088               // \'comment\' \',\'\n' +
'       && lk != 21089               // \'constraint\' \',\'\n' +
'       && lk != 21090               // \'construction\' \',\'\n' +
'       && lk != 21093               // \'context\' \',\'\n' +
'       && lk != 21094               // \'continue\' \',\'\n' +
'       && lk != 21095               // \'copy\' \',\'\n' +
'       && lk != 21096               // \'copy-namespaces\' \',\'\n' +
'       && lk != 21097               // \'count\' \',\'\n' +
'       && lk != 21098               // \'decimal-format\' \',\'\n' +
'       && lk != 21100               // \'declare\' \',\'\n' +
'       && lk != 21101               // \'default\' \',\'\n' +
'       && lk != 21102               // \'delete\' \',\'\n' +
'       && lk != 21103               // \'descendant\' \',\'\n' +
'       && lk != 21104               // \'descendant-or-self\' \',\'\n' +
'       && lk != 21105               // \'descending\' \',\'\n' +
'       && lk != 21110               // \'div\' \',\'\n' +
'       && lk != 21111               // \'document\' \',\'\n' +
'       && lk != 21112               // \'document-node\' \',\'\n' +
'       && lk != 21113               // \'element\' \',\'\n' +
'       && lk != 21114               // \'else\' \',\'\n' +
'       && lk != 21115               // \'empty\' \',\'\n' +
'       && lk != 21116               // \'empty-sequence\' \',\'\n' +
'       && lk != 21117               // \'encoding\' \',\'\n' +
'       && lk != 21118               // \'end\' \',\'\n' +
'       && lk != 21120               // \'eq\' \',\'\n' +
'       && lk != 21121               // \'every\' \',\'\n' +
'       && lk != 21123               // \'except\' \',\'\n' +
'       && lk != 21124               // \'exit\' \',\'\n' +
'       && lk != 21125               // \'external\' \',\'\n' +
'       && lk != 21126               // \'first\' \',\'\n' +
'       && lk != 21127               // \'following\' \',\'\n' +
'       && lk != 21128               // \'following-sibling\' \',\'\n' +
'       && lk != 21129               // \'for\' \',\'\n' +
'       && lk != 21133               // \'ft-option\' \',\'\n' +
'       && lk != 21137               // \'function\' \',\'\n' +
'       && lk != 21138               // \'ge\' \',\'\n' +
'       && lk != 21140               // \'group\' \',\'\n' +
'       && lk != 21142               // \'gt\' \',\'\n' +
'       && lk != 21143               // \'idiv\' \',\'\n' +
'       && lk != 21144               // \'if\' \',\'\n' +
'       && lk != 21145               // \'import\' \',\'\n' +
'       && lk != 21146               // \'in\' \',\'\n' +
'       && lk != 21147               // \'index\' \',\'\n' +
'       && lk != 21151               // \'insert\' \',\'\n' +
'       && lk != 21152               // \'instance\' \',\'\n' +
'       && lk != 21153               // \'integrity\' \',\'\n' +
'       && lk != 21154               // \'intersect\' \',\'\n' +
'       && lk != 21155               // \'into\' \',\'\n' +
'       && lk != 21156               // \'is\' \',\'\n' +
'       && lk != 21157               // \'item\' \',\'\n' +
'       && lk != 21162               // \'last\' \',\'\n' +
'       && lk != 21163               // \'lax\' \',\'\n' +
'       && lk != 21164               // \'le\' \',\'\n' +
'       && lk != 21166               // \'let\' \',\'\n' +
'       && lk != 21168               // \'loop\' \',\'\n' +
'       && lk != 21170               // \'lt\' \',\'\n' +
'       && lk != 21172               // \'mod\' \',\'\n' +
'       && lk != 21173               // \'modify\' \',\'\n' +
'       && lk != 21174               // \'module\' \',\'\n' +
'       && lk != 21176               // \'namespace\' \',\'\n' +
'       && lk != 21177               // \'namespace-node\' \',\'\n' +
'       && lk != 21178               // \'ne\' \',\'\n' +
'       && lk != 21183               // \'node\' \',\'\n' +
'       && lk != 21184               // \'nodes\' \',\'\n' +
'       && lk != 21190               // \'only\' \',\'\n' +
'       && lk != 21191               // \'option\' \',\'\n' +
'       && lk != 21192               // \'or\' \',\'\n' +
'       && lk != 21193               // \'order\' \',\'\n' +
'       && lk != 21194               // \'ordered\' \',\'\n' +
'       && lk != 21195               // \'ordering\' \',\'\n' +
'       && lk != 21198               // \'parent\' \',\'\n' +
'       && lk != 21204               // \'preceding\' \',\'\n' +
'       && lk != 21205               // \'preceding-sibling\' \',\'\n' +
'       && lk != 21208               // \'processing-instruction\' \',\'\n' +
'       && lk != 21210               // \'rename\' \',\'\n' +
'       && lk != 21211               // \'replace\' \',\'\n' +
'       && lk != 21212               // \'return\' \',\'\n' +
'       && lk != 21213               // \'returning\' \',\'\n' +
'       && lk != 21214               // \'revalidation\' \',\'\n' +
'       && lk != 21216               // \'satisfies\' \',\'\n' +
'       && lk != 21217               // \'schema\' \',\'\n' +
'       && lk != 21218               // \'schema-attribute\' \',\'\n' +
'       && lk != 21219               // \'schema-element\' \',\'\n' +
'       && lk != 21220               // \'score\' \',\'\n' +
'       && lk != 21221               // \'self\' \',\'\n' +
'       && lk != 21226               // \'sliding\' \',\'\n' +
'       && lk != 21227               // \'some\' \',\'\n' +
'       && lk != 21228               // \'stable\' \',\'\n' +
'       && lk != 21229               // \'start\' \',\'\n' +
'       && lk != 21232               // \'strict\' \',\'\n' +
'       && lk != 21235               // \'switch\' \',\'\n' +
'       && lk != 21236               // \'text\' \',\'\n' +
'       && lk != 21240               // \'to\' \',\'\n' +
'       && lk != 21241               // \'treat\' \',\'\n' +
'       && lk != 21242               // \'try\' \',\'\n' +
'       && lk != 21243               // \'tumbling\' \',\'\n' +
'       && lk != 21244               // \'type\' \',\'\n' +
'       && lk != 21245               // \'typeswitch\' \',\'\n' +
'       && lk != 21246               // \'union\' \',\'\n' +
'       && lk != 21248               // \'unordered\' \',\'\n' +
'       && lk != 21249               // \'updating\' \',\'\n' +
'       && lk != 21252               // \'validate\' \',\'\n' +
'       && lk != 21253               // \'value\' \',\'\n' +
'       && lk != 21254               // \'variable\' \',\'\n' +
'       && lk != 21255               // \'version\' \',\'\n' +
'       && lk != 21258               // \'where\' \',\'\n' +
'       && lk != 21259               // \'while\' \',\'\n' +
'       && lk != 21262               // \'with\' \',\'\n' +
'       && lk != 21266               // \'xquery\' \',\'\n' +
'       && lk != 27141               // Wildcard \';\'\n' +
'       && lk != 27142               // EQName^Token \';\'\n' +
'       && lk != 27144               // IntegerLiteral \';\'\n' +
'       && lk != 27145               // DecimalLiteral \';\'\n' +
'       && lk != 27146               // DoubleLiteral \';\'\n' +
'       && lk != 27147               // StringLiteral \';\'\n' +
'       && lk != 27180               // \'.\' \';\'\n' +
'       && lk != 27181               // \'..\' \';\'\n' +
'       && lk != 27182               // \'/\' \';\'\n' +
'       && lk != 27206               // \'after\' \';\'\n' +
'       && lk != 27208               // \'allowing\' \';\'\n' +
'       && lk != 27209               // \'ancestor\' \';\'\n' +
'       && lk != 27210               // \'ancestor-or-self\' \';\'\n' +
'       && lk != 27211               // \'and\' \';\'\n' +
'       && lk != 27215               // \'as\' \';\'\n' +
'       && lk != 27216               // \'ascending\' \';\'\n' +
'       && lk != 27217               // \'at\' \';\'\n' +
'       && lk != 27218               // \'attribute\' \';\'\n' +
'       && lk != 27219               // \'base-uri\' \';\'\n' +
'       && lk != 27220               // \'before\' \';\'\n' +
'       && lk != 27221               // \'boundary-space\' \';\'\n' +
'       && lk != 27222               // \'break\' \';\'\n' +
'       && lk != 27224               // \'case\' \';\'\n' +
'       && lk != 27225               // \'cast\' \';\'\n' +
'       && lk != 27226               // \'castable\' \';\'\n' +
'       && lk != 27227               // \'catch\' \';\'\n' +
'       && lk != 27229               // \'child\' \';\'\n' +
'       && lk != 27230               // \'collation\' \';\'\n' +
'       && lk != 27232               // \'comment\' \';\'\n' +
'       && lk != 27233               // \'constraint\' \';\'\n' +
'       && lk != 27234               // \'construction\' \';\'\n' +
'       && lk != 27237               // \'context\' \';\'\n' +
'       && lk != 27238               // \'continue\' \';\'\n' +
'       && lk != 27239               // \'copy\' \';\'\n' +
'       && lk != 27240               // \'copy-namespaces\' \';\'\n' +
'       && lk != 27241               // \'count\' \';\'\n' +
'       && lk != 27242               // \'decimal-format\' \';\'\n' +
'       && lk != 27244               // \'declare\' \';\'\n' +
'       && lk != 27245               // \'default\' \';\'\n' +
'       && lk != 27246               // \'delete\' \';\'\n' +
'       && lk != 27247               // \'descendant\' \';\'\n' +
'       && lk != 27248               // \'descendant-or-self\' \';\'\n' +
'       && lk != 27249               // \'descending\' \';\'\n' +
'       && lk != 27254               // \'div\' \';\'\n' +
'       && lk != 27255               // \'document\' \';\'\n' +
'       && lk != 27256               // \'document-node\' \';\'\n' +
'       && lk != 27257               // \'element\' \';\'\n' +
'       && lk != 27258               // \'else\' \';\'\n' +
'       && lk != 27259               // \'empty\' \';\'\n' +
'       && lk != 27260               // \'empty-sequence\' \';\'\n' +
'       && lk != 27261               // \'encoding\' \';\'\n' +
'       && lk != 27262               // \'end\' \';\'\n' +
'       && lk != 27264               // \'eq\' \';\'\n' +
'       && lk != 27265               // \'every\' \';\'\n' +
'       && lk != 27267               // \'except\' \';\'\n' +
'       && lk != 27268               // \'exit\' \';\'\n' +
'       && lk != 27269               // \'external\' \';\'\n' +
'       && lk != 27270               // \'first\' \';\'\n' +
'       && lk != 27271               // \'following\' \';\'\n' +
'       && lk != 27272               // \'following-sibling\' \';\'\n' +
'       && lk != 27273               // \'for\' \';\'\n' +
'       && lk != 27277               // \'ft-option\' \';\'\n' +
'       && lk != 27281               // \'function\' \';\'\n' +
'       && lk != 27282               // \'ge\' \';\'\n' +
'       && lk != 27284               // \'group\' \';\'\n' +
'       && lk != 27286               // \'gt\' \';\'\n' +
'       && lk != 27287               // \'idiv\' \';\'\n' +
'       && lk != 27288               // \'if\' \';\'\n' +
'       && lk != 27289               // \'import\' \';\'\n' +
'       && lk != 27290               // \'in\' \';\'\n' +
'       && lk != 27291               // \'index\' \';\'\n' +
'       && lk != 27295               // \'insert\' \';\'\n' +
'       && lk != 27296               // \'instance\' \';\'\n' +
'       && lk != 27297               // \'integrity\' \';\'\n' +
'       && lk != 27298               // \'intersect\' \';\'\n' +
'       && lk != 27299               // \'into\' \';\'\n' +
'       && lk != 27300               // \'is\' \';\'\n' +
'       && lk != 27301               // \'item\' \';\'\n' +
'       && lk != 27306               // \'last\' \';\'\n' +
'       && lk != 27307               // \'lax\' \';\'\n' +
'       && lk != 27308               // \'le\' \';\'\n' +
'       && lk != 27310               // \'let\' \';\'\n' +
'       && lk != 27312               // \'loop\' \';\'\n' +
'       && lk != 27314               // \'lt\' \';\'\n' +
'       && lk != 27316               // \'mod\' \';\'\n' +
'       && lk != 27317               // \'modify\' \';\'\n' +
'       && lk != 27318               // \'module\' \';\'\n' +
'       && lk != 27320               // \'namespace\' \';\'\n' +
'       && lk != 27321               // \'namespace-node\' \';\'\n' +
'       && lk != 27322               // \'ne\' \';\'\n' +
'       && lk != 27327               // \'node\' \';\'\n' +
'       && lk != 27328               // \'nodes\' \';\'\n' +
'       && lk != 27334               // \'only\' \';\'\n' +
'       && lk != 27335               // \'option\' \';\'\n' +
'       && lk != 27336               // \'or\' \';\'\n' +
'       && lk != 27337               // \'order\' \';\'\n' +
'       && lk != 27338               // \'ordered\' \';\'\n' +
'       && lk != 27339               // \'ordering\' \';\'\n' +
'       && lk != 27342               // \'parent\' \';\'\n' +
'       && lk != 27348               // \'preceding\' \';\'\n' +
'       && lk != 27349               // \'preceding-sibling\' \';\'\n' +
'       && lk != 27352               // \'processing-instruction\' \';\'\n' +
'       && lk != 27354               // \'rename\' \';\'\n' +
'       && lk != 27355               // \'replace\' \';\'\n' +
'       && lk != 27356               // \'return\' \';\'\n' +
'       && lk != 27357               // \'returning\' \';\'\n' +
'       && lk != 27358               // \'revalidation\' \';\'\n' +
'       && lk != 27360               // \'satisfies\' \';\'\n' +
'       && lk != 27361               // \'schema\' \';\'\n' +
'       && lk != 27362               // \'schema-attribute\' \';\'\n' +
'       && lk != 27363               // \'schema-element\' \';\'\n' +
'       && lk != 27364               // \'score\' \';\'\n' +
'       && lk != 27365               // \'self\' \';\'\n' +
'       && lk != 27370               // \'sliding\' \';\'\n' +
'       && lk != 27371               // \'some\' \';\'\n' +
'       && lk != 27372               // \'stable\' \';\'\n' +
'       && lk != 27373               // \'start\' \';\'\n' +
'       && lk != 27376               // \'strict\' \';\'\n' +
'       && lk != 27379               // \'switch\' \';\'\n' +
'       && lk != 27380               // \'text\' \';\'\n' +
'       && lk != 27384               // \'to\' \';\'\n' +
'       && lk != 27385               // \'treat\' \';\'\n' +
'       && lk != 27386               // \'try\' \';\'\n' +
'       && lk != 27387               // \'tumbling\' \';\'\n' +
'       && lk != 27388               // \'type\' \';\'\n' +
'       && lk != 27389               // \'typeswitch\' \';\'\n' +
'       && lk != 27390               // \'union\' \';\'\n' +
'       && lk != 27392               // \'unordered\' \';\'\n' +
'       && lk != 27393               // \'updating\' \';\'\n' +
'       && lk != 27396               // \'validate\' \';\'\n' +
'       && lk != 27397               // \'value\' \';\'\n' +
'       && lk != 27398               // \'variable\' \';\'\n' +
'       && lk != 27399               // \'version\' \';\'\n' +
'       && lk != 27402               // \'where\' \';\'\n' +
'       && lk != 27403               // \'while\' \';\'\n' +
'       && lk != 27406               // \'with\' \';\'\n' +
'       && lk != 27410               // \'xquery\' \';\'\n' +
'       && lk != 90198               // \'break\' \'loop\'\n' +
'       && lk != 90214               // \'continue\' \'loop\'\n' +
'       && lk != 113284              // \'exit\' \'returning\'\n' +
'       && lk != 144389              // Wildcard \'}\'\n' +
'       && lk != 144390              // EQName^Token \'}\'\n' +
'       && lk != 144392              // IntegerLiteral \'}\'\n' +
'       && lk != 144393              // DecimalLiteral \'}\'\n' +
'       && lk != 144394              // DoubleLiteral \'}\'\n' +
'       && lk != 144395              // StringLiteral \'}\'\n' +
'       && lk != 144428              // \'.\' \'}\'\n' +
'       && lk != 144429              // \'..\' \'}\'\n' +
'       && lk != 144430              // \'/\' \'}\'\n' +
'       && lk != 144454              // \'after\' \'}\'\n' +
'       && lk != 144456              // \'allowing\' \'}\'\n' +
'       && lk != 144457              // \'ancestor\' \'}\'\n' +
'       && lk != 144458              // \'ancestor-or-self\' \'}\'\n' +
'       && lk != 144459              // \'and\' \'}\'\n' +
'       && lk != 144463              // \'as\' \'}\'\n' +
'       && lk != 144464              // \'ascending\' \'}\'\n' +
'       && lk != 144465              // \'at\' \'}\'\n' +
'       && lk != 144466              // \'attribute\' \'}\'\n' +
'       && lk != 144467              // \'base-uri\' \'}\'\n' +
'       && lk != 144468              // \'before\' \'}\'\n' +
'       && lk != 144469              // \'boundary-space\' \'}\'\n' +
'       && lk != 144470              // \'break\' \'}\'\n' +
'       && lk != 144472              // \'case\' \'}\'\n' +
'       && lk != 144473              // \'cast\' \'}\'\n' +
'       && lk != 144474              // \'castable\' \'}\'\n' +
'       && lk != 144475              // \'catch\' \'}\'\n' +
'       && lk != 144477              // \'child\' \'}\'\n' +
'       && lk != 144478              // \'collation\' \'}\'\n' +
'       && lk != 144480              // \'comment\' \'}\'\n' +
'       && lk != 144481              // \'constraint\' \'}\'\n' +
'       && lk != 144482              // \'construction\' \'}\'\n' +
'       && lk != 144485              // \'context\' \'}\'\n' +
'       && lk != 144486              // \'continue\' \'}\'\n' +
'       && lk != 144487              // \'copy\' \'}\'\n' +
'       && lk != 144488              // \'copy-namespaces\' \'}\'\n' +
'       && lk != 144489              // \'count\' \'}\'\n' +
'       && lk != 144490              // \'decimal-format\' \'}\'\n' +
'       && lk != 144492              // \'declare\' \'}\'\n' +
'       && lk != 144493              // \'default\' \'}\'\n' +
'       && lk != 144494              // \'delete\' \'}\'\n' +
'       && lk != 144495              // \'descendant\' \'}\'\n' +
'       && lk != 144496              // \'descendant-or-self\' \'}\'\n' +
'       && lk != 144497              // \'descending\' \'}\'\n' +
'       && lk != 144502              // \'div\' \'}\'\n' +
'       && lk != 144503              // \'document\' \'}\'\n' +
'       && lk != 144504              // \'document-node\' \'}\'\n' +
'       && lk != 144505              // \'element\' \'}\'\n' +
'       && lk != 144506              // \'else\' \'}\'\n' +
'       && lk != 144507              // \'empty\' \'}\'\n' +
'       && lk != 144508              // \'empty-sequence\' \'}\'\n' +
'       && lk != 144509              // \'encoding\' \'}\'\n' +
'       && lk != 144510              // \'end\' \'}\'\n' +
'       && lk != 144512              // \'eq\' \'}\'\n' +
'       && lk != 144513              // \'every\' \'}\'\n' +
'       && lk != 144515              // \'except\' \'}\'\n' +
'       && lk != 144516              // \'exit\' \'}\'\n' +
'       && lk != 144517              // \'external\' \'}\'\n' +
'       && lk != 144518              // \'first\' \'}\'\n' +
'       && lk != 144519              // \'following\' \'}\'\n' +
'       && lk != 144520              // \'following-sibling\' \'}\'\n' +
'       && lk != 144521              // \'for\' \'}\'\n' +
'       && lk != 144525              // \'ft-option\' \'}\'\n' +
'       && lk != 144529              // \'function\' \'}\'\n' +
'       && lk != 144530              // \'ge\' \'}\'\n' +
'       && lk != 144532              // \'group\' \'}\'\n' +
'       && lk != 144534              // \'gt\' \'}\'\n' +
'       && lk != 144535              // \'idiv\' \'}\'\n' +
'       && lk != 144536              // \'if\' \'}\'\n' +
'       && lk != 144537              // \'import\' \'}\'\n' +
'       && lk != 144538              // \'in\' \'}\'\n' +
'       && lk != 144539              // \'index\' \'}\'\n' +
'       && lk != 144543              // \'insert\' \'}\'\n' +
'       && lk != 144544              // \'instance\' \'}\'\n' +
'       && lk != 144545              // \'integrity\' \'}\'\n' +
'       && lk != 144546              // \'intersect\' \'}\'\n' +
'       && lk != 144547              // \'into\' \'}\'\n' +
'       && lk != 144548              // \'is\' \'}\'\n' +
'       && lk != 144549              // \'item\' \'}\'\n' +
'       && lk != 144554              // \'last\' \'}\'\n' +
'       && lk != 144555              // \'lax\' \'}\'\n' +
'       && lk != 144556              // \'le\' \'}\'\n' +
'       && lk != 144558              // \'let\' \'}\'\n' +
'       && lk != 144560              // \'loop\' \'}\'\n' +
'       && lk != 144562              // \'lt\' \'}\'\n' +
'       && lk != 144564              // \'mod\' \'}\'\n' +
'       && lk != 144565              // \'modify\' \'}\'\n' +
'       && lk != 144566              // \'module\' \'}\'\n' +
'       && lk != 144568              // \'namespace\' \'}\'\n' +
'       && lk != 144569              // \'namespace-node\' \'}\'\n' +
'       && lk != 144570              // \'ne\' \'}\'\n' +
'       && lk != 144575              // \'node\' \'}\'\n' +
'       && lk != 144576              // \'nodes\' \'}\'\n' +
'       && lk != 144582              // \'only\' \'}\'\n' +
'       && lk != 144583              // \'option\' \'}\'\n' +
'       && lk != 144584              // \'or\' \'}\'\n' +
'       && lk != 144585              // \'order\' \'}\'\n' +
'       && lk != 144586              // \'ordered\' \'}\'\n' +
'       && lk != 144587              // \'ordering\' \'}\'\n' +
'       && lk != 144590              // \'parent\' \'}\'\n' +
'       && lk != 144596              // \'preceding\' \'}\'\n' +
'       && lk != 144597              // \'preceding-sibling\' \'}\'\n' +
'       && lk != 144600              // \'processing-instruction\' \'}\'\n' +
'       && lk != 144602              // \'rename\' \'}\'\n' +
'       && lk != 144603              // \'replace\' \'}\'\n' +
'       && lk != 144604              // \'return\' \'}\'\n' +
'       && lk != 144605              // \'returning\' \'}\'\n' +
'       && lk != 144606              // \'revalidation\' \'}\'\n' +
'       && lk != 144608              // \'satisfies\' \'}\'\n' +
'       && lk != 144609              // \'schema\' \'}\'\n' +
'       && lk != 144610              // \'schema-attribute\' \'}\'\n' +
'       && lk != 144611              // \'schema-element\' \'}\'\n' +
'       && lk != 144612              // \'score\' \'}\'\n' +
'       && lk != 144613              // \'self\' \'}\'\n' +
'       && lk != 144618              // \'sliding\' \'}\'\n' +
'       && lk != 144619              // \'some\' \'}\'\n' +
'       && lk != 144620              // \'stable\' \'}\'\n' +
'       && lk != 144621              // \'start\' \'}\'\n' +
'       && lk != 144624              // \'strict\' \'}\'\n' +
'       && lk != 144627              // \'switch\' \'}\'\n' +
'       && lk != 144628              // \'text\' \'}\'\n' +
'       && lk != 144632              // \'to\' \'}\'\n' +
'       && lk != 144633              // \'treat\' \'}\'\n' +
'       && lk != 144634              // \'try\' \'}\'\n' +
'       && lk != 144635              // \'tumbling\' \'}\'\n' +
'       && lk != 144636              // \'type\' \'}\'\n' +
'       && lk != 144637              // \'typeswitch\' \'}\'\n' +
'       && lk != 144638              // \'union\' \'}\'\n' +
'       && lk != 144640              // \'unordered\' \'}\'\n' +
'       && lk != 144641              // \'updating\' \'}\'\n' +
'       && lk != 144644              // \'validate\' \'}\'\n' +
'       && lk != 144645              // \'value\' \'}\'\n' +
'       && lk != 144646              // \'variable\' \'}\'\n' +
'       && lk != 144647              // \'version\' \'}\'\n' +
'       && lk != 144650              // \'where\' \'}\'\n' +
'       && lk != 144651              // \'while\' \'}\'\n' +
'       && lk != 144654              // \'with\' \'}\'\n' +
'       && lk != 144658)             // \'xquery\' \'}\'\n' +
'      {\n' +
'        lk = memoized(6, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            try_Statement();\n' +
'            lk = -1;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            lk = -2;\n' +
'          }\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(6, e0, lk);\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 16134               // \'variable\' \'$\'\n' +
'       && lk != 27141               // Wildcard \';\'\n' +
'       && lk != 27142               // EQName^Token \';\'\n' +
'       && lk != 27144               // IntegerLiteral \';\'\n' +
'       && lk != 27145               // DecimalLiteral \';\'\n' +
'       && lk != 27146               // DoubleLiteral \';\'\n' +
'       && lk != 27147               // StringLiteral \';\'\n' +
'       && lk != 27180               // \'.\' \';\'\n' +
'       && lk != 27181               // \'..\' \';\'\n' +
'       && lk != 27182               // \'/\' \';\'\n' +
'       && lk != 27206               // \'after\' \';\'\n' +
'       && lk != 27208               // \'allowing\' \';\'\n' +
'       && lk != 27209               // \'ancestor\' \';\'\n' +
'       && lk != 27210               // \'ancestor-or-self\' \';\'\n' +
'       && lk != 27211               // \'and\' \';\'\n' +
'       && lk != 27215               // \'as\' \';\'\n' +
'       && lk != 27216               // \'ascending\' \';\'\n' +
'       && lk != 27217               // \'at\' \';\'\n' +
'       && lk != 27218               // \'attribute\' \';\'\n' +
'       && lk != 27219               // \'base-uri\' \';\'\n' +
'       && lk != 27220               // \'before\' \';\'\n' +
'       && lk != 27221               // \'boundary-space\' \';\'\n' +
'       && lk != 27222               // \'break\' \';\'\n' +
'       && lk != 27224               // \'case\' \';\'\n' +
'       && lk != 27225               // \'cast\' \';\'\n' +
'       && lk != 27226               // \'castable\' \';\'\n' +
'       && lk != 27227               // \'catch\' \';\'\n' +
'       && lk != 27229               // \'child\' \';\'\n' +
'       && lk != 27230               // \'collation\' \';\'\n' +
'       && lk != 27232               // \'comment\' \';\'\n' +
'       && lk != 27233               // \'constraint\' \';\'\n' +
'       && lk != 27234               // \'construction\' \';\'\n' +
'       && lk != 27237               // \'context\' \';\'\n' +
'       && lk != 27238               // \'continue\' \';\'\n' +
'       && lk != 27239               // \'copy\' \';\'\n' +
'       && lk != 27240               // \'copy-namespaces\' \';\'\n' +
'       && lk != 27241               // \'count\' \';\'\n' +
'       && lk != 27242               // \'decimal-format\' \';\'\n' +
'       && lk != 27244               // \'declare\' \';\'\n' +
'       && lk != 27245               // \'default\' \';\'\n' +
'       && lk != 27246               // \'delete\' \';\'\n' +
'       && lk != 27247               // \'descendant\' \';\'\n' +
'       && lk != 27248               // \'descendant-or-self\' \';\'\n' +
'       && lk != 27249               // \'descending\' \';\'\n' +
'       && lk != 27254               // \'div\' \';\'\n' +
'       && lk != 27255               // \'document\' \';\'\n' +
'       && lk != 27256               // \'document-node\' \';\'\n' +
'       && lk != 27257               // \'element\' \';\'\n' +
'       && lk != 27258               // \'else\' \';\'\n' +
'       && lk != 27259               // \'empty\' \';\'\n' +
'       && lk != 27260               // \'empty-sequence\' \';\'\n' +
'       && lk != 27261               // \'encoding\' \';\'\n' +
'       && lk != 27262               // \'end\' \';\'\n' +
'       && lk != 27264               // \'eq\' \';\'\n' +
'       && lk != 27265               // \'every\' \';\'\n' +
'       && lk != 27267               // \'except\' \';\'\n' +
'       && lk != 27268               // \'exit\' \';\'\n' +
'       && lk != 27269               // \'external\' \';\'\n' +
'       && lk != 27270               // \'first\' \';\'\n' +
'       && lk != 27271               // \'following\' \';\'\n' +
'       && lk != 27272               // \'following-sibling\' \';\'\n' +
'       && lk != 27273               // \'for\' \';\'\n' +
'       && lk != 27277               // \'ft-option\' \';\'\n' +
'       && lk != 27281               // \'function\' \';\'\n' +
'       && lk != 27282               // \'ge\' \';\'\n' +
'       && lk != 27284               // \'group\' \';\'\n' +
'       && lk != 27286               // \'gt\' \';\'\n' +
'       && lk != 27287               // \'idiv\' \';\'\n' +
'       && lk != 27288               // \'if\' \';\'\n' +
'       && lk != 27289               // \'import\' \';\'\n' +
'       && lk != 27290               // \'in\' \';\'\n' +
'       && lk != 27291               // \'index\' \';\'\n' +
'       && lk != 27295               // \'insert\' \';\'\n' +
'       && lk != 27296               // \'instance\' \';\'\n' +
'       && lk != 27297               // \'integrity\' \';\'\n' +
'       && lk != 27298               // \'intersect\' \';\'\n' +
'       && lk != 27299               // \'into\' \';\'\n' +
'       && lk != 27300               // \'is\' \';\'\n' +
'       && lk != 27301               // \'item\' \';\'\n' +
'       && lk != 27306               // \'last\' \';\'\n' +
'       && lk != 27307               // \'lax\' \';\'\n' +
'       && lk != 27308               // \'le\' \';\'\n' +
'       && lk != 27310               // \'let\' \';\'\n' +
'       && lk != 27312               // \'loop\' \';\'\n' +
'       && lk != 27314               // \'lt\' \';\'\n' +
'       && lk != 27316               // \'mod\' \';\'\n' +
'       && lk != 27317               // \'modify\' \';\'\n' +
'       && lk != 27318               // \'module\' \';\'\n' +
'       && lk != 27320               // \'namespace\' \';\'\n' +
'       && lk != 27321               // \'namespace-node\' \';\'\n' +
'       && lk != 27322               // \'ne\' \';\'\n' +
'       && lk != 27327               // \'node\' \';\'\n' +
'       && lk != 27328               // \'nodes\' \';\'\n' +
'       && lk != 27334               // \'only\' \';\'\n' +
'       && lk != 27335               // \'option\' \';\'\n' +
'       && lk != 27336               // \'or\' \';\'\n' +
'       && lk != 27337               // \'order\' \';\'\n' +
'       && lk != 27338               // \'ordered\' \';\'\n' +
'       && lk != 27339               // \'ordering\' \';\'\n' +
'       && lk != 27342               // \'parent\' \';\'\n' +
'       && lk != 27348               // \'preceding\' \';\'\n' +
'       && lk != 27349               // \'preceding-sibling\' \';\'\n' +
'       && lk != 27352               // \'processing-instruction\' \';\'\n' +
'       && lk != 27354               // \'rename\' \';\'\n' +
'       && lk != 27355               // \'replace\' \';\'\n' +
'       && lk != 27356               // \'return\' \';\'\n' +
'       && lk != 27357               // \'returning\' \';\'\n' +
'       && lk != 27358               // \'revalidation\' \';\'\n' +
'       && lk != 27360               // \'satisfies\' \';\'\n' +
'       && lk != 27361               // \'schema\' \';\'\n' +
'       && lk != 27362               // \'schema-attribute\' \';\'\n' +
'       && lk != 27363               // \'schema-element\' \';\'\n' +
'       && lk != 27364               // \'score\' \';\'\n' +
'       && lk != 27365               // \'self\' \';\'\n' +
'       && lk != 27370               // \'sliding\' \';\'\n' +
'       && lk != 27371               // \'some\' \';\'\n' +
'       && lk != 27372               // \'stable\' \';\'\n' +
'       && lk != 27373               // \'start\' \';\'\n' +
'       && lk != 27376               // \'strict\' \';\'\n' +
'       && lk != 27379               // \'switch\' \';\'\n' +
'       && lk != 27380               // \'text\' \';\'\n' +
'       && lk != 27384               // \'to\' \';\'\n' +
'       && lk != 27385               // \'treat\' \';\'\n' +
'       && lk != 27386               // \'try\' \';\'\n' +
'       && lk != 27387               // \'tumbling\' \';\'\n' +
'       && lk != 27388               // \'type\' \';\'\n' +
'       && lk != 27389               // \'typeswitch\' \';\'\n' +
'       && lk != 27390               // \'union\' \';\'\n' +
'       && lk != 27392               // \'unordered\' \';\'\n' +
'       && lk != 27393               // \'updating\' \';\'\n' +
'       && lk != 27396               // \'validate\' \';\'\n' +
'       && lk != 27397               // \'value\' \';\'\n' +
'       && lk != 27398               // \'variable\' \';\'\n' +
'       && lk != 27399               // \'version\' \';\'\n' +
'       && lk != 27402               // \'where\' \';\'\n' +
'       && lk != 27403               // \'while\' \';\'\n' +
'       && lk != 27406               // \'with\' \';\'\n' +
'       && lk != 27410               // \'xquery\' \';\'\n' +
'       && lk != 90198               // \'break\' \'loop\'\n' +
'       && lk != 90214               // \'continue\' \'loop\'\n' +
'       && lk != 113284)             // \'exit\' \'returning\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_Statement();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Statements", e0);\n' +
'  }\n' +
'\n' +
'  function try_Statements()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 34:                      // \'(\'\n' +
'        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \')\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 35:                      // \'(#\'\n' +
'        lookahead2(248);            // EQName^Token | S | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' |\n' +
'                                    // \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' |\n' +
'                                    // \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' |\n' +
'                                    // \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' | \'rename\' |\n' +
'                                    // \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 46:                      // \'/\'\n' +
'        lookahead2W(283);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'!\' | \'!=\' | \'$\' | \'%\' | \'(\' | \'(:\' | \'*\' | \'+\' |\n' +
'                                    // \',\' | \'-\' | \'.\' | \'..\' | \';\' | \'<\' | \'<!--\' | \'<<\' | \'<=\' | \'<?\' | \'=\' | \'>\' |\n' +
'                                    // \'>=\' | \'>>\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'contains\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 47:                      // \'//\'\n' +
'        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'..\' | \'<\' | \'<!--\' |\n' +
'                                    // \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' |\n' +
'                                    // \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' |\n' +
'                                    // \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' |\n' +
'                                    // \'child\' | \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'context\' |\n' +
'                                    // \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' |\n' +
'                                    // \'declare\' | \'default\' | \'delete\' | \'descendant\' | \'descendant-or-self\' |\n' +
'                                    // \'descending\' | \'div\' | \'document\' | \'document-node\' | \'element\' | \'else\' |\n' +
'                                    // \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' |\n' +
'                                    // \'exit\' | \'external\' | \'first\' | \'following\' | \'following-sibling\' | \'for\' |\n' +
'                                    // \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' |\n' +
'                                    // \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' | \'intersect\' | \'into\' |\n' +
'                                    // \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'object\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' |\n' +
'                                    // \'ordering\' | \'parent\' | \'preceding\' | \'preceding-sibling\' |\n' +
'                                    // \'processing-instruction\' | \'rename\' | \'replace\' | \'return\' | \'returning\' |\n' +
'                                    // \'revalidation\' | \'satisfies\' | \'schema\' | \'schema-attribute\' | \'schema-element\' |\n' +
'                                    // \'score\' | \'self\' | \'sliding\' | \'some\' | \'stable\' | \'start\' | \'strict\' |\n' +
'                                    // \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' |\n' +
'                                    // \'union\' | \'unordered\' | \'updating\' | \'validate\' | \'value\' | \'variable\' |\n' +
'                                    // \'version\' | \'where\' | \'while\' | \'with\' | \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 54:                      // \'<\'\n' +
'        lookahead2(4);              // QName\n' +
'        break;\n' +
'      case 55:                      // \'<!--\'\n' +
'        lookahead2(1);              // DirCommentContents\n' +
'        break;\n' +
'      case 59:                      // \'<?\'\n' +
'        lookahead2(3);              // PITarget\n' +
'        break;\n' +
'      case 66:                      // \'@\'\n' +
'        lookahead2W(259);           // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 68:                      // \'[\'\n' +
'        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 77:                      // \'append\'\n' +
'        lookahead2W(56);            // S^WS | \'(:\' | \'json\'\n' +
'        break;\n' +
'      case 82:                      // \'attribute\'\n' +
'        lookahead2W(271);           // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' |\n' +
'                                    // \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 121:                     // \'element\'\n' +
'        lookahead2W(268);           // EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 132:                     // \'exit\'\n' +
'        lookahead2W(202);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'returning\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 137:                     // \'for\'\n' +
'        lookahead2W(206);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'sliding\' |\n' +
'                                    // \'to\' | \'treat\' | \'tumbling\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 174:                     // \'let\'\n' +
'        lookahead2W(204);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'score\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 218:                     // \'rename\'\n' +
'        lookahead2W(205);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'or\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 219:                     // \'replace\'\n' +
'        lookahead2W(208);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'or\' | \'to\' | \'treat\' | \'union\' | \'value\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 260:                     // \'validate\'\n' +
'        lookahead2W(209);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'lax\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'strict\' | \'to\' | \'treat\' | \'type\' | \'union\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 276:                     // \'{\'\n' +
'        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'        break;\n' +
'      case 278:                     // \'{|\'\n' +
'        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|}\'\n' +
'        break;\n' +
'      case 5:                       // Wildcard\n' +
'      case 45:                      // \'..\'\n' +
'        lookahead2W(186);           // S^WS | EOF | \'!\' | \'!=\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 31:                      // \'$\'\n' +
'      case 32:                      // \'%\'\n' +
'        lookahead2W(249);           // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'        break;\n' +
'      case 40:                      // \'+\'\n' +
'      case 42:                      // \'-\'\n' +
'        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        break;\n' +
'      case 86:                      // \'break\'\n' +
'      case 102:                     // \'continue\'\n' +
'        lookahead2W(200);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'loop\' | \'lt\' | \'mod\' | \'ne\' | \'or\' |\n' +
'                                    // \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 110:                     // \'delete\'\n' +
'      case 159:                     // \'insert\'\n' +
'        lookahead2W(207);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'json\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'node\' |\n' +
'                                    // \'nodes\' | \'or\' | \'to\' | \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 124:                     // \'empty-sequence\'\n' +
'      case 165:                     // \'item\'\n' +
'        lookahead2W(191);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 184:                     // \'namespace\'\n' +
'      case 216:                     // \'processing-instruction\'\n' +
'        lookahead2W(269);           // NCName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' |\n' +
'                                    // \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'contains\' | \'context\' | \'continue\' |\n' +
'                                    // \'copy\' | \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 78:                      // \'array\'\n' +
'      case 167:                     // \'json-item\'\n' +
'      case 194:                     // \'object\'\n' +
'        lookahead2W(22);            // S^WS | \'(\' | \'(:\'\n' +
'        break;\n' +
'      case 103:                     // \'copy\'\n' +
'      case 129:                     // \'every\'\n' +
'      case 235:                     // \'some\'\n' +
'      case 262:                     // \'variable\'\n' +
'        lookahead2W(197);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 8:                       // IntegerLiteral\n' +
'      case 9:                       // DecimalLiteral\n' +
'      case 10:                      // DoubleLiteral\n' +
'      case 11:                      // StringLiteral\n' +
'      case 44:                      // \'.\'\n' +
'        lookahead2W(192);           // S^WS | EOF | \'!\' | \'!=\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 96:                      // \'comment\'\n' +
'      case 119:                     // \'document\'\n' +
'      case 202:                     // \'ordered\'\n' +
'      case 244:                     // \'text\'\n' +
'      case 250:                     // \'try\'\n' +
'      case 256:                     // \'unordered\'\n' +
'        lookahead2W(203);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'{\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 73:                      // \'ancestor\'\n' +
'      case 74:                      // \'ancestor-or-self\'\n' +
'      case 93:                      // \'child\'\n' +
'      case 111:                     // \'descendant\'\n' +
'      case 112:                     // \'descendant-or-self\'\n' +
'      case 135:                     // \'following\'\n' +
'      case 136:                     // \'following-sibling\'\n' +
'      case 206:                     // \'parent\'\n' +
'      case 212:                     // \'preceding\'\n' +
'      case 213:                     // \'preceding-sibling\'\n' +
'      case 229:                     // \'self\'\n' +
'        lookahead2W(198);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \'::\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      case 6:                       // EQName^Token\n' +
'      case 70:                      // \'after\'\n' +
'      case 72:                      // \'allowing\'\n' +
'      case 75:                      // \'and\'\n' +
'      case 79:                      // \'as\'\n' +
'      case 80:                      // \'ascending\'\n' +
'      case 81:                      // \'at\'\n' +
'      case 83:                      // \'base-uri\'\n' +
'      case 84:                      // \'before\'\n' +
'      case 85:                      // \'boundary-space\'\n' +
'      case 88:                      // \'case\'\n' +
'      case 89:                      // \'cast\'\n' +
'      case 90:                      // \'castable\'\n' +
'      case 91:                      // \'catch\'\n' +
'      case 94:                      // \'collation\'\n' +
'      case 97:                      // \'constraint\'\n' +
'      case 98:                      // \'construction\'\n' +
'      case 101:                     // \'context\'\n' +
'      case 104:                     // \'copy-namespaces\'\n' +
'      case 105:                     // \'count\'\n' +
'      case 106:                     // \'decimal-format\'\n' +
'      case 108:                     // \'declare\'\n' +
'      case 109:                     // \'default\'\n' +
'      case 113:                     // \'descending\'\n' +
'      case 118:                     // \'div\'\n' +
'      case 120:                     // \'document-node\'\n' +
'      case 122:                     // \'else\'\n' +
'      case 123:                     // \'empty\'\n' +
'      case 125:                     // \'encoding\'\n' +
'      case 126:                     // \'end\'\n' +
'      case 128:                     // \'eq\'\n' +
'      case 131:                     // \'except\'\n' +
'      case 133:                     // \'external\'\n' +
'      case 134:                     // \'first\'\n' +
'      case 141:                     // \'ft-option\'\n' +
'      case 145:                     // \'function\'\n' +
'      case 146:                     // \'ge\'\n' +
'      case 148:                     // \'group\'\n' +
'      case 150:                     // \'gt\'\n' +
'      case 151:                     // \'idiv\'\n' +
'      case 152:                     // \'if\'\n' +
'      case 153:                     // \'import\'\n' +
'      case 154:                     // \'in\'\n' +
'      case 155:                     // \'index\'\n' +
'      case 160:                     // \'instance\'\n' +
'      case 161:                     // \'integrity\'\n' +
'      case 162:                     // \'intersect\'\n' +
'      case 163:                     // \'into\'\n' +
'      case 164:                     // \'is\'\n' +
'      case 170:                     // \'last\'\n' +
'      case 171:                     // \'lax\'\n' +
'      case 172:                     // \'le\'\n' +
'      case 176:                     // \'loop\'\n' +
'      case 178:                     // \'lt\'\n' +
'      case 180:                     // \'mod\'\n' +
'      case 181:                     // \'modify\'\n' +
'      case 182:                     // \'module\'\n' +
'      case 185:                     // \'namespace-node\'\n' +
'      case 186:                     // \'ne\'\n' +
'      case 191:                     // \'node\'\n' +
'      case 192:                     // \'nodes\'\n' +
'      case 198:                     // \'only\'\n' +
'      case 199:                     // \'option\'\n' +
'      case 200:                     // \'or\'\n' +
'      case 201:                     // \'order\'\n' +
'      case 203:                     // \'ordering\'\n' +
'      case 220:                     // \'return\'\n' +
'      case 221:                     // \'returning\'\n' +
'      case 222:                     // \'revalidation\'\n' +
'      case 224:                     // \'satisfies\'\n' +
'      case 225:                     // \'schema\'\n' +
'      case 226:                     // \'schema-attribute\'\n' +
'      case 227:                     // \'schema-element\'\n' +
'      case 228:                     // \'score\'\n' +
'      case 234:                     // \'sliding\'\n' +
'      case 236:                     // \'stable\'\n' +
'      case 237:                     // \'start\'\n' +
'      case 240:                     // \'strict\'\n' +
'      case 243:                     // \'switch\'\n' +
'      case 248:                     // \'to\'\n' +
'      case 249:                     // \'treat\'\n' +
'      case 251:                     // \'tumbling\'\n' +
'      case 252:                     // \'type\'\n' +
'      case 253:                     // \'typeswitch\'\n' +
'      case 254:                     // \'union\'\n' +
'      case 257:                     // \'updating\'\n' +
'      case 261:                     // \'value\'\n' +
'      case 263:                     // \'version\'\n' +
'      case 266:                     // \'where\'\n' +
'      case 267:                     // \'while\'\n' +
'      case 270:                     // \'with\'\n' +
'      case 274:                     // \'xquery\'\n' +
'        lookahead2W(195);           // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' | \'//\' |\n' +
'                                    // \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' |\n' +
'                                    // \'castable\' | \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' |\n' +
'                                    // \'instance\' | \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk != 25                  // EOF\n' +
'       && lk != 282                 // \'}\'\n' +
'       && lk != 12805               // Wildcard EOF\n' +
'       && lk != 12806               // EQName^Token EOF\n' +
'       && lk != 12808               // IntegerLiteral EOF\n' +
'       && lk != 12809               // DecimalLiteral EOF\n' +
'       && lk != 12810               // DoubleLiteral EOF\n' +
'       && lk != 12811               // StringLiteral EOF\n' +
'       && lk != 12844               // \'.\' EOF\n' +
'       && lk != 12845               // \'..\' EOF\n' +
'       && lk != 12846               // \'/\' EOF\n' +
'       && lk != 12870               // \'after\' EOF\n' +
'       && lk != 12872               // \'allowing\' EOF\n' +
'       && lk != 12873               // \'ancestor\' EOF\n' +
'       && lk != 12874               // \'ancestor-or-self\' EOF\n' +
'       && lk != 12875               // \'and\' EOF\n' +
'       && lk != 12879               // \'as\' EOF\n' +
'       && lk != 12880               // \'ascending\' EOF\n' +
'       && lk != 12881               // \'at\' EOF\n' +
'       && lk != 12882               // \'attribute\' EOF\n' +
'       && lk != 12883               // \'base-uri\' EOF\n' +
'       && lk != 12884               // \'before\' EOF\n' +
'       && lk != 12885               // \'boundary-space\' EOF\n' +
'       && lk != 12886               // \'break\' EOF\n' +
'       && lk != 12888               // \'case\' EOF\n' +
'       && lk != 12889               // \'cast\' EOF\n' +
'       && lk != 12890               // \'castable\' EOF\n' +
'       && lk != 12891               // \'catch\' EOF\n' +
'       && lk != 12893               // \'child\' EOF\n' +
'       && lk != 12894               // \'collation\' EOF\n' +
'       && lk != 12896               // \'comment\' EOF\n' +
'       && lk != 12897               // \'constraint\' EOF\n' +
'       && lk != 12898               // \'construction\' EOF\n' +
'       && lk != 12901               // \'context\' EOF\n' +
'       && lk != 12902               // \'continue\' EOF\n' +
'       && lk != 12903               // \'copy\' EOF\n' +
'       && lk != 12904               // \'copy-namespaces\' EOF\n' +
'       && lk != 12905               // \'count\' EOF\n' +
'       && lk != 12906               // \'decimal-format\' EOF\n' +
'       && lk != 12908               // \'declare\' EOF\n' +
'       && lk != 12909               // \'default\' EOF\n' +
'       && lk != 12910               // \'delete\' EOF\n' +
'       && lk != 12911               // \'descendant\' EOF\n' +
'       && lk != 12912               // \'descendant-or-self\' EOF\n' +
'       && lk != 12913               // \'descending\' EOF\n' +
'       && lk != 12918               // \'div\' EOF\n' +
'       && lk != 12919               // \'document\' EOF\n' +
'       && lk != 12920               // \'document-node\' EOF\n' +
'       && lk != 12921               // \'element\' EOF\n' +
'       && lk != 12922               // \'else\' EOF\n' +
'       && lk != 12923               // \'empty\' EOF\n' +
'       && lk != 12924               // \'empty-sequence\' EOF\n' +
'       && lk != 12925               // \'encoding\' EOF\n' +
'       && lk != 12926               // \'end\' EOF\n' +
'       && lk != 12928               // \'eq\' EOF\n' +
'       && lk != 12929               // \'every\' EOF\n' +
'       && lk != 12931               // \'except\' EOF\n' +
'       && lk != 12932               // \'exit\' EOF\n' +
'       && lk != 12933               // \'external\' EOF\n' +
'       && lk != 12934               // \'first\' EOF\n' +
'       && lk != 12935               // \'following\' EOF\n' +
'       && lk != 12936               // \'following-sibling\' EOF\n' +
'       && lk != 12937               // \'for\' EOF\n' +
'       && lk != 12941               // \'ft-option\' EOF\n' +
'       && lk != 12945               // \'function\' EOF\n' +
'       && lk != 12946               // \'ge\' EOF\n' +
'       && lk != 12948               // \'group\' EOF\n' +
'       && lk != 12950               // \'gt\' EOF\n' +
'       && lk != 12951               // \'idiv\' EOF\n' +
'       && lk != 12952               // \'if\' EOF\n' +
'       && lk != 12953               // \'import\' EOF\n' +
'       && lk != 12954               // \'in\' EOF\n' +
'       && lk != 12955               // \'index\' EOF\n' +
'       && lk != 12959               // \'insert\' EOF\n' +
'       && lk != 12960               // \'instance\' EOF\n' +
'       && lk != 12961               // \'integrity\' EOF\n' +
'       && lk != 12962               // \'intersect\' EOF\n' +
'       && lk != 12963               // \'into\' EOF\n' +
'       && lk != 12964               // \'is\' EOF\n' +
'       && lk != 12965               // \'item\' EOF\n' +
'       && lk != 12970               // \'last\' EOF\n' +
'       && lk != 12971               // \'lax\' EOF\n' +
'       && lk != 12972               // \'le\' EOF\n' +
'       && lk != 12974               // \'let\' EOF\n' +
'       && lk != 12976               // \'loop\' EOF\n' +
'       && lk != 12978               // \'lt\' EOF\n' +
'       && lk != 12980               // \'mod\' EOF\n' +
'       && lk != 12981               // \'modify\' EOF\n' +
'       && lk != 12982               // \'module\' EOF\n' +
'       && lk != 12984               // \'namespace\' EOF\n' +
'       && lk != 12985               // \'namespace-node\' EOF\n' +
'       && lk != 12986               // \'ne\' EOF\n' +
'       && lk != 12991               // \'node\' EOF\n' +
'       && lk != 12992               // \'nodes\' EOF\n' +
'       && lk != 12998               // \'only\' EOF\n' +
'       && lk != 12999               // \'option\' EOF\n' +
'       && lk != 13000               // \'or\' EOF\n' +
'       && lk != 13001               // \'order\' EOF\n' +
'       && lk != 13002               // \'ordered\' EOF\n' +
'       && lk != 13003               // \'ordering\' EOF\n' +
'       && lk != 13006               // \'parent\' EOF\n' +
'       && lk != 13012               // \'preceding\' EOF\n' +
'       && lk != 13013               // \'preceding-sibling\' EOF\n' +
'       && lk != 13016               // \'processing-instruction\' EOF\n' +
'       && lk != 13018               // \'rename\' EOF\n' +
'       && lk != 13019               // \'replace\' EOF\n' +
'       && lk != 13020               // \'return\' EOF\n' +
'       && lk != 13021               // \'returning\' EOF\n' +
'       && lk != 13022               // \'revalidation\' EOF\n' +
'       && lk != 13024               // \'satisfies\' EOF\n' +
'       && lk != 13025               // \'schema\' EOF\n' +
'       && lk != 13026               // \'schema-attribute\' EOF\n' +
'       && lk != 13027               // \'schema-element\' EOF\n' +
'       && lk != 13028               // \'score\' EOF\n' +
'       && lk != 13029               // \'self\' EOF\n' +
'       && lk != 13034               // \'sliding\' EOF\n' +
'       && lk != 13035               // \'some\' EOF\n' +
'       && lk != 13036               // \'stable\' EOF\n' +
'       && lk != 13037               // \'start\' EOF\n' +
'       && lk != 13040               // \'strict\' EOF\n' +
'       && lk != 13043               // \'switch\' EOF\n' +
'       && lk != 13044               // \'text\' EOF\n' +
'       && lk != 13048               // \'to\' EOF\n' +
'       && lk != 13049               // \'treat\' EOF\n' +
'       && lk != 13050               // \'try\' EOF\n' +
'       && lk != 13051               // \'tumbling\' EOF\n' +
'       && lk != 13052               // \'type\' EOF\n' +
'       && lk != 13053               // \'typeswitch\' EOF\n' +
'       && lk != 13054               // \'union\' EOF\n' +
'       && lk != 13056               // \'unordered\' EOF\n' +
'       && lk != 13057               // \'updating\' EOF\n' +
'       && lk != 13060               // \'validate\' EOF\n' +
'       && lk != 13061               // \'value\' EOF\n' +
'       && lk != 13062               // \'variable\' EOF\n' +
'       && lk != 13063               // \'version\' EOF\n' +
'       && lk != 13066               // \'where\' EOF\n' +
'       && lk != 13067               // \'while\' EOF\n' +
'       && lk != 13070               // \'with\' EOF\n' +
'       && lk != 13074               // \'xquery\' EOF\n' +
'       && lk != 16134               // \'variable\' \'$\'\n' +
'       && lk != 20997               // Wildcard \',\'\n' +
'       && lk != 20998               // EQName^Token \',\'\n' +
'       && lk != 21000               // IntegerLiteral \',\'\n' +
'       && lk != 21001               // DecimalLiteral \',\'\n' +
'       && lk != 21002               // DoubleLiteral \',\'\n' +
'       && lk != 21003               // StringLiteral \',\'\n' +
'       && lk != 21036               // \'.\' \',\'\n' +
'       && lk != 21037               // \'..\' \',\'\n' +
'       && lk != 21038               // \'/\' \',\'\n' +
'       && lk != 21062               // \'after\' \',\'\n' +
'       && lk != 21064               // \'allowing\' \',\'\n' +
'       && lk != 21065               // \'ancestor\' \',\'\n' +
'       && lk != 21066               // \'ancestor-or-self\' \',\'\n' +
'       && lk != 21067               // \'and\' \',\'\n' +
'       && lk != 21071               // \'as\' \',\'\n' +
'       && lk != 21072               // \'ascending\' \',\'\n' +
'       && lk != 21073               // \'at\' \',\'\n' +
'       && lk != 21074               // \'attribute\' \',\'\n' +
'       && lk != 21075               // \'base-uri\' \',\'\n' +
'       && lk != 21076               // \'before\' \',\'\n' +
'       && lk != 21077               // \'boundary-space\' \',\'\n' +
'       && lk != 21078               // \'break\' \',\'\n' +
'       && lk != 21080               // \'case\' \',\'\n' +
'       && lk != 21081               // \'cast\' \',\'\n' +
'       && lk != 21082               // \'castable\' \',\'\n' +
'       && lk != 21083               // \'catch\' \',\'\n' +
'       && lk != 21085               // \'child\' \',\'\n' +
'       && lk != 21086               // \'collation\' \',\'\n' +
'       && lk != 21088               // \'comment\' \',\'\n' +
'       && lk != 21089               // \'constraint\' \',\'\n' +
'       && lk != 21090               // \'construction\' \',\'\n' +
'       && lk != 21093               // \'context\' \',\'\n' +
'       && lk != 21094               // \'continue\' \',\'\n' +
'       && lk != 21095               // \'copy\' \',\'\n' +
'       && lk != 21096               // \'copy-namespaces\' \',\'\n' +
'       && lk != 21097               // \'count\' \',\'\n' +
'       && lk != 21098               // \'decimal-format\' \',\'\n' +
'       && lk != 21100               // \'declare\' \',\'\n' +
'       && lk != 21101               // \'default\' \',\'\n' +
'       && lk != 21102               // \'delete\' \',\'\n' +
'       && lk != 21103               // \'descendant\' \',\'\n' +
'       && lk != 21104               // \'descendant-or-self\' \',\'\n' +
'       && lk != 21105               // \'descending\' \',\'\n' +
'       && lk != 21110               // \'div\' \',\'\n' +
'       && lk != 21111               // \'document\' \',\'\n' +
'       && lk != 21112               // \'document-node\' \',\'\n' +
'       && lk != 21113               // \'element\' \',\'\n' +
'       && lk != 21114               // \'else\' \',\'\n' +
'       && lk != 21115               // \'empty\' \',\'\n' +
'       && lk != 21116               // \'empty-sequence\' \',\'\n' +
'       && lk != 21117               // \'encoding\' \',\'\n' +
'       && lk != 21118               // \'end\' \',\'\n' +
'       && lk != 21120               // \'eq\' \',\'\n' +
'       && lk != 21121               // \'every\' \',\'\n' +
'       && lk != 21123               // \'except\' \',\'\n' +
'       && lk != 21124               // \'exit\' \',\'\n' +
'       && lk != 21125               // \'external\' \',\'\n' +
'       && lk != 21126               // \'first\' \',\'\n' +
'       && lk != 21127               // \'following\' \',\'\n' +
'       && lk != 21128               // \'following-sibling\' \',\'\n' +
'       && lk != 21129               // \'for\' \',\'\n' +
'       && lk != 21133               // \'ft-option\' \',\'\n' +
'       && lk != 21137               // \'function\' \',\'\n' +
'       && lk != 21138               // \'ge\' \',\'\n' +
'       && lk != 21140               // \'group\' \',\'\n' +
'       && lk != 21142               // \'gt\' \',\'\n' +
'       && lk != 21143               // \'idiv\' \',\'\n' +
'       && lk != 21144               // \'if\' \',\'\n' +
'       && lk != 21145               // \'import\' \',\'\n' +
'       && lk != 21146               // \'in\' \',\'\n' +
'       && lk != 21147               // \'index\' \',\'\n' +
'       && lk != 21151               // \'insert\' \',\'\n' +
'       && lk != 21152               // \'instance\' \',\'\n' +
'       && lk != 21153               // \'integrity\' \',\'\n' +
'       && lk != 21154               // \'intersect\' \',\'\n' +
'       && lk != 21155               // \'into\' \',\'\n' +
'       && lk != 21156               // \'is\' \',\'\n' +
'       && lk != 21157               // \'item\' \',\'\n' +
'       && lk != 21162               // \'last\' \',\'\n' +
'       && lk != 21163               // \'lax\' \',\'\n' +
'       && lk != 21164               // \'le\' \',\'\n' +
'       && lk != 21166               // \'let\' \',\'\n' +
'       && lk != 21168               // \'loop\' \',\'\n' +
'       && lk != 21170               // \'lt\' \',\'\n' +
'       && lk != 21172               // \'mod\' \',\'\n' +
'       && lk != 21173               // \'modify\' \',\'\n' +
'       && lk != 21174               // \'module\' \',\'\n' +
'       && lk != 21176               // \'namespace\' \',\'\n' +
'       && lk != 21177               // \'namespace-node\' \',\'\n' +
'       && lk != 21178               // \'ne\' \',\'\n' +
'       && lk != 21183               // \'node\' \',\'\n' +
'       && lk != 21184               // \'nodes\' \',\'\n' +
'       && lk != 21190               // \'only\' \',\'\n' +
'       && lk != 21191               // \'option\' \',\'\n' +
'       && lk != 21192               // \'or\' \',\'\n' +
'       && lk != 21193               // \'order\' \',\'\n' +
'       && lk != 21194               // \'ordered\' \',\'\n' +
'       && lk != 21195               // \'ordering\' \',\'\n' +
'       && lk != 21198               // \'parent\' \',\'\n' +
'       && lk != 21204               // \'preceding\' \',\'\n' +
'       && lk != 21205               // \'preceding-sibling\' \',\'\n' +
'       && lk != 21208               // \'processing-instruction\' \',\'\n' +
'       && lk != 21210               // \'rename\' \',\'\n' +
'       && lk != 21211               // \'replace\' \',\'\n' +
'       && lk != 21212               // \'return\' \',\'\n' +
'       && lk != 21213               // \'returning\' \',\'\n' +
'       && lk != 21214               // \'revalidation\' \',\'\n' +
'       && lk != 21216               // \'satisfies\' \',\'\n' +
'       && lk != 21217               // \'schema\' \',\'\n' +
'       && lk != 21218               // \'schema-attribute\' \',\'\n' +
'       && lk != 21219               // \'schema-element\' \',\'\n' +
'       && lk != 21220               // \'score\' \',\'\n' +
'       && lk != 21221               // \'self\' \',\'\n' +
'       && lk != 21226               // \'sliding\' \',\'\n' +
'       && lk != 21227               // \'some\' \',\'\n' +
'       && lk != 21228               // \'stable\' \',\'\n' +
'       && lk != 21229               // \'start\' \',\'\n' +
'       && lk != 21232               // \'strict\' \',\'\n' +
'       && lk != 21235               // \'switch\' \',\'\n' +
'       && lk != 21236               // \'text\' \',\'\n' +
'       && lk != 21240               // \'to\' \',\'\n' +
'       && lk != 21241               // \'treat\' \',\'\n' +
'       && lk != 21242               // \'try\' \',\'\n' +
'       && lk != 21243               // \'tumbling\' \',\'\n' +
'       && lk != 21244               // \'type\' \',\'\n' +
'       && lk != 21245               // \'typeswitch\' \',\'\n' +
'       && lk != 21246               // \'union\' \',\'\n' +
'       && lk != 21248               // \'unordered\' \',\'\n' +
'       && lk != 21249               // \'updating\' \',\'\n' +
'       && lk != 21252               // \'validate\' \',\'\n' +
'       && lk != 21253               // \'value\' \',\'\n' +
'       && lk != 21254               // \'variable\' \',\'\n' +
'       && lk != 21255               // \'version\' \',\'\n' +
'       && lk != 21258               // \'where\' \',\'\n' +
'       && lk != 21259               // \'while\' \',\'\n' +
'       && lk != 21262               // \'with\' \',\'\n' +
'       && lk != 21266               // \'xquery\' \',\'\n' +
'       && lk != 27141               // Wildcard \';\'\n' +
'       && lk != 27142               // EQName^Token \';\'\n' +
'       && lk != 27144               // IntegerLiteral \';\'\n' +
'       && lk != 27145               // DecimalLiteral \';\'\n' +
'       && lk != 27146               // DoubleLiteral \';\'\n' +
'       && lk != 27147               // StringLiteral \';\'\n' +
'       && lk != 27180               // \'.\' \';\'\n' +
'       && lk != 27181               // \'..\' \';\'\n' +
'       && lk != 27182               // \'/\' \';\'\n' +
'       && lk != 27206               // \'after\' \';\'\n' +
'       && lk != 27208               // \'allowing\' \';\'\n' +
'       && lk != 27209               // \'ancestor\' \';\'\n' +
'       && lk != 27210               // \'ancestor-or-self\' \';\'\n' +
'       && lk != 27211               // \'and\' \';\'\n' +
'       && lk != 27215               // \'as\' \';\'\n' +
'       && lk != 27216               // \'ascending\' \';\'\n' +
'       && lk != 27217               // \'at\' \';\'\n' +
'       && lk != 27218               // \'attribute\' \';\'\n' +
'       && lk != 27219               // \'base-uri\' \';\'\n' +
'       && lk != 27220               // \'before\' \';\'\n' +
'       && lk != 27221               // \'boundary-space\' \';\'\n' +
'       && lk != 27222               // \'break\' \';\'\n' +
'       && lk != 27224               // \'case\' \';\'\n' +
'       && lk != 27225               // \'cast\' \';\'\n' +
'       && lk != 27226               // \'castable\' \';\'\n' +
'       && lk != 27227               // \'catch\' \';\'\n' +
'       && lk != 27229               // \'child\' \';\'\n' +
'       && lk != 27230               // \'collation\' \';\'\n' +
'       && lk != 27232               // \'comment\' \';\'\n' +
'       && lk != 27233               // \'constraint\' \';\'\n' +
'       && lk != 27234               // \'construction\' \';\'\n' +
'       && lk != 27237               // \'context\' \';\'\n' +
'       && lk != 27238               // \'continue\' \';\'\n' +
'       && lk != 27239               // \'copy\' \';\'\n' +
'       && lk != 27240               // \'copy-namespaces\' \';\'\n' +
'       && lk != 27241               // \'count\' \';\'\n' +
'       && lk != 27242               // \'decimal-format\' \';\'\n' +
'       && lk != 27244               // \'declare\' \';\'\n' +
'       && lk != 27245               // \'default\' \';\'\n' +
'       && lk != 27246               // \'delete\' \';\'\n' +
'       && lk != 27247               // \'descendant\' \';\'\n' +
'       && lk != 27248               // \'descendant-or-self\' \';\'\n' +
'       && lk != 27249               // \'descending\' \';\'\n' +
'       && lk != 27254               // \'div\' \';\'\n' +
'       && lk != 27255               // \'document\' \';\'\n' +
'       && lk != 27256               // \'document-node\' \';\'\n' +
'       && lk != 27257               // \'element\' \';\'\n' +
'       && lk != 27258               // \'else\' \';\'\n' +
'       && lk != 27259               // \'empty\' \';\'\n' +
'       && lk != 27260               // \'empty-sequence\' \';\'\n' +
'       && lk != 27261               // \'encoding\' \';\'\n' +
'       && lk != 27262               // \'end\' \';\'\n' +
'       && lk != 27264               // \'eq\' \';\'\n' +
'       && lk != 27265               // \'every\' \';\'\n' +
'       && lk != 27267               // \'except\' \';\'\n' +
'       && lk != 27268               // \'exit\' \';\'\n' +
'       && lk != 27269               // \'external\' \';\'\n' +
'       && lk != 27270               // \'first\' \';\'\n' +
'       && lk != 27271               // \'following\' \';\'\n' +
'       && lk != 27272               // \'following-sibling\' \';\'\n' +
'       && lk != 27273               // \'for\' \';\'\n' +
'       && lk != 27277               // \'ft-option\' \';\'\n' +
'       && lk != 27281               // \'function\' \';\'\n' +
'       && lk != 27282               // \'ge\' \';\'\n' +
'       && lk != 27284               // \'group\' \';\'\n' +
'       && lk != 27286               // \'gt\' \';\'\n' +
'       && lk != 27287               // \'idiv\' \';\'\n' +
'       && lk != 27288               // \'if\' \';\'\n' +
'       && lk != 27289               // \'import\' \';\'\n' +
'       && lk != 27290               // \'in\' \';\'\n' +
'       && lk != 27291               // \'index\' \';\'\n' +
'       && lk != 27295               // \'insert\' \';\'\n' +
'       && lk != 27296               // \'instance\' \';\'\n' +
'       && lk != 27297               // \'integrity\' \';\'\n' +
'       && lk != 27298               // \'intersect\' \';\'\n' +
'       && lk != 27299               // \'into\' \';\'\n' +
'       && lk != 27300               // \'is\' \';\'\n' +
'       && lk != 27301               // \'item\' \';\'\n' +
'       && lk != 27306               // \'last\' \';\'\n' +
'       && lk != 27307               // \'lax\' \';\'\n' +
'       && lk != 27308               // \'le\' \';\'\n' +
'       && lk != 27310               // \'let\' \';\'\n' +
'       && lk != 27312               // \'loop\' \';\'\n' +
'       && lk != 27314               // \'lt\' \';\'\n' +
'       && lk != 27316               // \'mod\' \';\'\n' +
'       && lk != 27317               // \'modify\' \';\'\n' +
'       && lk != 27318               // \'module\' \';\'\n' +
'       && lk != 27320               // \'namespace\' \';\'\n' +
'       && lk != 27321               // \'namespace-node\' \';\'\n' +
'       && lk != 27322               // \'ne\' \';\'\n' +
'       && lk != 27327               // \'node\' \';\'\n' +
'       && lk != 27328               // \'nodes\' \';\'\n' +
'       && lk != 27334               // \'only\' \';\'\n' +
'       && lk != 27335               // \'option\' \';\'\n' +
'       && lk != 27336               // \'or\' \';\'\n' +
'       && lk != 27337               // \'order\' \';\'\n' +
'       && lk != 27338               // \'ordered\' \';\'\n' +
'       && lk != 27339               // \'ordering\' \';\'\n' +
'       && lk != 27342               // \'parent\' \';\'\n' +
'       && lk != 27348               // \'preceding\' \';\'\n' +
'       && lk != 27349               // \'preceding-sibling\' \';\'\n' +
'       && lk != 27352               // \'processing-instruction\' \';\'\n' +
'       && lk != 27354               // \'rename\' \';\'\n' +
'       && lk != 27355               // \'replace\' \';\'\n' +
'       && lk != 27356               // \'return\' \';\'\n' +
'       && lk != 27357               // \'returning\' \';\'\n' +
'       && lk != 27358               // \'revalidation\' \';\'\n' +
'       && lk != 27360               // \'satisfies\' \';\'\n' +
'       && lk != 27361               // \'schema\' \';\'\n' +
'       && lk != 27362               // \'schema-attribute\' \';\'\n' +
'       && lk != 27363               // \'schema-element\' \';\'\n' +
'       && lk != 27364               // \'score\' \';\'\n' +
'       && lk != 27365               // \'self\' \';\'\n' +
'       && lk != 27370               // \'sliding\' \';\'\n' +
'       && lk != 27371               // \'some\' \';\'\n' +
'       && lk != 27372               // \'stable\' \';\'\n' +
'       && lk != 27373               // \'start\' \';\'\n' +
'       && lk != 27376               // \'strict\' \';\'\n' +
'       && lk != 27379               // \'switch\' \';\'\n' +
'       && lk != 27380               // \'text\' \';\'\n' +
'       && lk != 27384               // \'to\' \';\'\n' +
'       && lk != 27385               // \'treat\' \';\'\n' +
'       && lk != 27386               // \'try\' \';\'\n' +
'       && lk != 27387               // \'tumbling\' \';\'\n' +
'       && lk != 27388               // \'type\' \';\'\n' +
'       && lk != 27389               // \'typeswitch\' \';\'\n' +
'       && lk != 27390               // \'union\' \';\'\n' +
'       && lk != 27392               // \'unordered\' \';\'\n' +
'       && lk != 27393               // \'updating\' \';\'\n' +
'       && lk != 27396               // \'validate\' \';\'\n' +
'       && lk != 27397               // \'value\' \';\'\n' +
'       && lk != 27398               // \'variable\' \';\'\n' +
'       && lk != 27399               // \'version\' \';\'\n' +
'       && lk != 27402               // \'where\' \';\'\n' +
'       && lk != 27403               // \'while\' \';\'\n' +
'       && lk != 27406               // \'with\' \';\'\n' +
'       && lk != 27410               // \'xquery\' \';\'\n' +
'       && lk != 90198               // \'break\' \'loop\'\n' +
'       && lk != 90214               // \'continue\' \'loop\'\n' +
'       && lk != 113284              // \'exit\' \'returning\'\n' +
'       && lk != 144389              // Wildcard \'}\'\n' +
'       && lk != 144390              // EQName^Token \'}\'\n' +
'       && lk != 144392              // IntegerLiteral \'}\'\n' +
'       && lk != 144393              // DecimalLiteral \'}\'\n' +
'       && lk != 144394              // DoubleLiteral \'}\'\n' +
'       && lk != 144395              // StringLiteral \'}\'\n' +
'       && lk != 144428              // \'.\' \'}\'\n' +
'       && lk != 144429              // \'..\' \'}\'\n' +
'       && lk != 144430              // \'/\' \'}\'\n' +
'       && lk != 144454              // \'after\' \'}\'\n' +
'       && lk != 144456              // \'allowing\' \'}\'\n' +
'       && lk != 144457              // \'ancestor\' \'}\'\n' +
'       && lk != 144458              // \'ancestor-or-self\' \'}\'\n' +
'       && lk != 144459              // \'and\' \'}\'\n' +
'       && lk != 144463              // \'as\' \'}\'\n' +
'       && lk != 144464              // \'ascending\' \'}\'\n' +
'       && lk != 144465              // \'at\' \'}\'\n' +
'       && lk != 144466              // \'attribute\' \'}\'\n' +
'       && lk != 144467              // \'base-uri\' \'}\'\n' +
'       && lk != 144468              // \'before\' \'}\'\n' +
'       && lk != 144469              // \'boundary-space\' \'}\'\n' +
'       && lk != 144470              // \'break\' \'}\'\n' +
'       && lk != 144472              // \'case\' \'}\'\n' +
'       && lk != 144473              // \'cast\' \'}\'\n' +
'       && lk != 144474              // \'castable\' \'}\'\n' +
'       && lk != 144475              // \'catch\' \'}\'\n' +
'       && lk != 144477              // \'child\' \'}\'\n' +
'       && lk != 144478              // \'collation\' \'}\'\n' +
'       && lk != 144480              // \'comment\' \'}\'\n' +
'       && lk != 144481              // \'constraint\' \'}\'\n' +
'       && lk != 144482              // \'construction\' \'}\'\n' +
'       && lk != 144485              // \'context\' \'}\'\n' +
'       && lk != 144486              // \'continue\' \'}\'\n' +
'       && lk != 144487              // \'copy\' \'}\'\n' +
'       && lk != 144488              // \'copy-namespaces\' \'}\'\n' +
'       && lk != 144489              // \'count\' \'}\'\n' +
'       && lk != 144490              // \'decimal-format\' \'}\'\n' +
'       && lk != 144492              // \'declare\' \'}\'\n' +
'       && lk != 144493              // \'default\' \'}\'\n' +
'       && lk != 144494              // \'delete\' \'}\'\n' +
'       && lk != 144495              // \'descendant\' \'}\'\n' +
'       && lk != 144496              // \'descendant-or-self\' \'}\'\n' +
'       && lk != 144497              // \'descending\' \'}\'\n' +
'       && lk != 144502              // \'div\' \'}\'\n' +
'       && lk != 144503              // \'document\' \'}\'\n' +
'       && lk != 144504              // \'document-node\' \'}\'\n' +
'       && lk != 144505              // \'element\' \'}\'\n' +
'       && lk != 144506              // \'else\' \'}\'\n' +
'       && lk != 144507              // \'empty\' \'}\'\n' +
'       && lk != 144508              // \'empty-sequence\' \'}\'\n' +
'       && lk != 144509              // \'encoding\' \'}\'\n' +
'       && lk != 144510              // \'end\' \'}\'\n' +
'       && lk != 144512              // \'eq\' \'}\'\n' +
'       && lk != 144513              // \'every\' \'}\'\n' +
'       && lk != 144515              // \'except\' \'}\'\n' +
'       && lk != 144516              // \'exit\' \'}\'\n' +
'       && lk != 144517              // \'external\' \'}\'\n' +
'       && lk != 144518              // \'first\' \'}\'\n' +
'       && lk != 144519              // \'following\' \'}\'\n' +
'       && lk != 144520              // \'following-sibling\' \'}\'\n' +
'       && lk != 144521              // \'for\' \'}\'\n' +
'       && lk != 144525              // \'ft-option\' \'}\'\n' +
'       && lk != 144529              // \'function\' \'}\'\n' +
'       && lk != 144530              // \'ge\' \'}\'\n' +
'       && lk != 144532              // \'group\' \'}\'\n' +
'       && lk != 144534              // \'gt\' \'}\'\n' +
'       && lk != 144535              // \'idiv\' \'}\'\n' +
'       && lk != 144536              // \'if\' \'}\'\n' +
'       && lk != 144537              // \'import\' \'}\'\n' +
'       && lk != 144538              // \'in\' \'}\'\n' +
'       && lk != 144539              // \'index\' \'}\'\n' +
'       && lk != 144543              // \'insert\' \'}\'\n' +
'       && lk != 144544              // \'instance\' \'}\'\n' +
'       && lk != 144545              // \'integrity\' \'}\'\n' +
'       && lk != 144546              // \'intersect\' \'}\'\n' +
'       && lk != 144547              // \'into\' \'}\'\n' +
'       && lk != 144548              // \'is\' \'}\'\n' +
'       && lk != 144549              // \'item\' \'}\'\n' +
'       && lk != 144554              // \'last\' \'}\'\n' +
'       && lk != 144555              // \'lax\' \'}\'\n' +
'       && lk != 144556              // \'le\' \'}\'\n' +
'       && lk != 144558              // \'let\' \'}\'\n' +
'       && lk != 144560              // \'loop\' \'}\'\n' +
'       && lk != 144562              // \'lt\' \'}\'\n' +
'       && lk != 144564              // \'mod\' \'}\'\n' +
'       && lk != 144565              // \'modify\' \'}\'\n' +
'       && lk != 144566              // \'module\' \'}\'\n' +
'       && lk != 144568              // \'namespace\' \'}\'\n' +
'       && lk != 144569              // \'namespace-node\' \'}\'\n' +
'       && lk != 144570              // \'ne\' \'}\'\n' +
'       && lk != 144575              // \'node\' \'}\'\n' +
'       && lk != 144576              // \'nodes\' \'}\'\n' +
'       && lk != 144582              // \'only\' \'}\'\n' +
'       && lk != 144583              // \'option\' \'}\'\n' +
'       && lk != 144584              // \'or\' \'}\'\n' +
'       && lk != 144585              // \'order\' \'}\'\n' +
'       && lk != 144586              // \'ordered\' \'}\'\n' +
'       && lk != 144587              // \'ordering\' \'}\'\n' +
'       && lk != 144590              // \'parent\' \'}\'\n' +
'       && lk != 144596              // \'preceding\' \'}\'\n' +
'       && lk != 144597              // \'preceding-sibling\' \'}\'\n' +
'       && lk != 144600              // \'processing-instruction\' \'}\'\n' +
'       && lk != 144602              // \'rename\' \'}\'\n' +
'       && lk != 144603              // \'replace\' \'}\'\n' +
'       && lk != 144604              // \'return\' \'}\'\n' +
'       && lk != 144605              // \'returning\' \'}\'\n' +
'       && lk != 144606              // \'revalidation\' \'}\'\n' +
'       && lk != 144608              // \'satisfies\' \'}\'\n' +
'       && lk != 144609              // \'schema\' \'}\'\n' +
'       && lk != 144610              // \'schema-attribute\' \'}\'\n' +
'       && lk != 144611              // \'schema-element\' \'}\'\n' +
'       && lk != 144612              // \'score\' \'}\'\n' +
'       && lk != 144613              // \'self\' \'}\'\n' +
'       && lk != 144618              // \'sliding\' \'}\'\n' +
'       && lk != 144619              // \'some\' \'}\'\n' +
'       && lk != 144620              // \'stable\' \'}\'\n' +
'       && lk != 144621              // \'start\' \'}\'\n' +
'       && lk != 144624              // \'strict\' \'}\'\n' +
'       && lk != 144627              // \'switch\' \'}\'\n' +
'       && lk != 144628              // \'text\' \'}\'\n' +
'       && lk != 144632              // \'to\' \'}\'\n' +
'       && lk != 144633              // \'treat\' \'}\'\n' +
'       && lk != 144634              // \'try\' \'}\'\n' +
'       && lk != 144635              // \'tumbling\' \'}\'\n' +
'       && lk != 144636              // \'type\' \'}\'\n' +
'       && lk != 144637              // \'typeswitch\' \'}\'\n' +
'       && lk != 144638              // \'union\' \'}\'\n' +
'       && lk != 144640              // \'unordered\' \'}\'\n' +
'       && lk != 144641              // \'updating\' \'}\'\n' +
'       && lk != 144644              // \'validate\' \'}\'\n' +
'       && lk != 144645              // \'value\' \'}\'\n' +
'       && lk != 144646              // \'variable\' \'}\'\n' +
'       && lk != 144647              // \'version\' \'}\'\n' +
'       && lk != 144650              // \'where\' \'}\'\n' +
'       && lk != 144651              // \'while\' \'}\'\n' +
'       && lk != 144654              // \'with\' \'}\'\n' +
'       && lk != 144658)             // \'xquery\' \'}\'\n' +
'      {\n' +
'        lk = memoized(6, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            try_Statement();\n' +
'            memoize(6, e0A, -1);\n' +
'            continue;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            memoize(6, e0A, -2);\n' +
'            break;\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 16134               // \'variable\' \'$\'\n' +
'       && lk != 27141               // Wildcard \';\'\n' +
'       && lk != 27142               // EQName^Token \';\'\n' +
'       && lk != 27144               // IntegerLiteral \';\'\n' +
'       && lk != 27145               // DecimalLiteral \';\'\n' +
'       && lk != 27146               // DoubleLiteral \';\'\n' +
'       && lk != 27147               // StringLiteral \';\'\n' +
'       && lk != 27180               // \'.\' \';\'\n' +
'       && lk != 27181               // \'..\' \';\'\n' +
'       && lk != 27182               // \'/\' \';\'\n' +
'       && lk != 27206               // \'after\' \';\'\n' +
'       && lk != 27208               // \'allowing\' \';\'\n' +
'       && lk != 27209               // \'ancestor\' \';\'\n' +
'       && lk != 27210               // \'ancestor-or-self\' \';\'\n' +
'       && lk != 27211               // \'and\' \';\'\n' +
'       && lk != 27215               // \'as\' \';\'\n' +
'       && lk != 27216               // \'ascending\' \';\'\n' +
'       && lk != 27217               // \'at\' \';\'\n' +
'       && lk != 27218               // \'attribute\' \';\'\n' +
'       && lk != 27219               // \'base-uri\' \';\'\n' +
'       && lk != 27220               // \'before\' \';\'\n' +
'       && lk != 27221               // \'boundary-space\' \';\'\n' +
'       && lk != 27222               // \'break\' \';\'\n' +
'       && lk != 27224               // \'case\' \';\'\n' +
'       && lk != 27225               // \'cast\' \';\'\n' +
'       && lk != 27226               // \'castable\' \';\'\n' +
'       && lk != 27227               // \'catch\' \';\'\n' +
'       && lk != 27229               // \'child\' \';\'\n' +
'       && lk != 27230               // \'collation\' \';\'\n' +
'       && lk != 27232               // \'comment\' \';\'\n' +
'       && lk != 27233               // \'constraint\' \';\'\n' +
'       && lk != 27234               // \'construction\' \';\'\n' +
'       && lk != 27237               // \'context\' \';\'\n' +
'       && lk != 27238               // \'continue\' \';\'\n' +
'       && lk != 27239               // \'copy\' \';\'\n' +
'       && lk != 27240               // \'copy-namespaces\' \';\'\n' +
'       && lk != 27241               // \'count\' \';\'\n' +
'       && lk != 27242               // \'decimal-format\' \';\'\n' +
'       && lk != 27244               // \'declare\' \';\'\n' +
'       && lk != 27245               // \'default\' \';\'\n' +
'       && lk != 27246               // \'delete\' \';\'\n' +
'       && lk != 27247               // \'descendant\' \';\'\n' +
'       && lk != 27248               // \'descendant-or-self\' \';\'\n' +
'       && lk != 27249               // \'descending\' \';\'\n' +
'       && lk != 27254               // \'div\' \';\'\n' +
'       && lk != 27255               // \'document\' \';\'\n' +
'       && lk != 27256               // \'document-node\' \';\'\n' +
'       && lk != 27257               // \'element\' \';\'\n' +
'       && lk != 27258               // \'else\' \';\'\n' +
'       && lk != 27259               // \'empty\' \';\'\n' +
'       && lk != 27260               // \'empty-sequence\' \';\'\n' +
'       && lk != 27261               // \'encoding\' \';\'\n' +
'       && lk != 27262               // \'end\' \';\'\n' +
'       && lk != 27264               // \'eq\' \';\'\n' +
'       && lk != 27265               // \'every\' \';\'\n' +
'       && lk != 27267               // \'except\' \';\'\n' +
'       && lk != 27268               // \'exit\' \';\'\n' +
'       && lk != 27269               // \'external\' \';\'\n' +
'       && lk != 27270               // \'first\' \';\'\n' +
'       && lk != 27271               // \'following\' \';\'\n' +
'       && lk != 27272               // \'following-sibling\' \';\'\n' +
'       && lk != 27273               // \'for\' \';\'\n' +
'       && lk != 27277               // \'ft-option\' \';\'\n' +
'       && lk != 27281               // \'function\' \';\'\n' +
'       && lk != 27282               // \'ge\' \';\'\n' +
'       && lk != 27284               // \'group\' \';\'\n' +
'       && lk != 27286               // \'gt\' \';\'\n' +
'       && lk != 27287               // \'idiv\' \';\'\n' +
'       && lk != 27288               // \'if\' \';\'\n' +
'       && lk != 27289               // \'import\' \';\'\n' +
'       && lk != 27290               // \'in\' \';\'\n' +
'       && lk != 27291               // \'index\' \';\'\n' +
'       && lk != 27295               // \'insert\' \';\'\n' +
'       && lk != 27296               // \'instance\' \';\'\n' +
'       && lk != 27297               // \'integrity\' \';\'\n' +
'       && lk != 27298               // \'intersect\' \';\'\n' +
'       && lk != 27299               // \'into\' \';\'\n' +
'       && lk != 27300               // \'is\' \';\'\n' +
'       && lk != 27301               // \'item\' \';\'\n' +
'       && lk != 27306               // \'last\' \';\'\n' +
'       && lk != 27307               // \'lax\' \';\'\n' +
'       && lk != 27308               // \'le\' \';\'\n' +
'       && lk != 27310               // \'let\' \';\'\n' +
'       && lk != 27312               // \'loop\' \';\'\n' +
'       && lk != 27314               // \'lt\' \';\'\n' +
'       && lk != 27316               // \'mod\' \';\'\n' +
'       && lk != 27317               // \'modify\' \';\'\n' +
'       && lk != 27318               // \'module\' \';\'\n' +
'       && lk != 27320               // \'namespace\' \';\'\n' +
'       && lk != 27321               // \'namespace-node\' \';\'\n' +
'       && lk != 27322               // \'ne\' \';\'\n' +
'       && lk != 27327               // \'node\' \';\'\n' +
'       && lk != 27328               // \'nodes\' \';\'\n' +
'       && lk != 27334               // \'only\' \';\'\n' +
'       && lk != 27335               // \'option\' \';\'\n' +
'       && lk != 27336               // \'or\' \';\'\n' +
'       && lk != 27337               // \'order\' \';\'\n' +
'       && lk != 27338               // \'ordered\' \';\'\n' +
'       && lk != 27339               // \'ordering\' \';\'\n' +
'       && lk != 27342               // \'parent\' \';\'\n' +
'       && lk != 27348               // \'preceding\' \';\'\n' +
'       && lk != 27349               // \'preceding-sibling\' \';\'\n' +
'       && lk != 27352               // \'processing-instruction\' \';\'\n' +
'       && lk != 27354               // \'rename\' \';\'\n' +
'       && lk != 27355               // \'replace\' \';\'\n' +
'       && lk != 27356               // \'return\' \';\'\n' +
'       && lk != 27357               // \'returning\' \';\'\n' +
'       && lk != 27358               // \'revalidation\' \';\'\n' +
'       && lk != 27360               // \'satisfies\' \';\'\n' +
'       && lk != 27361               // \'schema\' \';\'\n' +
'       && lk != 27362               // \'schema-attribute\' \';\'\n' +
'       && lk != 27363               // \'schema-element\' \';\'\n' +
'       && lk != 27364               // \'score\' \';\'\n' +
'       && lk != 27365               // \'self\' \';\'\n' +
'       && lk != 27370               // \'sliding\' \';\'\n' +
'       && lk != 27371               // \'some\' \';\'\n' +
'       && lk != 27372               // \'stable\' \';\'\n' +
'       && lk != 27373               // \'start\' \';\'\n' +
'       && lk != 27376               // \'strict\' \';\'\n' +
'       && lk != 27379               // \'switch\' \';\'\n' +
'       && lk != 27380               // \'text\' \';\'\n' +
'       && lk != 27384               // \'to\' \';\'\n' +
'       && lk != 27385               // \'treat\' \';\'\n' +
'       && lk != 27386               // \'try\' \';\'\n' +
'       && lk != 27387               // \'tumbling\' \';\'\n' +
'       && lk != 27388               // \'type\' \';\'\n' +
'       && lk != 27389               // \'typeswitch\' \';\'\n' +
'       && lk != 27390               // \'union\' \';\'\n' +
'       && lk != 27392               // \'unordered\' \';\'\n' +
'       && lk != 27393               // \'updating\' \';\'\n' +
'       && lk != 27396               // \'validate\' \';\'\n' +
'       && lk != 27397               // \'value\' \';\'\n' +
'       && lk != 27398               // \'variable\' \';\'\n' +
'       && lk != 27399               // \'version\' \';\'\n' +
'       && lk != 27402               // \'where\' \';\'\n' +
'       && lk != 27403               // \'while\' \';\'\n' +
'       && lk != 27406               // \'with\' \';\'\n' +
'       && lk != 27410               // \'xquery\' \';\'\n' +
'       && lk != 90198               // \'break\' \'loop\'\n' +
'       && lk != 90214               // \'continue\' \'loop\'\n' +
'       && lk != 113284)             // \'exit\' \'returning\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_Statement();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_StatementsAndExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("StatementsAndExpr", e0);\n' +
'    parse_Statements();\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    eventHandler.endNonterminal("StatementsAndExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_StatementsAndExpr()\n' +
'  {\n' +
'    try_Statements();\n' +
'    try_Expr();\n' +
'  }\n' +
'\n' +
'  function parse_StatementsAndOptionalExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);\n' +
'    parse_Statements();\n' +
'    if (l1 != 25                    // EOF\n' +
'     && l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_StatementsAndOptionalExpr()\n' +
'  {\n' +
'    try_Statements();\n' +
'    if (l1 != 25                    // EOF\n' +
'     && l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      try_Expr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_Statement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("Statement", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 132:                       // \'exit\'\n' +
'      lookahead2W(189);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'returning\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(196);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'sliding\' | \'to\' |\n' +
'                                    // \'treat\' | \'tumbling\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      lookahead2W(193);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'score\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      lookahead2W(190);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'{\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      lookahead2W(187);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    case 31:                        // \'$\'\n' +
'    case 32:                        // \'%\'\n' +
'      lookahead2W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'    case 102:                       // \'continue\'\n' +
'      lookahead2W(188);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'loop\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'    case 267:                       // \'while\'\n' +
'      lookahead2W(185);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 2836                  // \'{\' Wildcard\n' +
'     || lk == 3103                  // \'$\' EQName^Token\n' +
'     || lk == 3104                  // \'%\' EQName^Token\n' +
'     || lk == 3348                  // \'{\' EQName^Token\n' +
'     || lk == 4372                  // \'{\' IntegerLiteral\n' +
'     || lk == 4884                  // \'{\' DecimalLiteral\n' +
'     || lk == 5396                  // \'{\' DoubleLiteral\n' +
'     || lk == 5908                  // \'{\' StringLiteral\n' +
'     || lk == 16148                 // \'{\' \'$\'\n' +
'     || lk == 16660                 // \'{\' \'%\'\n' +
'     || lk == 17675                 // \'while\' \'(\'\n' +
'     || lk == 17684                 // \'{\' \'(\'\n' +
'     || lk == 18196                 // \'{\' \'(#\'\n' +
'     || lk == 20756                 // \'{\' \'+\'\n' +
'     || lk == 21780                 // \'{\' \'-\'\n' +
'     || lk == 22804                 // \'{\' \'.\'\n' +
'     || lk == 23316                 // \'{\' \'..\'\n' +
'     || lk == 23828                 // \'{\' \'/\'\n' +
'     || lk == 24340                 // \'{\' \'//\'\n' +
'     || lk == 27924                 // \'{\' \'<\'\n' +
'     || lk == 28436                 // \'{\' \'<!--\'\n' +
'     || lk == 30484                 // \'{\' \'<?\'\n' +
'     || lk == 34068                 // \'{\' \'@\'\n' +
'     || lk == 35092                 // \'{\' \'[\'\n' +
'     || lk == 35871                 // \'$\' \'after\'\n' +
'     || lk == 35872                 // \'%\' \'after\'\n' +
'     || lk == 36116                 // \'{\' \'after\'\n' +
'     || lk == 36895                 // \'$\' \'allowing\'\n' +
'     || lk == 36896                 // \'%\' \'allowing\'\n' +
'     || lk == 37140                 // \'{\' \'allowing\'\n' +
'     || lk == 37407                 // \'$\' \'ancestor\'\n' +
'     || lk == 37408                 // \'%\' \'ancestor\'\n' +
'     || lk == 37652                 // \'{\' \'ancestor\'\n' +
'     || lk == 37919                 // \'$\' \'ancestor-or-self\'\n' +
'     || lk == 37920                 // \'%\' \'ancestor-or-self\'\n' +
'     || lk == 38164                 // \'{\' \'ancestor-or-self\'\n' +
'     || lk == 38431                 // \'$\' \'and\'\n' +
'     || lk == 38432                 // \'%\' \'and\'\n' +
'     || lk == 38676                 // \'{\' \'and\'\n' +
'     || lk == 39700                 // \'{\' \'append\'\n' +
'     || lk == 40212                 // \'{\' \'array\'\n' +
'     || lk == 40479                 // \'$\' \'as\'\n' +
'     || lk == 40480                 // \'%\' \'as\'\n' +
'     || lk == 40724                 // \'{\' \'as\'\n' +
'     || lk == 40991                 // \'$\' \'ascending\'\n' +
'     || lk == 40992                 // \'%\' \'ascending\'\n' +
'     || lk == 41236                 // \'{\' \'ascending\'\n' +
'     || lk == 41503                 // \'$\' \'at\'\n' +
'     || lk == 41504                 // \'%\' \'at\'\n' +
'     || lk == 41748                 // \'{\' \'at\'\n' +
'     || lk == 42015                 // \'$\' \'attribute\'\n' +
'     || lk == 42016                 // \'%\' \'attribute\'\n' +
'     || lk == 42260                 // \'{\' \'attribute\'\n' +
'     || lk == 42527                 // \'$\' \'base-uri\'\n' +
'     || lk == 42528                 // \'%\' \'base-uri\'\n' +
'     || lk == 42772                 // \'{\' \'base-uri\'\n' +
'     || lk == 43039                 // \'$\' \'before\'\n' +
'     || lk == 43040                 // \'%\' \'before\'\n' +
'     || lk == 43284                 // \'{\' \'before\'\n' +
'     || lk == 43551                 // \'$\' \'boundary-space\'\n' +
'     || lk == 43552                 // \'%\' \'boundary-space\'\n' +
'     || lk == 43796                 // \'{\' \'boundary-space\'\n' +
'     || lk == 44063                 // \'$\' \'break\'\n' +
'     || lk == 44064                 // \'%\' \'break\'\n' +
'     || lk == 44308                 // \'{\' \'break\'\n' +
'     || lk == 45087                 // \'$\' \'case\'\n' +
'     || lk == 45088                 // \'%\' \'case\'\n' +
'     || lk == 45332                 // \'{\' \'case\'\n' +
'     || lk == 45599                 // \'$\' \'cast\'\n' +
'     || lk == 45600                 // \'%\' \'cast\'\n' +
'     || lk == 45844                 // \'{\' \'cast\'\n' +
'     || lk == 46111                 // \'$\' \'castable\'\n' +
'     || lk == 46112                 // \'%\' \'castable\'\n' +
'     || lk == 46356                 // \'{\' \'castable\'\n' +
'     || lk == 46623                 // \'$\' \'catch\'\n' +
'     || lk == 46624                 // \'%\' \'catch\'\n' +
'     || lk == 46868                 // \'{\' \'catch\'\n' +
'     || lk == 47647                 // \'$\' \'child\'\n' +
'     || lk == 47648                 // \'%\' \'child\'\n' +
'     || lk == 47892                 // \'{\' \'child\'\n' +
'     || lk == 48159                 // \'$\' \'collation\'\n' +
'     || lk == 48160                 // \'%\' \'collation\'\n' +
'     || lk == 48404                 // \'{\' \'collation\'\n' +
'     || lk == 49183                 // \'$\' \'comment\'\n' +
'     || lk == 49184                 // \'%\' \'comment\'\n' +
'     || lk == 49428                 // \'{\' \'comment\'\n' +
'     || lk == 49695                 // \'$\' \'constraint\'\n' +
'     || lk == 49696                 // \'%\' \'constraint\'\n' +
'     || lk == 49940                 // \'{\' \'constraint\'\n' +
'     || lk == 50207                 // \'$\' \'construction\'\n' +
'     || lk == 50208                 // \'%\' \'construction\'\n' +
'     || lk == 50452                 // \'{\' \'construction\'\n' +
'     || lk == 51743                 // \'$\' \'context\'\n' +
'     || lk == 51744                 // \'%\' \'context\'\n' +
'     || lk == 51988                 // \'{\' \'context\'\n' +
'     || lk == 52255                 // \'$\' \'continue\'\n' +
'     || lk == 52256                 // \'%\' \'continue\'\n' +
'     || lk == 52500                 // \'{\' \'continue\'\n' +
'     || lk == 52767                 // \'$\' \'copy\'\n' +
'     || lk == 52768                 // \'%\' \'copy\'\n' +
'     || lk == 53012                 // \'{\' \'copy\'\n' +
'     || lk == 53279                 // \'$\' \'copy-namespaces\'\n' +
'     || lk == 53280                 // \'%\' \'copy-namespaces\'\n' +
'     || lk == 53524                 // \'{\' \'copy-namespaces\'\n' +
'     || lk == 53791                 // \'$\' \'count\'\n' +
'     || lk == 53792                 // \'%\' \'count\'\n' +
'     || lk == 54036                 // \'{\' \'count\'\n' +
'     || lk == 54303                 // \'$\' \'decimal-format\'\n' +
'     || lk == 54304                 // \'%\' \'decimal-format\'\n' +
'     || lk == 54548                 // \'{\' \'decimal-format\'\n' +
'     || lk == 55327                 // \'$\' \'declare\'\n' +
'     || lk == 55328                 // \'%\' \'declare\'\n' +
'     || lk == 55572                 // \'{\' \'declare\'\n' +
'     || lk == 55839                 // \'$\' \'default\'\n' +
'     || lk == 55840                 // \'%\' \'default\'\n' +
'     || lk == 56084                 // \'{\' \'default\'\n' +
'     || lk == 56351                 // \'$\' \'delete\'\n' +
'     || lk == 56352                 // \'%\' \'delete\'\n' +
'     || lk == 56596                 // \'{\' \'delete\'\n' +
'     || lk == 56863                 // \'$\' \'descendant\'\n' +
'     || lk == 56864                 // \'%\' \'descendant\'\n' +
'     || lk == 57108                 // \'{\' \'descendant\'\n' +
'     || lk == 57375                 // \'$\' \'descendant-or-self\'\n' +
'     || lk == 57376                 // \'%\' \'descendant-or-self\'\n' +
'     || lk == 57620                 // \'{\' \'descendant-or-self\'\n' +
'     || lk == 57887                 // \'$\' \'descending\'\n' +
'     || lk == 57888                 // \'%\' \'descending\'\n' +
'     || lk == 58132                 // \'{\' \'descending\'\n' +
'     || lk == 60447                 // \'$\' \'div\'\n' +
'     || lk == 60448                 // \'%\' \'div\'\n' +
'     || lk == 60692                 // \'{\' \'div\'\n' +
'     || lk == 60959                 // \'$\' \'document\'\n' +
'     || lk == 60960                 // \'%\' \'document\'\n' +
'     || lk == 61204                 // \'{\' \'document\'\n' +
'     || lk == 61471                 // \'$\' \'document-node\'\n' +
'     || lk == 61472                 // \'%\' \'document-node\'\n' +
'     || lk == 61716                 // \'{\' \'document-node\'\n' +
'     || lk == 61983                 // \'$\' \'element\'\n' +
'     || lk == 61984                 // \'%\' \'element\'\n' +
'     || lk == 62228                 // \'{\' \'element\'\n' +
'     || lk == 62495                 // \'$\' \'else\'\n' +
'     || lk == 62496                 // \'%\' \'else\'\n' +
'     || lk == 62740                 // \'{\' \'else\'\n' +
'     || lk == 63007                 // \'$\' \'empty\'\n' +
'     || lk == 63008                 // \'%\' \'empty\'\n' +
'     || lk == 63252                 // \'{\' \'empty\'\n' +
'     || lk == 63519                 // \'$\' \'empty-sequence\'\n' +
'     || lk == 63520                 // \'%\' \'empty-sequence\'\n' +
'     || lk == 63764                 // \'{\' \'empty-sequence\'\n' +
'     || lk == 64031                 // \'$\' \'encoding\'\n' +
'     || lk == 64032                 // \'%\' \'encoding\'\n' +
'     || lk == 64276                 // \'{\' \'encoding\'\n' +
'     || lk == 64543                 // \'$\' \'end\'\n' +
'     || lk == 64544                 // \'%\' \'end\'\n' +
'     || lk == 64788                 // \'{\' \'end\'\n' +
'     || lk == 65567                 // \'$\' \'eq\'\n' +
'     || lk == 65568                 // \'%\' \'eq\'\n' +
'     || lk == 65812                 // \'{\' \'eq\'\n' +
'     || lk == 66079                 // \'$\' \'every\'\n' +
'     || lk == 66080                 // \'%\' \'every\'\n' +
'     || lk == 66324                 // \'{\' \'every\'\n' +
'     || lk == 67103                 // \'$\' \'except\'\n' +
'     || lk == 67104                 // \'%\' \'except\'\n' +
'     || lk == 67348                 // \'{\' \'except\'\n' +
'     || lk == 67615                 // \'$\' \'exit\'\n' +
'     || lk == 67616                 // \'%\' \'exit\'\n' +
'     || lk == 67860                 // \'{\' \'exit\'\n' +
'     || lk == 68127                 // \'$\' \'external\'\n' +
'     || lk == 68128                 // \'%\' \'external\'\n' +
'     || lk == 68372                 // \'{\' \'external\'\n' +
'     || lk == 68639                 // \'$\' \'first\'\n' +
'     || lk == 68640                 // \'%\' \'first\'\n' +
'     || lk == 68884                 // \'{\' \'first\'\n' +
'     || lk == 69151                 // \'$\' \'following\'\n' +
'     || lk == 69152                 // \'%\' \'following\'\n' +
'     || lk == 69396                 // \'{\' \'following\'\n' +
'     || lk == 69663                 // \'$\' \'following-sibling\'\n' +
'     || lk == 69664                 // \'%\' \'following-sibling\'\n' +
'     || lk == 69908                 // \'{\' \'following-sibling\'\n' +
'     || lk == 70175                 // \'$\' \'for\'\n' +
'     || lk == 70176                 // \'%\' \'for\'\n' +
'     || lk == 70420                 // \'{\' \'for\'\n' +
'     || lk == 72223                 // \'$\' \'ft-option\'\n' +
'     || lk == 72224                 // \'%\' \'ft-option\'\n' +
'     || lk == 72468                 // \'{\' \'ft-option\'\n' +
'     || lk == 74271                 // \'$\' \'function\'\n' +
'     || lk == 74272                 // \'%\' \'function\'\n' +
'     || lk == 74516                 // \'{\' \'function\'\n' +
'     || lk == 74783                 // \'$\' \'ge\'\n' +
'     || lk == 74784                 // \'%\' \'ge\'\n' +
'     || lk == 75028                 // \'{\' \'ge\'\n' +
'     || lk == 75807                 // \'$\' \'group\'\n' +
'     || lk == 75808                 // \'%\' \'group\'\n' +
'     || lk == 76052                 // \'{\' \'group\'\n' +
'     || lk == 76831                 // \'$\' \'gt\'\n' +
'     || lk == 76832                 // \'%\' \'gt\'\n' +
'     || lk == 77076                 // \'{\' \'gt\'\n' +
'     || lk == 77343                 // \'$\' \'idiv\'\n' +
'     || lk == 77344                 // \'%\' \'idiv\'\n' +
'     || lk == 77588                 // \'{\' \'idiv\'\n' +
'     || lk == 77855                 // \'$\' \'if\'\n' +
'     || lk == 77856                 // \'%\' \'if\'\n' +
'     || lk == 78100                 // \'{\' \'if\'\n' +
'     || lk == 78367                 // \'$\' \'import\'\n' +
'     || lk == 78368                 // \'%\' \'import\'\n' +
'     || lk == 78612                 // \'{\' \'import\'\n' +
'     || lk == 78879                 // \'$\' \'in\'\n' +
'     || lk == 78880                 // \'%\' \'in\'\n' +
'     || lk == 79124                 // \'{\' \'in\'\n' +
'     || lk == 79391                 // \'$\' \'index\'\n' +
'     || lk == 79392                 // \'%\' \'index\'\n' +
'     || lk == 79636                 // \'{\' \'index\'\n' +
'     || lk == 81439                 // \'$\' \'insert\'\n' +
'     || lk == 81440                 // \'%\' \'insert\'\n' +
'     || lk == 81684                 // \'{\' \'insert\'\n' +
'     || lk == 81951                 // \'$\' \'instance\'\n' +
'     || lk == 81952                 // \'%\' \'instance\'\n' +
'     || lk == 82196                 // \'{\' \'instance\'\n' +
'     || lk == 82463                 // \'$\' \'integrity\'\n' +
'     || lk == 82464                 // \'%\' \'integrity\'\n' +
'     || lk == 82708                 // \'{\' \'integrity\'\n' +
'     || lk == 82975                 // \'$\' \'intersect\'\n' +
'     || lk == 82976                 // \'%\' \'intersect\'\n' +
'     || lk == 83220                 // \'{\' \'intersect\'\n' +
'     || lk == 83487                 // \'$\' \'into\'\n' +
'     || lk == 83488                 // \'%\' \'into\'\n' +
'     || lk == 83732                 // \'{\' \'into\'\n' +
'     || lk == 83999                 // \'$\' \'is\'\n' +
'     || lk == 84000                 // \'%\' \'is\'\n' +
'     || lk == 84244                 // \'{\' \'is\'\n' +
'     || lk == 84511                 // \'$\' \'item\'\n' +
'     || lk == 84512                 // \'%\' \'item\'\n' +
'     || lk == 84756                 // \'{\' \'item\'\n' +
'     || lk == 85780                 // \'{\' \'json-item\'\n' +
'     || lk == 87071                 // \'$\' \'last\'\n' +
'     || lk == 87072                 // \'%\' \'last\'\n' +
'     || lk == 87316                 // \'{\' \'last\'\n' +
'     || lk == 87583                 // \'$\' \'lax\'\n' +
'     || lk == 87584                 // \'%\' \'lax\'\n' +
'     || lk == 87828                 // \'{\' \'lax\'\n' +
'     || lk == 88095                 // \'$\' \'le\'\n' +
'     || lk == 88096                 // \'%\' \'le\'\n' +
'     || lk == 88340                 // \'{\' \'le\'\n' +
'     || lk == 89119                 // \'$\' \'let\'\n' +
'     || lk == 89120                 // \'%\' \'let\'\n' +
'     || lk == 89364                 // \'{\' \'let\'\n' +
'     || lk == 90143                 // \'$\' \'loop\'\n' +
'     || lk == 90144                 // \'%\' \'loop\'\n' +
'     || lk == 90388                 // \'{\' \'loop\'\n' +
'     || lk == 91167                 // \'$\' \'lt\'\n' +
'     || lk == 91168                 // \'%\' \'lt\'\n' +
'     || lk == 91412                 // \'{\' \'lt\'\n' +
'     || lk == 92191                 // \'$\' \'mod\'\n' +
'     || lk == 92192                 // \'%\' \'mod\'\n' +
'     || lk == 92436                 // \'{\' \'mod\'\n' +
'     || lk == 92703                 // \'$\' \'modify\'\n' +
'     || lk == 92704                 // \'%\' \'modify\'\n' +
'     || lk == 92948                 // \'{\' \'modify\'\n' +
'     || lk == 93215                 // \'$\' \'module\'\n' +
'     || lk == 93216                 // \'%\' \'module\'\n' +
'     || lk == 93460                 // \'{\' \'module\'\n' +
'     || lk == 94239                 // \'$\' \'namespace\'\n' +
'     || lk == 94240                 // \'%\' \'namespace\'\n' +
'     || lk == 94484                 // \'{\' \'namespace\'\n' +
'     || lk == 94751                 // \'$\' \'namespace-node\'\n' +
'     || lk == 94752                 // \'%\' \'namespace-node\'\n' +
'     || lk == 94996                 // \'{\' \'namespace-node\'\n' +
'     || lk == 95263                 // \'$\' \'ne\'\n' +
'     || lk == 95264                 // \'%\' \'ne\'\n' +
'     || lk == 95508                 // \'{\' \'ne\'\n' +
'     || lk == 97823                 // \'$\' \'node\'\n' +
'     || lk == 97824                 // \'%\' \'node\'\n' +
'     || lk == 98068                 // \'{\' \'node\'\n' +
'     || lk == 98335                 // \'$\' \'nodes\'\n' +
'     || lk == 98336                 // \'%\' \'nodes\'\n' +
'     || lk == 98580                 // \'{\' \'nodes\'\n' +
'     || lk == 99604                 // \'{\' \'object\'\n' +
'     || lk == 101407                // \'$\' \'only\'\n' +
'     || lk == 101408                // \'%\' \'only\'\n' +
'     || lk == 101652                // \'{\' \'only\'\n' +
'     || lk == 101919                // \'$\' \'option\'\n' +
'     || lk == 101920                // \'%\' \'option\'\n' +
'     || lk == 102164                // \'{\' \'option\'\n' +
'     || lk == 102431                // \'$\' \'or\'\n' +
'     || lk == 102432                // \'%\' \'or\'\n' +
'     || lk == 102676                // \'{\' \'or\'\n' +
'     || lk == 102943                // \'$\' \'order\'\n' +
'     || lk == 102944                // \'%\' \'order\'\n' +
'     || lk == 103188                // \'{\' \'order\'\n' +
'     || lk == 103455                // \'$\' \'ordered\'\n' +
'     || lk == 103456                // \'%\' \'ordered\'\n' +
'     || lk == 103700                // \'{\' \'ordered\'\n' +
'     || lk == 103967                // \'$\' \'ordering\'\n' +
'     || lk == 103968                // \'%\' \'ordering\'\n' +
'     || lk == 104212                // \'{\' \'ordering\'\n' +
'     || lk == 105503                // \'$\' \'parent\'\n' +
'     || lk == 105504                // \'%\' \'parent\'\n' +
'     || lk == 105748                // \'{\' \'parent\'\n' +
'     || lk == 108575                // \'$\' \'preceding\'\n' +
'     || lk == 108576                // \'%\' \'preceding\'\n' +
'     || lk == 108820                // \'{\' \'preceding\'\n' +
'     || lk == 109087                // \'$\' \'preceding-sibling\'\n' +
'     || lk == 109088                // \'%\' \'preceding-sibling\'\n' +
'     || lk == 109332                // \'{\' \'preceding-sibling\'\n' +
'     || lk == 110623                // \'$\' \'processing-instruction\'\n' +
'     || lk == 110624                // \'%\' \'processing-instruction\'\n' +
'     || lk == 110868                // \'{\' \'processing-instruction\'\n' +
'     || lk == 111647                // \'$\' \'rename\'\n' +
'     || lk == 111648                // \'%\' \'rename\'\n' +
'     || lk == 111892                // \'{\' \'rename\'\n' +
'     || lk == 112159                // \'$\' \'replace\'\n' +
'     || lk == 112160                // \'%\' \'replace\'\n' +
'     || lk == 112404                // \'{\' \'replace\'\n' +
'     || lk == 112671                // \'$\' \'return\'\n' +
'     || lk == 112672                // \'%\' \'return\'\n' +
'     || lk == 112916                // \'{\' \'return\'\n' +
'     || lk == 113183                // \'$\' \'returning\'\n' +
'     || lk == 113184                // \'%\' \'returning\'\n' +
'     || lk == 113428                // \'{\' \'returning\'\n' +
'     || lk == 113695                // \'$\' \'revalidation\'\n' +
'     || lk == 113696                // \'%\' \'revalidation\'\n' +
'     || lk == 113940                // \'{\' \'revalidation\'\n' +
'     || lk == 114719                // \'$\' \'satisfies\'\n' +
'     || lk == 114720                // \'%\' \'satisfies\'\n' +
'     || lk == 114964                // \'{\' \'satisfies\'\n' +
'     || lk == 115231                // \'$\' \'schema\'\n' +
'     || lk == 115232                // \'%\' \'schema\'\n' +
'     || lk == 115476                // \'{\' \'schema\'\n' +
'     || lk == 115743                // \'$\' \'schema-attribute\'\n' +
'     || lk == 115744                // \'%\' \'schema-attribute\'\n' +
'     || lk == 115988                // \'{\' \'schema-attribute\'\n' +
'     || lk == 116255                // \'$\' \'schema-element\'\n' +
'     || lk == 116256                // \'%\' \'schema-element\'\n' +
'     || lk == 116500                // \'{\' \'schema-element\'\n' +
'     || lk == 116767                // \'$\' \'score\'\n' +
'     || lk == 116768                // \'%\' \'score\'\n' +
'     || lk == 117012                // \'{\' \'score\'\n' +
'     || lk == 117279                // \'$\' \'self\'\n' +
'     || lk == 117280                // \'%\' \'self\'\n' +
'     || lk == 117524                // \'{\' \'self\'\n' +
'     || lk == 119839                // \'$\' \'sliding\'\n' +
'     || lk == 119840                // \'%\' \'sliding\'\n' +
'     || lk == 120084                // \'{\' \'sliding\'\n' +
'     || lk == 120351                // \'$\' \'some\'\n' +
'     || lk == 120352                // \'%\' \'some\'\n' +
'     || lk == 120596                // \'{\' \'some\'\n' +
'     || lk == 120863                // \'$\' \'stable\'\n' +
'     || lk == 120864                // \'%\' \'stable\'\n' +
'     || lk == 121108                // \'{\' \'stable\'\n' +
'     || lk == 121375                // \'$\' \'start\'\n' +
'     || lk == 121376                // \'%\' \'start\'\n' +
'     || lk == 121620                // \'{\' \'start\'\n' +
'     || lk == 122911                // \'$\' \'strict\'\n' +
'     || lk == 122912                // \'%\' \'strict\'\n' +
'     || lk == 123156                // \'{\' \'strict\'\n' +
'     || lk == 124447                // \'$\' \'switch\'\n' +
'     || lk == 124448                // \'%\' \'switch\'\n' +
'     || lk == 124692                // \'{\' \'switch\'\n' +
'     || lk == 124959                // \'$\' \'text\'\n' +
'     || lk == 124960                // \'%\' \'text\'\n' +
'     || lk == 125204                // \'{\' \'text\'\n' +
'     || lk == 127007                // \'$\' \'to\'\n' +
'     || lk == 127008                // \'%\' \'to\'\n' +
'     || lk == 127252                // \'{\' \'to\'\n' +
'     || lk == 127519                // \'$\' \'treat\'\n' +
'     || lk == 127520                // \'%\' \'treat\'\n' +
'     || lk == 127764                // \'{\' \'treat\'\n' +
'     || lk == 128031                // \'$\' \'try\'\n' +
'     || lk == 128032                // \'%\' \'try\'\n' +
'     || lk == 128276                // \'{\' \'try\'\n' +
'     || lk == 128543                // \'$\' \'tumbling\'\n' +
'     || lk == 128544                // \'%\' \'tumbling\'\n' +
'     || lk == 128788                // \'{\' \'tumbling\'\n' +
'     || lk == 129055                // \'$\' \'type\'\n' +
'     || lk == 129056                // \'%\' \'type\'\n' +
'     || lk == 129300                // \'{\' \'type\'\n' +
'     || lk == 129567                // \'$\' \'typeswitch\'\n' +
'     || lk == 129568                // \'%\' \'typeswitch\'\n' +
'     || lk == 129812                // \'{\' \'typeswitch\'\n' +
'     || lk == 130079                // \'$\' \'union\'\n' +
'     || lk == 130080                // \'%\' \'union\'\n' +
'     || lk == 130324                // \'{\' \'union\'\n' +
'     || lk == 131103                // \'$\' \'unordered\'\n' +
'     || lk == 131104                // \'%\' \'unordered\'\n' +
'     || lk == 131348                // \'{\' \'unordered\'\n' +
'     || lk == 131615                // \'$\' \'updating\'\n' +
'     || lk == 131616                // \'%\' \'updating\'\n' +
'     || lk == 131860                // \'{\' \'updating\'\n' +
'     || lk == 133151                // \'$\' \'validate\'\n' +
'     || lk == 133152                // \'%\' \'validate\'\n' +
'     || lk == 133396                // \'{\' \'validate\'\n' +
'     || lk == 133663                // \'$\' \'value\'\n' +
'     || lk == 133664                // \'%\' \'value\'\n' +
'     || lk == 133908                // \'{\' \'value\'\n' +
'     || lk == 134175                // \'$\' \'variable\'\n' +
'     || lk == 134176                // \'%\' \'variable\'\n' +
'     || lk == 134420                // \'{\' \'variable\'\n' +
'     || lk == 134687                // \'$\' \'version\'\n' +
'     || lk == 134688                // \'%\' \'version\'\n' +
'     || lk == 134932                // \'{\' \'version\'\n' +
'     || lk == 136223                // \'$\' \'where\'\n' +
'     || lk == 136224                // \'%\' \'where\'\n' +
'     || lk == 136468                // \'{\' \'where\'\n' +
'     || lk == 136735                // \'$\' \'while\'\n' +
'     || lk == 136736                // \'%\' \'while\'\n' +
'     || lk == 136980                // \'{\' \'while\'\n' +
'     || lk == 138271                // \'$\' \'with\'\n' +
'     || lk == 138272                // \'%\' \'with\'\n' +
'     || lk == 138516                // \'{\' \'with\'\n' +
'     || lk == 140319                // \'$\' \'xquery\'\n' +
'     || lk == 140320                // \'%\' \'xquery\'\n' +
'     || lk == 140564                // \'{\' \'xquery\'\n' +
'     || lk == 141588                // \'{\' \'{\'\n' +
'     || lk == 142612                // \'{\' \'{|\'\n' +
'     || lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(7, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_ApplyStatement();\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          try\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            try_AssignStatement();\n' +
'            lk = -2;\n' +
'          }\n' +
'          catch (p2A)\n' +
'          {\n' +
'            try\n' +
'            {\n' +
'              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'              b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'              try_BlockStatement();\n' +
'              lk = -3;\n' +
'            }\n' +
'            catch (p3A)\n' +
'            {\n' +
'              try\n' +
'              {\n' +
'                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'                b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'                try_VarDeclStatement();\n' +
'                lk = -12;\n' +
'              }\n' +
'              catch (p12A)\n' +
'              {\n' +
'                lk = -13;\n' +
'              }\n' +
'            }\n' +
'          }\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(7, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -2:\n' +
'      parse_AssignStatement();\n' +
'      break;\n' +
'    case -3:\n' +
'      parse_BlockStatement();\n' +
'      break;\n' +
'    case 90198:                     // \'break\' \'loop\'\n' +
'      parse_BreakStatement();\n' +
'      break;\n' +
'    case 90214:                     // \'continue\' \'loop\'\n' +
'      parse_ContinueStatement();\n' +
'      break;\n' +
'    case 113284:                    // \'exit\' \'returning\'\n' +
'      parse_ExitStatement();\n' +
'      break;\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'    case 16046:                     // \'let\' \'$\'\n' +
'    case 116910:                    // \'let\' \'score\'\n' +
'    case 119945:                    // \'for\' \'sliding\'\n' +
'    case 128649:                    // \'for\' \'tumbling\'\n' +
'      parse_FLWORStatement();\n' +
'      break;\n' +
'    case 17560:                     // \'if\' \'(\'\n' +
'      parse_IfStatement();\n' +
'      break;\n' +
'    case 17651:                     // \'switch\' \'(\'\n' +
'      parse_SwitchStatement();\n' +
'      break;\n' +
'    case 141562:                    // \'try\' \'{\'\n' +
'      parse_TryCatchStatement();\n' +
'      break;\n' +
'    case 17661:                     // \'typeswitch\' \'(\'\n' +
'      parse_TypeswitchStatement();\n' +
'      break;\n' +
'    case -12:\n' +
'    case 16134:                     // \'variable\' \'$\'\n' +
'      parse_VarDeclStatement();\n' +
'      break;\n' +
'    case -13:\n' +
'      parse_WhileStatement();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ApplyStatement();\n' +
'    }\n' +
'    eventHandler.endNonterminal("Statement", e0);\n' +
'  }\n' +
'\n' +
'  function try_Statement()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 132:                       // \'exit\'\n' +
'      lookahead2W(189);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'returning\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(196);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'sliding\' | \'to\' |\n' +
'                                    // \'treat\' | \'tumbling\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      lookahead2W(193);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'score\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      lookahead2W(190);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'{\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 262:                       // \'variable\'\n' +
'      lookahead2W(187);             // S^WS | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' |\n' +
'                                    // \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    case 31:                        // \'$\'\n' +
'    case 32:                        // \'%\'\n' +
'      lookahead2W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      break;\n' +
'    case 86:                        // \'break\'\n' +
'    case 102:                       // \'continue\'\n' +
'      lookahead2W(188);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'loop\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' |\n' +
'                                    // \'treat\' | \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'    case 267:                       // \'while\'\n' +
'      lookahead2W(185);             // S^WS | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' | \'+\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' |\n' +
'                                    // \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \'and\' | \'cast\' | \'castable\' |\n' +
'                                    // \'contains\' | \'div\' | \'eq\' | \'except\' | \'ge\' | \'gt\' | \'idiv\' | \'instance\' |\n' +
'                                    // \'intersect\' | \'is\' | \'le\' | \'lt\' | \'mod\' | \'ne\' | \'or\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'|\' | \'||\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 2836                  // \'{\' Wildcard\n' +
'     || lk == 3103                  // \'$\' EQName^Token\n' +
'     || lk == 3104                  // \'%\' EQName^Token\n' +
'     || lk == 3348                  // \'{\' EQName^Token\n' +
'     || lk == 4372                  // \'{\' IntegerLiteral\n' +
'     || lk == 4884                  // \'{\' DecimalLiteral\n' +
'     || lk == 5396                  // \'{\' DoubleLiteral\n' +
'     || lk == 5908                  // \'{\' StringLiteral\n' +
'     || lk == 16148                 // \'{\' \'$\'\n' +
'     || lk == 16660                 // \'{\' \'%\'\n' +
'     || lk == 17675                 // \'while\' \'(\'\n' +
'     || lk == 17684                 // \'{\' \'(\'\n' +
'     || lk == 18196                 // \'{\' \'(#\'\n' +
'     || lk == 20756                 // \'{\' \'+\'\n' +
'     || lk == 21780                 // \'{\' \'-\'\n' +
'     || lk == 22804                 // \'{\' \'.\'\n' +
'     || lk == 23316                 // \'{\' \'..\'\n' +
'     || lk == 23828                 // \'{\' \'/\'\n' +
'     || lk == 24340                 // \'{\' \'//\'\n' +
'     || lk == 27924                 // \'{\' \'<\'\n' +
'     || lk == 28436                 // \'{\' \'<!--\'\n' +
'     || lk == 30484                 // \'{\' \'<?\'\n' +
'     || lk == 34068                 // \'{\' \'@\'\n' +
'     || lk == 35092                 // \'{\' \'[\'\n' +
'     || lk == 35871                 // \'$\' \'after\'\n' +
'     || lk == 35872                 // \'%\' \'after\'\n' +
'     || lk == 36116                 // \'{\' \'after\'\n' +
'     || lk == 36895                 // \'$\' \'allowing\'\n' +
'     || lk == 36896                 // \'%\' \'allowing\'\n' +
'     || lk == 37140                 // \'{\' \'allowing\'\n' +
'     || lk == 37407                 // \'$\' \'ancestor\'\n' +
'     || lk == 37408                 // \'%\' \'ancestor\'\n' +
'     || lk == 37652                 // \'{\' \'ancestor\'\n' +
'     || lk == 37919                 // \'$\' \'ancestor-or-self\'\n' +
'     || lk == 37920                 // \'%\' \'ancestor-or-self\'\n' +
'     || lk == 38164                 // \'{\' \'ancestor-or-self\'\n' +
'     || lk == 38431                 // \'$\' \'and\'\n' +
'     || lk == 38432                 // \'%\' \'and\'\n' +
'     || lk == 38676                 // \'{\' \'and\'\n' +
'     || lk == 39700                 // \'{\' \'append\'\n' +
'     || lk == 40212                 // \'{\' \'array\'\n' +
'     || lk == 40479                 // \'$\' \'as\'\n' +
'     || lk == 40480                 // \'%\' \'as\'\n' +
'     || lk == 40724                 // \'{\' \'as\'\n' +
'     || lk == 40991                 // \'$\' \'ascending\'\n' +
'     || lk == 40992                 // \'%\' \'ascending\'\n' +
'     || lk == 41236                 // \'{\' \'ascending\'\n' +
'     || lk == 41503                 // \'$\' \'at\'\n' +
'     || lk == 41504                 // \'%\' \'at\'\n' +
'     || lk == 41748                 // \'{\' \'at\'\n' +
'     || lk == 42015                 // \'$\' \'attribute\'\n' +
'     || lk == 42016                 // \'%\' \'attribute\'\n' +
'     || lk == 42260                 // \'{\' \'attribute\'\n' +
'     || lk == 42527                 // \'$\' \'base-uri\'\n' +
'     || lk == 42528                 // \'%\' \'base-uri\'\n' +
'     || lk == 42772                 // \'{\' \'base-uri\'\n' +
'     || lk == 43039                 // \'$\' \'before\'\n' +
'     || lk == 43040                 // \'%\' \'before\'\n' +
'     || lk == 43284                 // \'{\' \'before\'\n' +
'     || lk == 43551                 // \'$\' \'boundary-space\'\n' +
'     || lk == 43552                 // \'%\' \'boundary-space\'\n' +
'     || lk == 43796                 // \'{\' \'boundary-space\'\n' +
'     || lk == 44063                 // \'$\' \'break\'\n' +
'     || lk == 44064                 // \'%\' \'break\'\n' +
'     || lk == 44308                 // \'{\' \'break\'\n' +
'     || lk == 45087                 // \'$\' \'case\'\n' +
'     || lk == 45088                 // \'%\' \'case\'\n' +
'     || lk == 45332                 // \'{\' \'case\'\n' +
'     || lk == 45599                 // \'$\' \'cast\'\n' +
'     || lk == 45600                 // \'%\' \'cast\'\n' +
'     || lk == 45844                 // \'{\' \'cast\'\n' +
'     || lk == 46111                 // \'$\' \'castable\'\n' +
'     || lk == 46112                 // \'%\' \'castable\'\n' +
'     || lk == 46356                 // \'{\' \'castable\'\n' +
'     || lk == 46623                 // \'$\' \'catch\'\n' +
'     || lk == 46624                 // \'%\' \'catch\'\n' +
'     || lk == 46868                 // \'{\' \'catch\'\n' +
'     || lk == 47647                 // \'$\' \'child\'\n' +
'     || lk == 47648                 // \'%\' \'child\'\n' +
'     || lk == 47892                 // \'{\' \'child\'\n' +
'     || lk == 48159                 // \'$\' \'collation\'\n' +
'     || lk == 48160                 // \'%\' \'collation\'\n' +
'     || lk == 48404                 // \'{\' \'collation\'\n' +
'     || lk == 49183                 // \'$\' \'comment\'\n' +
'     || lk == 49184                 // \'%\' \'comment\'\n' +
'     || lk == 49428                 // \'{\' \'comment\'\n' +
'     || lk == 49695                 // \'$\' \'constraint\'\n' +
'     || lk == 49696                 // \'%\' \'constraint\'\n' +
'     || lk == 49940                 // \'{\' \'constraint\'\n' +
'     || lk == 50207                 // \'$\' \'construction\'\n' +
'     || lk == 50208                 // \'%\' \'construction\'\n' +
'     || lk == 50452                 // \'{\' \'construction\'\n' +
'     || lk == 51743                 // \'$\' \'context\'\n' +
'     || lk == 51744                 // \'%\' \'context\'\n' +
'     || lk == 51988                 // \'{\' \'context\'\n' +
'     || lk == 52255                 // \'$\' \'continue\'\n' +
'     || lk == 52256                 // \'%\' \'continue\'\n' +
'     || lk == 52500                 // \'{\' \'continue\'\n' +
'     || lk == 52767                 // \'$\' \'copy\'\n' +
'     || lk == 52768                 // \'%\' \'copy\'\n' +
'     || lk == 53012                 // \'{\' \'copy\'\n' +
'     || lk == 53279                 // \'$\' \'copy-namespaces\'\n' +
'     || lk == 53280                 // \'%\' \'copy-namespaces\'\n' +
'     || lk == 53524                 // \'{\' \'copy-namespaces\'\n' +
'     || lk == 53791                 // \'$\' \'count\'\n' +
'     || lk == 53792                 // \'%\' \'count\'\n' +
'     || lk == 54036                 // \'{\' \'count\'\n' +
'     || lk == 54303                 // \'$\' \'decimal-format\'\n' +
'     || lk == 54304                 // \'%\' \'decimal-format\'\n' +
'     || lk == 54548                 // \'{\' \'decimal-format\'\n' +
'     || lk == 55327                 // \'$\' \'declare\'\n' +
'     || lk == 55328                 // \'%\' \'declare\'\n' +
'     || lk == 55572                 // \'{\' \'declare\'\n' +
'     || lk == 55839                 // \'$\' \'default\'\n' +
'     || lk == 55840                 // \'%\' \'default\'\n' +
'     || lk == 56084                 // \'{\' \'default\'\n' +
'     || lk == 56351                 // \'$\' \'delete\'\n' +
'     || lk == 56352                 // \'%\' \'delete\'\n' +
'     || lk == 56596                 // \'{\' \'delete\'\n' +
'     || lk == 56863                 // \'$\' \'descendant\'\n' +
'     || lk == 56864                 // \'%\' \'descendant\'\n' +
'     || lk == 57108                 // \'{\' \'descendant\'\n' +
'     || lk == 57375                 // \'$\' \'descendant-or-self\'\n' +
'     || lk == 57376                 // \'%\' \'descendant-or-self\'\n' +
'     || lk == 57620                 // \'{\' \'descendant-or-self\'\n' +
'     || lk == 57887                 // \'$\' \'descending\'\n' +
'     || lk == 57888                 // \'%\' \'descending\'\n' +
'     || lk == 58132                 // \'{\' \'descending\'\n' +
'     || lk == 60447                 // \'$\' \'div\'\n' +
'     || lk == 60448                 // \'%\' \'div\'\n' +
'     || lk == 60692                 // \'{\' \'div\'\n' +
'     || lk == 60959                 // \'$\' \'document\'\n' +
'     || lk == 60960                 // \'%\' \'document\'\n' +
'     || lk == 61204                 // \'{\' \'document\'\n' +
'     || lk == 61471                 // \'$\' \'document-node\'\n' +
'     || lk == 61472                 // \'%\' \'document-node\'\n' +
'     || lk == 61716                 // \'{\' \'document-node\'\n' +
'     || lk == 61983                 // \'$\' \'element\'\n' +
'     || lk == 61984                 // \'%\' \'element\'\n' +
'     || lk == 62228                 // \'{\' \'element\'\n' +
'     || lk == 62495                 // \'$\' \'else\'\n' +
'     || lk == 62496                 // \'%\' \'else\'\n' +
'     || lk == 62740                 // \'{\' \'else\'\n' +
'     || lk == 63007                 // \'$\' \'empty\'\n' +
'     || lk == 63008                 // \'%\' \'empty\'\n' +
'     || lk == 63252                 // \'{\' \'empty\'\n' +
'     || lk == 63519                 // \'$\' \'empty-sequence\'\n' +
'     || lk == 63520                 // \'%\' \'empty-sequence\'\n' +
'     || lk == 63764                 // \'{\' \'empty-sequence\'\n' +
'     || lk == 64031                 // \'$\' \'encoding\'\n' +
'     || lk == 64032                 // \'%\' \'encoding\'\n' +
'     || lk == 64276                 // \'{\' \'encoding\'\n' +
'     || lk == 64543                 // \'$\' \'end\'\n' +
'     || lk == 64544                 // \'%\' \'end\'\n' +
'     || lk == 64788                 // \'{\' \'end\'\n' +
'     || lk == 65567                 // \'$\' \'eq\'\n' +
'     || lk == 65568                 // \'%\' \'eq\'\n' +
'     || lk == 65812                 // \'{\' \'eq\'\n' +
'     || lk == 66079                 // \'$\' \'every\'\n' +
'     || lk == 66080                 // \'%\' \'every\'\n' +
'     || lk == 66324                 // \'{\' \'every\'\n' +
'     || lk == 67103                 // \'$\' \'except\'\n' +
'     || lk == 67104                 // \'%\' \'except\'\n' +
'     || lk == 67348                 // \'{\' \'except\'\n' +
'     || lk == 67615                 // \'$\' \'exit\'\n' +
'     || lk == 67616                 // \'%\' \'exit\'\n' +
'     || lk == 67860                 // \'{\' \'exit\'\n' +
'     || lk == 68127                 // \'$\' \'external\'\n' +
'     || lk == 68128                 // \'%\' \'external\'\n' +
'     || lk == 68372                 // \'{\' \'external\'\n' +
'     || lk == 68639                 // \'$\' \'first\'\n' +
'     || lk == 68640                 // \'%\' \'first\'\n' +
'     || lk == 68884                 // \'{\' \'first\'\n' +
'     || lk == 69151                 // \'$\' \'following\'\n' +
'     || lk == 69152                 // \'%\' \'following\'\n' +
'     || lk == 69396                 // \'{\' \'following\'\n' +
'     || lk == 69663                 // \'$\' \'following-sibling\'\n' +
'     || lk == 69664                 // \'%\' \'following-sibling\'\n' +
'     || lk == 69908                 // \'{\' \'following-sibling\'\n' +
'     || lk == 70175                 // \'$\' \'for\'\n' +
'     || lk == 70176                 // \'%\' \'for\'\n' +
'     || lk == 70420                 // \'{\' \'for\'\n' +
'     || lk == 72223                 // \'$\' \'ft-option\'\n' +
'     || lk == 72224                 // \'%\' \'ft-option\'\n' +
'     || lk == 72468                 // \'{\' \'ft-option\'\n' +
'     || lk == 74271                 // \'$\' \'function\'\n' +
'     || lk == 74272                 // \'%\' \'function\'\n' +
'     || lk == 74516                 // \'{\' \'function\'\n' +
'     || lk == 74783                 // \'$\' \'ge\'\n' +
'     || lk == 74784                 // \'%\' \'ge\'\n' +
'     || lk == 75028                 // \'{\' \'ge\'\n' +
'     || lk == 75807                 // \'$\' \'group\'\n' +
'     || lk == 75808                 // \'%\' \'group\'\n' +
'     || lk == 76052                 // \'{\' \'group\'\n' +
'     || lk == 76831                 // \'$\' \'gt\'\n' +
'     || lk == 76832                 // \'%\' \'gt\'\n' +
'     || lk == 77076                 // \'{\' \'gt\'\n' +
'     || lk == 77343                 // \'$\' \'idiv\'\n' +
'     || lk == 77344                 // \'%\' \'idiv\'\n' +
'     || lk == 77588                 // \'{\' \'idiv\'\n' +
'     || lk == 77855                 // \'$\' \'if\'\n' +
'     || lk == 77856                 // \'%\' \'if\'\n' +
'     || lk == 78100                 // \'{\' \'if\'\n' +
'     || lk == 78367                 // \'$\' \'import\'\n' +
'     || lk == 78368                 // \'%\' \'import\'\n' +
'     || lk == 78612                 // \'{\' \'import\'\n' +
'     || lk == 78879                 // \'$\' \'in\'\n' +
'     || lk == 78880                 // \'%\' \'in\'\n' +
'     || lk == 79124                 // \'{\' \'in\'\n' +
'     || lk == 79391                 // \'$\' \'index\'\n' +
'     || lk == 79392                 // \'%\' \'index\'\n' +
'     || lk == 79636                 // \'{\' \'index\'\n' +
'     || lk == 81439                 // \'$\' \'insert\'\n' +
'     || lk == 81440                 // \'%\' \'insert\'\n' +
'     || lk == 81684                 // \'{\' \'insert\'\n' +
'     || lk == 81951                 // \'$\' \'instance\'\n' +
'     || lk == 81952                 // \'%\' \'instance\'\n' +
'     || lk == 82196                 // \'{\' \'instance\'\n' +
'     || lk == 82463                 // \'$\' \'integrity\'\n' +
'     || lk == 82464                 // \'%\' \'integrity\'\n' +
'     || lk == 82708                 // \'{\' \'integrity\'\n' +
'     || lk == 82975                 // \'$\' \'intersect\'\n' +
'     || lk == 82976                 // \'%\' \'intersect\'\n' +
'     || lk == 83220                 // \'{\' \'intersect\'\n' +
'     || lk == 83487                 // \'$\' \'into\'\n' +
'     || lk == 83488                 // \'%\' \'into\'\n' +
'     || lk == 83732                 // \'{\' \'into\'\n' +
'     || lk == 83999                 // \'$\' \'is\'\n' +
'     || lk == 84000                 // \'%\' \'is\'\n' +
'     || lk == 84244                 // \'{\' \'is\'\n' +
'     || lk == 84511                 // \'$\' \'item\'\n' +
'     || lk == 84512                 // \'%\' \'item\'\n' +
'     || lk == 84756                 // \'{\' \'item\'\n' +
'     || lk == 85780                 // \'{\' \'json-item\'\n' +
'     || lk == 87071                 // \'$\' \'last\'\n' +
'     || lk == 87072                 // \'%\' \'last\'\n' +
'     || lk == 87316                 // \'{\' \'last\'\n' +
'     || lk == 87583                 // \'$\' \'lax\'\n' +
'     || lk == 87584                 // \'%\' \'lax\'\n' +
'     || lk == 87828                 // \'{\' \'lax\'\n' +
'     || lk == 88095                 // \'$\' \'le\'\n' +
'     || lk == 88096                 // \'%\' \'le\'\n' +
'     || lk == 88340                 // \'{\' \'le\'\n' +
'     || lk == 89119                 // \'$\' \'let\'\n' +
'     || lk == 89120                 // \'%\' \'let\'\n' +
'     || lk == 89364                 // \'{\' \'let\'\n' +
'     || lk == 90143                 // \'$\' \'loop\'\n' +
'     || lk == 90144                 // \'%\' \'loop\'\n' +
'     || lk == 90388                 // \'{\' \'loop\'\n' +
'     || lk == 91167                 // \'$\' \'lt\'\n' +
'     || lk == 91168                 // \'%\' \'lt\'\n' +
'     || lk == 91412                 // \'{\' \'lt\'\n' +
'     || lk == 92191                 // \'$\' \'mod\'\n' +
'     || lk == 92192                 // \'%\' \'mod\'\n' +
'     || lk == 92436                 // \'{\' \'mod\'\n' +
'     || lk == 92703                 // \'$\' \'modify\'\n' +
'     || lk == 92704                 // \'%\' \'modify\'\n' +
'     || lk == 92948                 // \'{\' \'modify\'\n' +
'     || lk == 93215                 // \'$\' \'module\'\n' +
'     || lk == 93216                 // \'%\' \'module\'\n' +
'     || lk == 93460                 // \'{\' \'module\'\n' +
'     || lk == 94239                 // \'$\' \'namespace\'\n' +
'     || lk == 94240                 // \'%\' \'namespace\'\n' +
'     || lk == 94484                 // \'{\' \'namespace\'\n' +
'     || lk == 94751                 // \'$\' \'namespace-node\'\n' +
'     || lk == 94752                 // \'%\' \'namespace-node\'\n' +
'     || lk == 94996                 // \'{\' \'namespace-node\'\n' +
'     || lk == 95263                 // \'$\' \'ne\'\n' +
'     || lk == 95264                 // \'%\' \'ne\'\n' +
'     || lk == 95508                 // \'{\' \'ne\'\n' +
'     || lk == 97823                 // \'$\' \'node\'\n' +
'     || lk == 97824                 // \'%\' \'node\'\n' +
'     || lk == 98068                 // \'{\' \'node\'\n' +
'     || lk == 98335                 // \'$\' \'nodes\'\n' +
'     || lk == 98336                 // \'%\' \'nodes\'\n' +
'     || lk == 98580                 // \'{\' \'nodes\'\n' +
'     || lk == 99604                 // \'{\' \'object\'\n' +
'     || lk == 101407                // \'$\' \'only\'\n' +
'     || lk == 101408                // \'%\' \'only\'\n' +
'     || lk == 101652                // \'{\' \'only\'\n' +
'     || lk == 101919                // \'$\' \'option\'\n' +
'     || lk == 101920                // \'%\' \'option\'\n' +
'     || lk == 102164                // \'{\' \'option\'\n' +
'     || lk == 102431                // \'$\' \'or\'\n' +
'     || lk == 102432                // \'%\' \'or\'\n' +
'     || lk == 102676                // \'{\' \'or\'\n' +
'     || lk == 102943                // \'$\' \'order\'\n' +
'     || lk == 102944                // \'%\' \'order\'\n' +
'     || lk == 103188                // \'{\' \'order\'\n' +
'     || lk == 103455                // \'$\' \'ordered\'\n' +
'     || lk == 103456                // \'%\' \'ordered\'\n' +
'     || lk == 103700                // \'{\' \'ordered\'\n' +
'     || lk == 103967                // \'$\' \'ordering\'\n' +
'     || lk == 103968                // \'%\' \'ordering\'\n' +
'     || lk == 104212                // \'{\' \'ordering\'\n' +
'     || lk == 105503                // \'$\' \'parent\'\n' +
'     || lk == 105504                // \'%\' \'parent\'\n' +
'     || lk == 105748                // \'{\' \'parent\'\n' +
'     || lk == 108575                // \'$\' \'preceding\'\n' +
'     || lk == 108576                // \'%\' \'preceding\'\n' +
'     || lk == 108820                // \'{\' \'preceding\'\n' +
'     || lk == 109087                // \'$\' \'preceding-sibling\'\n' +
'     || lk == 109088                // \'%\' \'preceding-sibling\'\n' +
'     || lk == 109332                // \'{\' \'preceding-sibling\'\n' +
'     || lk == 110623                // \'$\' \'processing-instruction\'\n' +
'     || lk == 110624                // \'%\' \'processing-instruction\'\n' +
'     || lk == 110868                // \'{\' \'processing-instruction\'\n' +
'     || lk == 111647                // \'$\' \'rename\'\n' +
'     || lk == 111648                // \'%\' \'rename\'\n' +
'     || lk == 111892                // \'{\' \'rename\'\n' +
'     || lk == 112159                // \'$\' \'replace\'\n' +
'     || lk == 112160                // \'%\' \'replace\'\n' +
'     || lk == 112404                // \'{\' \'replace\'\n' +
'     || lk == 112671                // \'$\' \'return\'\n' +
'     || lk == 112672                // \'%\' \'return\'\n' +
'     || lk == 112916                // \'{\' \'return\'\n' +
'     || lk == 113183                // \'$\' \'returning\'\n' +
'     || lk == 113184                // \'%\' \'returning\'\n' +
'     || lk == 113428                // \'{\' \'returning\'\n' +
'     || lk == 113695                // \'$\' \'revalidation\'\n' +
'     || lk == 113696                // \'%\' \'revalidation\'\n' +
'     || lk == 113940                // \'{\' \'revalidation\'\n' +
'     || lk == 114719                // \'$\' \'satisfies\'\n' +
'     || lk == 114720                // \'%\' \'satisfies\'\n' +
'     || lk == 114964                // \'{\' \'satisfies\'\n' +
'     || lk == 115231                // \'$\' \'schema\'\n' +
'     || lk == 115232                // \'%\' \'schema\'\n' +
'     || lk == 115476                // \'{\' \'schema\'\n' +
'     || lk == 115743                // \'$\' \'schema-attribute\'\n' +
'     || lk == 115744                // \'%\' \'schema-attribute\'\n' +
'     || lk == 115988                // \'{\' \'schema-attribute\'\n' +
'     || lk == 116255                // \'$\' \'schema-element\'\n' +
'     || lk == 116256                // \'%\' \'schema-element\'\n' +
'     || lk == 116500                // \'{\' \'schema-element\'\n' +
'     || lk == 116767                // \'$\' \'score\'\n' +
'     || lk == 116768                // \'%\' \'score\'\n' +
'     || lk == 117012                // \'{\' \'score\'\n' +
'     || lk == 117279                // \'$\' \'self\'\n' +
'     || lk == 117280                // \'%\' \'self\'\n' +
'     || lk == 117524                // \'{\' \'self\'\n' +
'     || lk == 119839                // \'$\' \'sliding\'\n' +
'     || lk == 119840                // \'%\' \'sliding\'\n' +
'     || lk == 120084                // \'{\' \'sliding\'\n' +
'     || lk == 120351                // \'$\' \'some\'\n' +
'     || lk == 120352                // \'%\' \'some\'\n' +
'     || lk == 120596                // \'{\' \'some\'\n' +
'     || lk == 120863                // \'$\' \'stable\'\n' +
'     || lk == 120864                // \'%\' \'stable\'\n' +
'     || lk == 121108                // \'{\' \'stable\'\n' +
'     || lk == 121375                // \'$\' \'start\'\n' +
'     || lk == 121376                // \'%\' \'start\'\n' +
'     || lk == 121620                // \'{\' \'start\'\n' +
'     || lk == 122911                // \'$\' \'strict\'\n' +
'     || lk == 122912                // \'%\' \'strict\'\n' +
'     || lk == 123156                // \'{\' \'strict\'\n' +
'     || lk == 124447                // \'$\' \'switch\'\n' +
'     || lk == 124448                // \'%\' \'switch\'\n' +
'     || lk == 124692                // \'{\' \'switch\'\n' +
'     || lk == 124959                // \'$\' \'text\'\n' +
'     || lk == 124960                // \'%\' \'text\'\n' +
'     || lk == 125204                // \'{\' \'text\'\n' +
'     || lk == 127007                // \'$\' \'to\'\n' +
'     || lk == 127008                // \'%\' \'to\'\n' +
'     || lk == 127252                // \'{\' \'to\'\n' +
'     || lk == 127519                // \'$\' \'treat\'\n' +
'     || lk == 127520                // \'%\' \'treat\'\n' +
'     || lk == 127764                // \'{\' \'treat\'\n' +
'     || lk == 128031                // \'$\' \'try\'\n' +
'     || lk == 128032                // \'%\' \'try\'\n' +
'     || lk == 128276                // \'{\' \'try\'\n' +
'     || lk == 128543                // \'$\' \'tumbling\'\n' +
'     || lk == 128544                // \'%\' \'tumbling\'\n' +
'     || lk == 128788                // \'{\' \'tumbling\'\n' +
'     || lk == 129055                // \'$\' \'type\'\n' +
'     || lk == 129056                // \'%\' \'type\'\n' +
'     || lk == 129300                // \'{\' \'type\'\n' +
'     || lk == 129567                // \'$\' \'typeswitch\'\n' +
'     || lk == 129568                // \'%\' \'typeswitch\'\n' +
'     || lk == 129812                // \'{\' \'typeswitch\'\n' +
'     || lk == 130079                // \'$\' \'union\'\n' +
'     || lk == 130080                // \'%\' \'union\'\n' +
'     || lk == 130324                // \'{\' \'union\'\n' +
'     || lk == 131103                // \'$\' \'unordered\'\n' +
'     || lk == 131104                // \'%\' \'unordered\'\n' +
'     || lk == 131348                // \'{\' \'unordered\'\n' +
'     || lk == 131615                // \'$\' \'updating\'\n' +
'     || lk == 131616                // \'%\' \'updating\'\n' +
'     || lk == 131860                // \'{\' \'updating\'\n' +
'     || lk == 133151                // \'$\' \'validate\'\n' +
'     || lk == 133152                // \'%\' \'validate\'\n' +
'     || lk == 133396                // \'{\' \'validate\'\n' +
'     || lk == 133663                // \'$\' \'value\'\n' +
'     || lk == 133664                // \'%\' \'value\'\n' +
'     || lk == 133908                // \'{\' \'value\'\n' +
'     || lk == 134175                // \'$\' \'variable\'\n' +
'     || lk == 134176                // \'%\' \'variable\'\n' +
'     || lk == 134420                // \'{\' \'variable\'\n' +
'     || lk == 134687                // \'$\' \'version\'\n' +
'     || lk == 134688                // \'%\' \'version\'\n' +
'     || lk == 134932                // \'{\' \'version\'\n' +
'     || lk == 136223                // \'$\' \'where\'\n' +
'     || lk == 136224                // \'%\' \'where\'\n' +
'     || lk == 136468                // \'{\' \'where\'\n' +
'     || lk == 136735                // \'$\' \'while\'\n' +
'     || lk == 136736                // \'%\' \'while\'\n' +
'     || lk == 136980                // \'{\' \'while\'\n' +
'     || lk == 138271                // \'$\' \'with\'\n' +
'     || lk == 138272                // \'%\' \'with\'\n' +
'     || lk == 138516                // \'{\' \'with\'\n' +
'     || lk == 140319                // \'$\' \'xquery\'\n' +
'     || lk == 140320                // \'%\' \'xquery\'\n' +
'     || lk == 140564                // \'{\' \'xquery\'\n' +
'     || lk == 141588                // \'{\' \'{\'\n' +
'     || lk == 142612                // \'{\' \'{|\'\n' +
'     || lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(7, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_ApplyStatement();\n' +
'          memoize(7, e0A, -1);\n' +
'          lk = -14;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          try\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            try_AssignStatement();\n' +
'            memoize(7, e0A, -2);\n' +
'            lk = -14;\n' +
'          }\n' +
'          catch (p2A)\n' +
'          {\n' +
'            try\n' +
'            {\n' +
'              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'              b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'              try_BlockStatement();\n' +
'              memoize(7, e0A, -3);\n' +
'              lk = -14;\n' +
'            }\n' +
'            catch (p3A)\n' +
'            {\n' +
'              try\n' +
'              {\n' +
'                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'                b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'                try_VarDeclStatement();\n' +
'                memoize(7, e0A, -12);\n' +
'                lk = -14;\n' +
'              }\n' +
'              catch (p12A)\n' +
'              {\n' +
'                lk = -13;\n' +
'                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'                b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'                memoize(7, e0A, -13);\n' +
'              }\n' +
'            }\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -2:\n' +
'      try_AssignStatement();\n' +
'      break;\n' +
'    case -3:\n' +
'      try_BlockStatement();\n' +
'      break;\n' +
'    case 90198:                     // \'break\' \'loop\'\n' +
'      try_BreakStatement();\n' +
'      break;\n' +
'    case 90214:                     // \'continue\' \'loop\'\n' +
'      try_ContinueStatement();\n' +
'      break;\n' +
'    case 113284:                    // \'exit\' \'returning\'\n' +
'      try_ExitStatement();\n' +
'      break;\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'    case 16046:                     // \'let\' \'$\'\n' +
'    case 116910:                    // \'let\' \'score\'\n' +
'    case 119945:                    // \'for\' \'sliding\'\n' +
'    case 128649:                    // \'for\' \'tumbling\'\n' +
'      try_FLWORStatement();\n' +
'      break;\n' +
'    case 17560:                     // \'if\' \'(\'\n' +
'      try_IfStatement();\n' +
'      break;\n' +
'    case 17651:                     // \'switch\' \'(\'\n' +
'      try_SwitchStatement();\n' +
'      break;\n' +
'    case 141562:                    // \'try\' \'{\'\n' +
'      try_TryCatchStatement();\n' +
'      break;\n' +
'    case 17661:                     // \'typeswitch\' \'(\'\n' +
'      try_TypeswitchStatement();\n' +
'      break;\n' +
'    case -12:\n' +
'    case 16134:                     // \'variable\' \'$\'\n' +
'      try_VarDeclStatement();\n' +
'      break;\n' +
'    case -13:\n' +
'      try_WhileStatement();\n' +
'      break;\n' +
'    case -14:\n' +
'      break;\n' +
'    default:\n' +
'      try_ApplyStatement();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ApplyStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ApplyStatement", e0);\n' +
'    parse_ExprSimple();\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("ApplyStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_ApplyStatement()\n' +
'  {\n' +
'    try_ExprSimple();\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_AssignStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("AssignStatement", e0);\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shift(52);                      // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("AssignStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_AssignStatement()\n' +
'  {\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(27);                // S^WS | \'(:\' | \':=\'\n' +
'    shiftT(52);                     // \':=\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_BlockStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("BlockStatement", e0);\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    whitespace();\n' +
'    parse_Statements();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("BlockStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_BlockStatement()\n' +
'  {\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    try_Statements();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_BreakStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("BreakStatement", e0);\n' +
'    shift(86);                      // \'break\'\n' +
'    lookahead1W(59);                // S^WS | \'(:\' | \'loop\'\n' +
'    shift(176);                     // \'loop\'\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("BreakStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_BreakStatement()\n' +
'  {\n' +
'    shiftT(86);                     // \'break\'\n' +
'    lookahead1W(59);                // S^WS | \'(:\' | \'loop\'\n' +
'    shiftT(176);                    // \'loop\'\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_ContinueStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ContinueStatement", e0);\n' +
'    shift(102);                     // \'continue\'\n' +
'    lookahead1W(59);                // S^WS | \'(:\' | \'loop\'\n' +
'    shift(176);                     // \'loop\'\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("ContinueStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_ContinueStatement()\n' +
'  {\n' +
'    shiftT(102);                    // \'continue\'\n' +
'    lookahead1W(59);                // S^WS | \'(:\' | \'loop\'\n' +
'    shiftT(176);                    // \'loop\'\n' +
'    lookahead1W(28);                // S^WS | \'(:\' | \';\'\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_ExitStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ExitStatement", e0);\n' +
'    shift(132);                     // \'exit\'\n' +
'    lookahead1W(71);                // S^WS | \'(:\' | \'returning\'\n' +
'    shift(221);                     // \'returning\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("ExitStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_ExitStatement()\n' +
'  {\n' +
'    shiftT(132);                    // \'exit\'\n' +
'    lookahead1W(71);                // S^WS | \'(:\' | \'returning\'\n' +
'    shiftT(221);                    // \'returning\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_FLWORStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FLWORStatement", e0);\n' +
'    parse_InitialClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(173);             // S^WS | \'(:\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' | \'stable\' |\n' +
'                                    // \'where\'\n' +
'      if (l1 == 220)                // \'return\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_IntermediateClause();\n' +
'    }\n' +
'    whitespace();\n' +
'    parse_ReturnStatement();\n' +
'    eventHandler.endNonterminal("FLWORStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_FLWORStatement()\n' +
'  {\n' +
'    try_InitialClause();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(173);             // S^WS | \'(:\' | \'count\' | \'for\' | \'group\' | \'let\' | \'order\' | \'return\' | \'stable\' |\n' +
'                                    // \'where\'\n' +
'      if (l1 == 220)                // \'return\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_IntermediateClause();\n' +
'    }\n' +
'    try_ReturnStatement();\n' +
'  }\n' +
'\n' +
'  function parse_ReturnStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ReturnStatement", e0);\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("ReturnStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_ReturnStatement()\n' +
'  {\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_IfStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("IfStatement", e0);\n' +
'    shift(152);                     // \'if\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(77);                // S^WS | \'(:\' | \'then\'\n' +
'    shift(245);                     // \'then\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    lookahead1W(48);                // S^WS | \'(:\' | \'else\'\n' +
'    shift(122);                     // \'else\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("IfStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_IfStatement()\n' +
'  {\n' +
'    shiftT(152);                    // \'if\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    lookahead1W(77);                // S^WS | \'(:\' | \'then\'\n' +
'    shiftT(245);                    // \'then\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'    lookahead1W(48);                // S^WS | \'(:\' | \'else\'\n' +
'    shiftT(122);                    // \'else\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_SwitchStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SwitchStatement", e0);\n' +
'    shift(243);                     // \'switch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      whitespace();\n' +
'      parse_SwitchCaseStatement();\n' +
'      lookahead1W(113);             // S^WS | \'(:\' | \'case\' | \'default\'\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("SwitchStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_SwitchStatement()\n' +
'  {\n' +
'    shiftT(243);                    // \'switch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      try_SwitchCaseStatement();\n' +
'      lookahead1W(113);             // S^WS | \'(:\' | \'case\' | \'default\'\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_SwitchCaseStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("SwitchCaseStatement", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      shift(88);                    // \'case\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_SwitchCaseOperand();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("SwitchCaseStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_SwitchCaseStatement()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      shiftT(88);                   // \'case\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_SwitchCaseOperand();\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_TryCatchStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TryCatchStatement", e0);\n' +
'    shift(250);                     // \'try\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_BlockStatement();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(36);              // S^WS | \'(:\' | \'catch\'\n' +
'      shift(91);                    // \'catch\'\n' +
'      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_CatchErrorList();\n' +
'      whitespace();\n' +
'      parse_BlockStatement();\n' +
'      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 91:                      // \'catch\'\n' +
'        lookahead2W(267);           // Wildcard | EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' |\n' +
'                                    // \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk == 38491               // \'catch\' \'and\'\n' +
'       || lk == 45659               // \'catch\' \'cast\'\n' +
'       || lk == 46171               // \'catch\' \'castable\'\n' +
'       || lk == 60507               // \'catch\' \'div\'\n' +
'       || lk == 65627               // \'catch\' \'eq\'\n' +
'       || lk == 67163               // \'catch\' \'except\'\n' +
'       || lk == 74843               // \'catch\' \'ge\'\n' +
'       || lk == 76891               // \'catch\' \'gt\'\n' +
'       || lk == 77403               // \'catch\' \'idiv\'\n' +
'       || lk == 82011               // \'catch\' \'instance\'\n' +
'       || lk == 83035               // \'catch\' \'intersect\'\n' +
'       || lk == 84059               // \'catch\' \'is\'\n' +
'       || lk == 88155               // \'catch\' \'le\'\n' +
'       || lk == 91227               // \'catch\' \'lt\'\n' +
'       || lk == 92251               // \'catch\' \'mod\'\n' +
'       || lk == 95323               // \'catch\' \'ne\'\n' +
'       || lk == 102491              // \'catch\' \'or\'\n' +
'       || lk == 127067              // \'catch\' \'to\'\n' +
'       || lk == 127579              // \'catch\' \'treat\'\n' +
'       || lk == 130139)             // \'catch\' \'union\'\n' +
'      {\n' +
'        lk = memoized(8, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            lookahead1W(36);        // S^WS | \'(:\' | \'catch\'\n' +
'            shiftT(91);             // \'catch\'\n' +
'            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'            try_CatchErrorList();\n' +
'            try_BlockStatement();\n' +
'            lk = -1;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            lk = -2;\n' +
'          }\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(8, e0, lk);\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 2651                // \'catch\' Wildcard\n' +
'       && lk != 3163                // \'catch\' EQName^Token\n' +
'       && lk != 35931               // \'catch\' \'after\'\n' +
'       && lk != 36955               // \'catch\' \'allowing\'\n' +
'       && lk != 37467               // \'catch\' \'ancestor\'\n' +
'       && lk != 37979               // \'catch\' \'ancestor-or-self\'\n' +
'       && lk != 40539               // \'catch\' \'as\'\n' +
'       && lk != 41051               // \'catch\' \'ascending\'\n' +
'       && lk != 41563               // \'catch\' \'at\'\n' +
'       && lk != 42075               // \'catch\' \'attribute\'\n' +
'       && lk != 42587               // \'catch\' \'base-uri\'\n' +
'       && lk != 43099               // \'catch\' \'before\'\n' +
'       && lk != 43611               // \'catch\' \'boundary-space\'\n' +
'       && lk != 44123               // \'catch\' \'break\'\n' +
'       && lk != 45147               // \'catch\' \'case\'\n' +
'       && lk != 46683               // \'catch\' \'catch\'\n' +
'       && lk != 47707               // \'catch\' \'child\'\n' +
'       && lk != 48219               // \'catch\' \'collation\'\n' +
'       && lk != 49243               // \'catch\' \'comment\'\n' +
'       && lk != 49755               // \'catch\' \'constraint\'\n' +
'       && lk != 50267               // \'catch\' \'construction\'\n' +
'       && lk != 51803               // \'catch\' \'context\'\n' +
'       && lk != 52315               // \'catch\' \'continue\'\n' +
'       && lk != 52827               // \'catch\' \'copy\'\n' +
'       && lk != 53339               // \'catch\' \'copy-namespaces\'\n' +
'       && lk != 53851               // \'catch\' \'count\'\n' +
'       && lk != 54363               // \'catch\' \'decimal-format\'\n' +
'       && lk != 55387               // \'catch\' \'declare\'\n' +
'       && lk != 55899               // \'catch\' \'default\'\n' +
'       && lk != 56411               // \'catch\' \'delete\'\n' +
'       && lk != 56923               // \'catch\' \'descendant\'\n' +
'       && lk != 57435               // \'catch\' \'descendant-or-self\'\n' +
'       && lk != 57947               // \'catch\' \'descending\'\n' +
'       && lk != 61019               // \'catch\' \'document\'\n' +
'       && lk != 61531               // \'catch\' \'document-node\'\n' +
'       && lk != 62043               // \'catch\' \'element\'\n' +
'       && lk != 62555               // \'catch\' \'else\'\n' +
'       && lk != 63067               // \'catch\' \'empty\'\n' +
'       && lk != 63579               // \'catch\' \'empty-sequence\'\n' +
'       && lk != 64091               // \'catch\' \'encoding\'\n' +
'       && lk != 64603               // \'catch\' \'end\'\n' +
'       && lk != 66139               // \'catch\' \'every\'\n' +
'       && lk != 67675               // \'catch\' \'exit\'\n' +
'       && lk != 68187               // \'catch\' \'external\'\n' +
'       && lk != 68699               // \'catch\' \'first\'\n' +
'       && lk != 69211               // \'catch\' \'following\'\n' +
'       && lk != 69723               // \'catch\' \'following-sibling\'\n' +
'       && lk != 70235               // \'catch\' \'for\'\n' +
'       && lk != 72283               // \'catch\' \'ft-option\'\n' +
'       && lk != 74331               // \'catch\' \'function\'\n' +
'       && lk != 75867               // \'catch\' \'group\'\n' +
'       && lk != 77915               // \'catch\' \'if\'\n' +
'       && lk != 78427               // \'catch\' \'import\'\n' +
'       && lk != 78939               // \'catch\' \'in\'\n' +
'       && lk != 79451               // \'catch\' \'index\'\n' +
'       && lk != 81499               // \'catch\' \'insert\'\n' +
'       && lk != 82523               // \'catch\' \'integrity\'\n' +
'       && lk != 83547               // \'catch\' \'into\'\n' +
'       && lk != 84571               // \'catch\' \'item\'\n' +
'       && lk != 87131               // \'catch\' \'last\'\n' +
'       && lk != 87643               // \'catch\' \'lax\'\n' +
'       && lk != 89179               // \'catch\' \'let\'\n' +
'       && lk != 90203               // \'catch\' \'loop\'\n' +
'       && lk != 92763               // \'catch\' \'modify\'\n' +
'       && lk != 93275               // \'catch\' \'module\'\n' +
'       && lk != 94299               // \'catch\' \'namespace\'\n' +
'       && lk != 94811               // \'catch\' \'namespace-node\'\n' +
'       && lk != 97883               // \'catch\' \'node\'\n' +
'       && lk != 98395               // \'catch\' \'nodes\'\n' +
'       && lk != 101467              // \'catch\' \'only\'\n' +
'       && lk != 101979              // \'catch\' \'option\'\n' +
'       && lk != 103003              // \'catch\' \'order\'\n' +
'       && lk != 103515              // \'catch\' \'ordered\'\n' +
'       && lk != 104027              // \'catch\' \'ordering\'\n' +
'       && lk != 105563              // \'catch\' \'parent\'\n' +
'       && lk != 108635              // \'catch\' \'preceding\'\n' +
'       && lk != 109147              // \'catch\' \'preceding-sibling\'\n' +
'       && lk != 110683              // \'catch\' \'processing-instruction\'\n' +
'       && lk != 111707              // \'catch\' \'rename\'\n' +
'       && lk != 112219              // \'catch\' \'replace\'\n' +
'       && lk != 112731              // \'catch\' \'return\'\n' +
'       && lk != 113243              // \'catch\' \'returning\'\n' +
'       && lk != 113755              // \'catch\' \'revalidation\'\n' +
'       && lk != 114779              // \'catch\' \'satisfies\'\n' +
'       && lk != 115291              // \'catch\' \'schema\'\n' +
'       && lk != 115803              // \'catch\' \'schema-attribute\'\n' +
'       && lk != 116315              // \'catch\' \'schema-element\'\n' +
'       && lk != 116827              // \'catch\' \'score\'\n' +
'       && lk != 117339              // \'catch\' \'self\'\n' +
'       && lk != 119899              // \'catch\' \'sliding\'\n' +
'       && lk != 120411              // \'catch\' \'some\'\n' +
'       && lk != 120923              // \'catch\' \'stable\'\n' +
'       && lk != 121435              // \'catch\' \'start\'\n' +
'       && lk != 122971              // \'catch\' \'strict\'\n' +
'       && lk != 124507              // \'catch\' \'switch\'\n' +
'       && lk != 125019              // \'catch\' \'text\'\n' +
'       && lk != 128091              // \'catch\' \'try\'\n' +
'       && lk != 128603              // \'catch\' \'tumbling\'\n' +
'       && lk != 129115              // \'catch\' \'type\'\n' +
'       && lk != 129627              // \'catch\' \'typeswitch\'\n' +
'       && lk != 131163              // \'catch\' \'unordered\'\n' +
'       && lk != 131675              // \'catch\' \'updating\'\n' +
'       && lk != 133211              // \'catch\' \'validate\'\n' +
'       && lk != 133723              // \'catch\' \'value\'\n' +
'       && lk != 134235              // \'catch\' \'variable\'\n' +
'       && lk != 134747              // \'catch\' \'version\'\n' +
'       && lk != 136283              // \'catch\' \'where\'\n' +
'       && lk != 136795              // \'catch\' \'while\'\n' +
'       && lk != 138331              // \'catch\' \'with\'\n' +
'       && lk != 140379)             // \'catch\' \'xquery\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    eventHandler.endNonterminal("TryCatchStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_TryCatchStatement()\n' +
'  {\n' +
'    shiftT(250);                    // \'try\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    try_BlockStatement();\n' +
'    lookahead1W(36);                // S^WS | \'(:\' | \'catch\'\n' +
'    shiftT(91);                     // \'catch\'\n' +
'    lookahead1W(251);               // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_CatchErrorList();\n' +
'    try_BlockStatement();\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | EOF | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' |\n' +
'                                    // \'..\' | \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      switch (l1)\n' +
'      {\n' +
'      case 91:                      // \'catch\'\n' +
'        lookahead2W(267);           // Wildcard | EQName^Token | S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \'*\' |\n' +
'                                    // \'+\' | \',\' | \'-\' | \'/\' | \'//\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' |\n' +
'                                    // \'>>\' | \'[\' | \'after\' | \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' |\n' +
'                                    // \'as\' | \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' |\n' +
'                                    // \'boundary-space\' | \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' |\n' +
'                                    // \'collation\' | \'comment\' | \'constraint\' | \'construction\' | \'contains\' |\n' +
'                                    // \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'|\' | \'||\' | \'}\'\n' +
'        break;\n' +
'      default:\n' +
'        lk = l1;\n' +
'      }\n' +
'      if (lk == 38491               // \'catch\' \'and\'\n' +
'       || lk == 45659               // \'catch\' \'cast\'\n' +
'       || lk == 46171               // \'catch\' \'castable\'\n' +
'       || lk == 60507               // \'catch\' \'div\'\n' +
'       || lk == 65627               // \'catch\' \'eq\'\n' +
'       || lk == 67163               // \'catch\' \'except\'\n' +
'       || lk == 74843               // \'catch\' \'ge\'\n' +
'       || lk == 76891               // \'catch\' \'gt\'\n' +
'       || lk == 77403               // \'catch\' \'idiv\'\n' +
'       || lk == 82011               // \'catch\' \'instance\'\n' +
'       || lk == 83035               // \'catch\' \'intersect\'\n' +
'       || lk == 84059               // \'catch\' \'is\'\n' +
'       || lk == 88155               // \'catch\' \'le\'\n' +
'       || lk == 91227               // \'catch\' \'lt\'\n' +
'       || lk == 92251               // \'catch\' \'mod\'\n' +
'       || lk == 95323               // \'catch\' \'ne\'\n' +
'       || lk == 102491              // \'catch\' \'or\'\n' +
'       || lk == 127067              // \'catch\' \'to\'\n' +
'       || lk == 127579              // \'catch\' \'treat\'\n' +
'       || lk == 130139)             // \'catch\' \'union\'\n' +
'      {\n' +
'        lk = memoized(8, e0);\n' +
'        if (lk == 0)\n' +
'        {\n' +
'          var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'          var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'          var b2A = b2; var e2A = e2;\n' +
'          try\n' +
'          {\n' +
'            lookahead1W(36);        // S^WS | \'(:\' | \'catch\'\n' +
'            shiftT(91);             // \'catch\'\n' +
'            lookahead1W(251);       // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'            try_CatchErrorList();\n' +
'            try_BlockStatement();\n' +
'            memoize(8, e0A, -1);\n' +
'            continue;\n' +
'          }\n' +
'          catch (p1A)\n' +
'          {\n' +
'            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'            b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'            memoize(8, e0A, -2);\n' +
'            break;\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'      if (lk != -1\n' +
'       && lk != 2651                // \'catch\' Wildcard\n' +
'       && lk != 3163                // \'catch\' EQName^Token\n' +
'       && lk != 35931               // \'catch\' \'after\'\n' +
'       && lk != 36955               // \'catch\' \'allowing\'\n' +
'       && lk != 37467               // \'catch\' \'ancestor\'\n' +
'       && lk != 37979               // \'catch\' \'ancestor-or-self\'\n' +
'       && lk != 40539               // \'catch\' \'as\'\n' +
'       && lk != 41051               // \'catch\' \'ascending\'\n' +
'       && lk != 41563               // \'catch\' \'at\'\n' +
'       && lk != 42075               // \'catch\' \'attribute\'\n' +
'       && lk != 42587               // \'catch\' \'base-uri\'\n' +
'       && lk != 43099               // \'catch\' \'before\'\n' +
'       && lk != 43611               // \'catch\' \'boundary-space\'\n' +
'       && lk != 44123               // \'catch\' \'break\'\n' +
'       && lk != 45147               // \'catch\' \'case\'\n' +
'       && lk != 46683               // \'catch\' \'catch\'\n' +
'       && lk != 47707               // \'catch\' \'child\'\n' +
'       && lk != 48219               // \'catch\' \'collation\'\n' +
'       && lk != 49243               // \'catch\' \'comment\'\n' +
'       && lk != 49755               // \'catch\' \'constraint\'\n' +
'       && lk != 50267               // \'catch\' \'construction\'\n' +
'       && lk != 51803               // \'catch\' \'context\'\n' +
'       && lk != 52315               // \'catch\' \'continue\'\n' +
'       && lk != 52827               // \'catch\' \'copy\'\n' +
'       && lk != 53339               // \'catch\' \'copy-namespaces\'\n' +
'       && lk != 53851               // \'catch\' \'count\'\n' +
'       && lk != 54363               // \'catch\' \'decimal-format\'\n' +
'       && lk != 55387               // \'catch\' \'declare\'\n' +
'       && lk != 55899               // \'catch\' \'default\'\n' +
'       && lk != 56411               // \'catch\' \'delete\'\n' +
'       && lk != 56923               // \'catch\' \'descendant\'\n' +
'       && lk != 57435               // \'catch\' \'descendant-or-self\'\n' +
'       && lk != 57947               // \'catch\' \'descending\'\n' +
'       && lk != 61019               // \'catch\' \'document\'\n' +
'       && lk != 61531               // \'catch\' \'document-node\'\n' +
'       && lk != 62043               // \'catch\' \'element\'\n' +
'       && lk != 62555               // \'catch\' \'else\'\n' +
'       && lk != 63067               // \'catch\' \'empty\'\n' +
'       && lk != 63579               // \'catch\' \'empty-sequence\'\n' +
'       && lk != 64091               // \'catch\' \'encoding\'\n' +
'       && lk != 64603               // \'catch\' \'end\'\n' +
'       && lk != 66139               // \'catch\' \'every\'\n' +
'       && lk != 67675               // \'catch\' \'exit\'\n' +
'       && lk != 68187               // \'catch\' \'external\'\n' +
'       && lk != 68699               // \'catch\' \'first\'\n' +
'       && lk != 69211               // \'catch\' \'following\'\n' +
'       && lk != 69723               // \'catch\' \'following-sibling\'\n' +
'       && lk != 70235               // \'catch\' \'for\'\n' +
'       && lk != 72283               // \'catch\' \'ft-option\'\n' +
'       && lk != 74331               // \'catch\' \'function\'\n' +
'       && lk != 75867               // \'catch\' \'group\'\n' +
'       && lk != 77915               // \'catch\' \'if\'\n' +
'       && lk != 78427               // \'catch\' \'import\'\n' +
'       && lk != 78939               // \'catch\' \'in\'\n' +
'       && lk != 79451               // \'catch\' \'index\'\n' +
'       && lk != 81499               // \'catch\' \'insert\'\n' +
'       && lk != 82523               // \'catch\' \'integrity\'\n' +
'       && lk != 83547               // \'catch\' \'into\'\n' +
'       && lk != 84571               // \'catch\' \'item\'\n' +
'       && lk != 87131               // \'catch\' \'last\'\n' +
'       && lk != 87643               // \'catch\' \'lax\'\n' +
'       && lk != 89179               // \'catch\' \'let\'\n' +
'       && lk != 90203               // \'catch\' \'loop\'\n' +
'       && lk != 92763               // \'catch\' \'modify\'\n' +
'       && lk != 93275               // \'catch\' \'module\'\n' +
'       && lk != 94299               // \'catch\' \'namespace\'\n' +
'       && lk != 94811               // \'catch\' \'namespace-node\'\n' +
'       && lk != 97883               // \'catch\' \'node\'\n' +
'       && lk != 98395               // \'catch\' \'nodes\'\n' +
'       && lk != 101467              // \'catch\' \'only\'\n' +
'       && lk != 101979              // \'catch\' \'option\'\n' +
'       && lk != 103003              // \'catch\' \'order\'\n' +
'       && lk != 103515              // \'catch\' \'ordered\'\n' +
'       && lk != 104027              // \'catch\' \'ordering\'\n' +
'       && lk != 105563              // \'catch\' \'parent\'\n' +
'       && lk != 108635              // \'catch\' \'preceding\'\n' +
'       && lk != 109147              // \'catch\' \'preceding-sibling\'\n' +
'       && lk != 110683              // \'catch\' \'processing-instruction\'\n' +
'       && lk != 111707              // \'catch\' \'rename\'\n' +
'       && lk != 112219              // \'catch\' \'replace\'\n' +
'       && lk != 112731              // \'catch\' \'return\'\n' +
'       && lk != 113243              // \'catch\' \'returning\'\n' +
'       && lk != 113755              // \'catch\' \'revalidation\'\n' +
'       && lk != 114779              // \'catch\' \'satisfies\'\n' +
'       && lk != 115291              // \'catch\' \'schema\'\n' +
'       && lk != 115803              // \'catch\' \'schema-attribute\'\n' +
'       && lk != 116315              // \'catch\' \'schema-element\'\n' +
'       && lk != 116827              // \'catch\' \'score\'\n' +
'       && lk != 117339              // \'catch\' \'self\'\n' +
'       && lk != 119899              // \'catch\' \'sliding\'\n' +
'       && lk != 120411              // \'catch\' \'some\'\n' +
'       && lk != 120923              // \'catch\' \'stable\'\n' +
'       && lk != 121435              // \'catch\' \'start\'\n' +
'       && lk != 122971              // \'catch\' \'strict\'\n' +
'       && lk != 124507              // \'catch\' \'switch\'\n' +
'       && lk != 125019              // \'catch\' \'text\'\n' +
'       && lk != 128091              // \'catch\' \'try\'\n' +
'       && lk != 128603              // \'catch\' \'tumbling\'\n' +
'       && lk != 129115              // \'catch\' \'type\'\n' +
'       && lk != 129627              // \'catch\' \'typeswitch\'\n' +
'       && lk != 131163              // \'catch\' \'unordered\'\n' +
'       && lk != 131675              // \'catch\' \'updating\'\n' +
'       && lk != 133211              // \'catch\' \'validate\'\n' +
'       && lk != 133723              // \'catch\' \'value\'\n' +
'       && lk != 134235              // \'catch\' \'variable\'\n' +
'       && lk != 134747              // \'catch\' \'version\'\n' +
'       && lk != 136283              // \'catch\' \'where\'\n' +
'       && lk != 136795              // \'catch\' \'while\'\n' +
'       && lk != 138331              // \'catch\' \'with\'\n' +
'       && lk != 140379)             // \'catch\' \'xquery\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      lookahead1W(36);              // S^WS | \'(:\' | \'catch\'\n' +
'      shiftT(91);                   // \'catch\'\n' +
'      lookahead1W(251);             // Wildcard | EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_CatchErrorList();\n' +
'      try_BlockStatement();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_TypeswitchStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("TypeswitchStatement", e0);\n' +
'    shift(253);                     // \'typeswitch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      whitespace();\n' +
'      parse_CaseStatement();\n' +
'      lookahead1W(113);             // S^WS | \'(:\' | \'case\' | \'default\'\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shift(109);                     // \'default\'\n' +
'    lookahead1W(95);                // S^WS | \'$\' | \'(:\' | \'return\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'    }\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("TypeswitchStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_TypeswitchStatement()\n' +
'  {\n' +
'    shiftT(253);                    // \'typeswitch\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(35);              // S^WS | \'(:\' | \'case\'\n' +
'      try_CaseStatement();\n' +
'      lookahead1W(113);             // S^WS | \'(:\' | \'case\' | \'default\'\n' +
'      if (l1 != 88)                 // \'case\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'    }\n' +
'    shiftT(109);                    // \'default\'\n' +
'    lookahead1W(95);                // S^WS | \'$\' | \'(:\' | \'return\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'    }\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_CaseStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CaseStatement", e0);\n' +
'    shift(88);                      // \'case\'\n' +
'    lookahead1W(261);               // EQName^Token | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shift(79);                    // \'as\'\n' +
'    }\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    whitespace();\n' +
'    parse_SequenceType();\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shift(220);                     // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("CaseStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_CaseStatement()\n' +
'  {\n' +
'    shiftT(88);                     // \'case\'\n' +
'    lookahead1W(261);               // EQName^Token | S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' |\n' +
'                                    // \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' |\n' +
'                                    // \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(30);              // S^WS | \'(:\' | \'as\'\n' +
'      shiftT(79);                   // \'as\'\n' +
'    }\n' +
'    lookahead1W(260);               // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'    try_SequenceType();\n' +
'    lookahead1W(70);                // S^WS | \'(:\' | \'return\'\n' +
'    shiftT(220);                    // \'return\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_VarDeclStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("VarDeclStatement", e0);\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(98);              // S^WS | \'%\' | \'(:\' | \'variable\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      whitespace();\n' +
'      parse_Annotation();\n' +
'    }\n' +
'    shift(262);                     // \'variable\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shift(31);                      // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_VarName();\n' +
'    lookahead1W(157);               // S^WS | \'(:\' | \',\' | \':=\' | \';\' | \'as\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(145);               // S^WS | \'(:\' | \',\' | \':=\' | \';\'\n' +
'    if (l1 == 52)                   // \':=\'\n' +
'    {\n' +
'      shift(52);                    // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shift(41);                    // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shift(31);                    // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      whitespace();\n' +
'      parse_VarName();\n' +
'      lookahead1W(157);             // S^WS | \'(:\' | \',\' | \':=\' | \';\' | \'as\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        whitespace();\n' +
'        parse_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(145);             // S^WS | \'(:\' | \',\' | \':=\' | \';\'\n' +
'      if (l1 == 52)                 // \':=\'\n' +
'      {\n' +
'        shift(52);                  // \':=\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_ExprSingle();\n' +
'      }\n' +
'    }\n' +
'    shift(53);                      // \';\'\n' +
'    eventHandler.endNonterminal("VarDeclStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_VarDeclStatement()\n' +
'  {\n' +
'    for (;;)\n' +
'    {\n' +
'      lookahead1W(98);              // S^WS | \'%\' | \'(:\' | \'variable\'\n' +
'      if (l1 != 32)                 // \'%\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      try_Annotation();\n' +
'    }\n' +
'    shiftT(262);                    // \'variable\'\n' +
'    lookahead1W(21);                // S^WS | \'$\' | \'(:\'\n' +
'    shiftT(31);                     // \'$\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    try_VarName();\n' +
'    lookahead1W(157);               // S^WS | \'(:\' | \',\' | \':=\' | \';\' | \'as\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      try_TypeDeclaration();\n' +
'    }\n' +
'    lookahead1W(145);               // S^WS | \'(:\' | \',\' | \':=\' | \';\'\n' +
'    if (l1 == 52)                   // \':=\'\n' +
'    {\n' +
'      shiftT(52);                   // \':=\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'    for (;;)\n' +
'    {\n' +
'      if (l1 != 41)                 // \',\'\n' +
'      {\n' +
'        break;\n' +
'      }\n' +
'      shiftT(41);                   // \',\'\n' +
'      lookahead1W(21);              // S^WS | \'$\' | \'(:\'\n' +
'      shiftT(31);                   // \'$\'\n' +
'      lookahead1W(249);             // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'      try_VarName();\n' +
'      lookahead1W(157);             // S^WS | \'(:\' | \',\' | \':=\' | \';\' | \'as\'\n' +
'      if (l1 == 79)                 // \'as\'\n' +
'      {\n' +
'        try_TypeDeclaration();\n' +
'      }\n' +
'      lookahead1W(145);             // S^WS | \'(:\' | \',\' | \':=\' | \';\'\n' +
'      if (l1 == 52)                 // \':=\'\n' +
'      {\n' +
'        shiftT(52);                 // \':=\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        try_ExprSingle();\n' +
'      }\n' +
'    }\n' +
'    shiftT(53);                     // \';\'\n' +
'  }\n' +
'\n' +
'  function parse_WhileStatement()\n' +
'  {\n' +
'    eventHandler.startNonterminal("WhileStatement", e0);\n' +
'    shift(267);                     // \'while\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Expr();\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_Statement();\n' +
'    eventHandler.endNonterminal("WhileStatement", e0);\n' +
'  }\n' +
'\n' +
'  function try_WhileStatement()\n' +
'  {\n' +
'    shiftT(267);                    // \'while\'\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shiftT(34);                     // \'(\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Expr();\n' +
'    shiftT(37);                     // \')\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_Statement();\n' +
'  }\n' +
'\n' +
'  function parse_ExprSingle()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ExprSingle", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(233);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'sliding\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'tumbling\' | \'union\' |\n' +
'                                    // \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      lookahead2W(231);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'score\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' |\n' +
'                                    // \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      lookahead2W(230);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'{\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      lookahead2W(228);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'    case 16046:                     // \'let\' \'$\'\n' +
'    case 116910:                    // \'let\' \'score\'\n' +
'    case 119945:                    // \'for\' \'sliding\'\n' +
'    case 128649:                    // \'for\' \'tumbling\'\n' +
'      parse_FLWORExpr();\n' +
'      break;\n' +
'    case 17560:                     // \'if\' \'(\'\n' +
'      parse_IfExpr();\n' +
'      break;\n' +
'    case 17651:                     // \'switch\' \'(\'\n' +
'      parse_SwitchExpr();\n' +
'      break;\n' +
'    case 141562:                    // \'try\' \'{\'\n' +
'      parse_TryCatchExpr();\n' +
'      break;\n' +
'    case 17661:                     // \'typeswitch\' \'(\'\n' +
'      parse_TypeswitchExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_ExprSimple();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ExprSingle", e0);\n' +
'  }\n' +
'\n' +
'  function try_ExprSingle()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 137:                       // \'for\'\n' +
'      lookahead2W(233);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'sliding\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'tumbling\' | \'union\' |\n' +
'                                    // \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 174:                       // \'let\'\n' +
'      lookahead2W(231);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'score\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' |\n' +
'                                    // \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 250:                       // \'try\'\n' +
'      lookahead2W(230);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'{\' | \'|\' |\n' +
'                                    // \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 152:                       // \'if\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'      lookahead2W(228);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16009:                     // \'for\' \'$\'\n' +
'    case 16046:                     // \'let\' \'$\'\n' +
'    case 116910:                    // \'let\' \'score\'\n' +
'    case 119945:                    // \'for\' \'sliding\'\n' +
'    case 128649:                    // \'for\' \'tumbling\'\n' +
'      try_FLWORExpr();\n' +
'      break;\n' +
'    case 17560:                     // \'if\' \'(\'\n' +
'      try_IfExpr();\n' +
'      break;\n' +
'    case 17651:                     // \'switch\' \'(\'\n' +
'      try_SwitchExpr();\n' +
'      break;\n' +
'    case 141562:                    // \'try\' \'{\'\n' +
'      try_TryCatchExpr();\n' +
'      break;\n' +
'    case 17661:                     // \'typeswitch\' \'(\'\n' +
'      try_TypeswitchExpr();\n' +
'      break;\n' +
'    default:\n' +
'      try_ExprSimple();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ExprSimple()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ExprSimple", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 218:                       // \'rename\'\n' +
'      lookahead2W(232);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' |\n' +
'                                    // \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      lookahead2W(235);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' |\n' +
'                                    // \'value\' | \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'    case 159:                       // \'insert\'\n' +
'      lookahead2W(234);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 235:                       // \'some\'\n' +
'      lookahead2W(229);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16001:                     // \'every\' \'$\'\n' +
'    case 16107:                     // \'some\' \'$\'\n' +
'      parse_QuantifiedExpr();\n' +
'      break;\n' +
'    case 97951:                     // \'insert\' \'node\'\n' +
'    case 98463:                     // \'insert\' \'nodes\'\n' +
'      parse_InsertExpr();\n' +
'      break;\n' +
'    case 97902:                     // \'delete\' \'node\'\n' +
'    case 98414:                     // \'delete\' \'nodes\'\n' +
'      parse_DeleteExpr();\n' +
'      break;\n' +
'    case 98010:                     // \'rename\' \'node\'\n' +
'      parse_RenameExpr();\n' +
'      break;\n' +
'    case 98011:                     // \'replace\' \'node\'\n' +
'    case 133851:                    // \'replace\' \'value\'\n' +
'      parse_ReplaceExpr();\n' +
'      break;\n' +
'    case 15975:                     // \'copy\' \'$\'\n' +
'      parse_TransformExpr();\n' +
'      break;\n' +
'    case 85102:                     // \'delete\' \'json\'\n' +
'      parse_JSONDeleteExpr();\n' +
'      break;\n' +
'    case 85151:                     // \'insert\' \'json\'\n' +
'      parse_JSONInsertExpr();\n' +
'      break;\n' +
'    case 85210:                     // \'rename\' \'json\'\n' +
'      parse_JSONRenameExpr();\n' +
'      break;\n' +
'    case 85211:                     // \'replace\' \'json\'\n' +
'      parse_JSONReplaceExpr();\n' +
'      break;\n' +
'    case 77:                        // \'append\'\n' +
'      parse_JSONAppendExpr();\n' +
'      break;\n' +
'    default:\n' +
'      parse_OrExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("ExprSimple", e0);\n' +
'  }\n' +
'\n' +
'  function try_ExprSimple()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 218:                       // \'rename\'\n' +
'      lookahead2W(232);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' |\n' +
'                                    // \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 219:                       // \'replace\'\n' +
'      lookahead2W(235);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'only\' | \'or\' | \'order\' |\n' +
'                                    // \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' |\n' +
'                                    // \'value\' | \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 110:                       // \'delete\'\n' +
'    case 159:                       // \'insert\'\n' +
'      lookahead2W(234);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' | \'/\' |\n' +
'                                    // \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' | \']\' |\n' +
'                                    // \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'json\' | \'le\' |\n' +
'                                    // \'let\' | \'lt\' | \'mod\' | \'modify\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'or\' |\n' +
'                                    // \'order\' | \'return\' | \'satisfies\' | \'stable\' | \'start\' | \'to\' | \'treat\' |\n' +
'                                    // \'union\' | \'where\' | \'with\' | \'|\' | \'||\' | \'|}\' | \'}\'\n' +
'      break;\n' +
'    case 103:                       // \'copy\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 235:                       // \'some\'\n' +
'      lookahead2W(229);             // S^WS | EOF | \'!\' | \'!=\' | \'#\' | \'$\' | \'(\' | \'(:\' | \')\' | \'*\' | \'+\' | \',\' | \'-\' |\n' +
'                                    // \'/\' | \'//\' | \':\' | \';\' | \'<\' | \'<<\' | \'<=\' | \'=\' | \'>\' | \'>=\' | \'>>\' | \'[\' |\n' +
'                                    // \']\' | \'after\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'before\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'collation\' | \'contains\' | \'count\' | \'default\' | \'descending\' |\n' +
'                                    // \'div\' | \'else\' | \'empty\' | \'end\' | \'eq\' | \'except\' | \'for\' | \'ge\' | \'group\' |\n' +
'                                    // \'gt\' | \'idiv\' | \'instance\' | \'intersect\' | \'into\' | \'is\' | \'le\' | \'let\' | \'lt\' |\n' +
'                                    // \'mod\' | \'modify\' | \'ne\' | \'only\' | \'or\' | \'order\' | \'return\' | \'satisfies\' |\n' +
'                                    // \'stable\' | \'start\' | \'to\' | \'treat\' | \'union\' | \'where\' | \'with\' | \'|\' | \'||\' |\n' +
'                                    // \'|}\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 16001:                     // \'every\' \'$\'\n' +
'    case 16107:                     // \'some\' \'$\'\n' +
'      try_QuantifiedExpr();\n' +
'      break;\n' +
'    case 97951:                     // \'insert\' \'node\'\n' +
'    case 98463:                     // \'insert\' \'nodes\'\n' +
'      try_InsertExpr();\n' +
'      break;\n' +
'    case 97902:                     // \'delete\' \'node\'\n' +
'    case 98414:                     // \'delete\' \'nodes\'\n' +
'      try_DeleteExpr();\n' +
'      break;\n' +
'    case 98010:                     // \'rename\' \'node\'\n' +
'      try_RenameExpr();\n' +
'      break;\n' +
'    case 98011:                     // \'replace\' \'node\'\n' +
'    case 133851:                    // \'replace\' \'value\'\n' +
'      try_ReplaceExpr();\n' +
'      break;\n' +
'    case 15975:                     // \'copy\' \'$\'\n' +
'      try_TransformExpr();\n' +
'      break;\n' +
'    case 85102:                     // \'delete\' \'json\'\n' +
'      try_JSONDeleteExpr();\n' +
'      break;\n' +
'    case 85151:                     // \'insert\' \'json\'\n' +
'      try_JSONInsertExpr();\n' +
'      break;\n' +
'    case 85210:                     // \'rename\' \'json\'\n' +
'      try_JSONRenameExpr();\n' +
'      break;\n' +
'    case 85211:                     // \'replace\' \'json\'\n' +
'      try_JSONReplaceExpr();\n' +
'      break;\n' +
'    case 77:                        // \'append\'\n' +
'      try_JSONAppendExpr();\n' +
'      break;\n' +
'    default:\n' +
'      try_OrExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_JSONDeleteExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONDeleteExpr", e0);\n' +
'    shift(110);                     // \'delete\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shift(166);                     // \'json\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_PostfixExpr();\n' +
'    eventHandler.endNonterminal("JSONDeleteExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONDeleteExpr()\n' +
'  {\n' +
'    shiftT(110);                    // \'delete\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shiftT(166);                    // \'json\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_PostfixExpr();\n' +
'  }\n' +
'\n' +
'  function parse_JSONInsertExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONInsertExpr", e0);\n' +
'    shift(159);                     // \'insert\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shift(166);                     // \'json\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(163);                     // \'into\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      lookahead2W(69);              // S^WS | \'(:\' | \'position\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 108113)               // \'at\' \'position\'\n' +
'    {\n' +
'      lk = memoized(9, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(81);               // \'at\'\n' +
'          lookahead1W(69);          // S^WS | \'(:\' | \'position\'\n' +
'          shiftT(211);              // \'position\'\n' +
'          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'          try_ExprSingle();\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(9, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    if (lk == -1)\n' +
'    {\n' +
'      shift(81);                    // \'at\'\n' +
'      lookahead1W(69);              // S^WS | \'(:\' | \'position\'\n' +
'      shift(211);                   // \'position\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_ExprSingle();\n' +
'    }\n' +
'    eventHandler.endNonterminal("JSONInsertExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONInsertExpr()\n' +
'  {\n' +
'    shiftT(159);                    // \'insert\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shiftT(166);                    // \'json\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(163);                    // \'into\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 81:                        // \'at\'\n' +
'      lookahead2W(69);              // S^WS | \'(:\' | \'position\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 108113)               // \'at\' \'position\'\n' +
'    {\n' +
'      lk = memoized(9, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(81);               // \'at\'\n' +
'          lookahead1W(69);          // S^WS | \'(:\' | \'position\'\n' +
'          shiftT(211);              // \'position\'\n' +
'          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'          try_ExprSingle();\n' +
'          memoize(9, e0A, -1);\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(9, e0A, -2);\n' +
'        }\n' +
'        lk = -2;\n' +
'      }\n' +
'    }\n' +
'    if (lk == -1)\n' +
'    {\n' +
'      shiftT(81);                   // \'at\'\n' +
'      lookahead1W(69);              // S^WS | \'(:\' | \'position\'\n' +
'      shiftT(211);                  // \'position\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_ExprSingle();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_JSONRenameExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONRenameExpr", e0);\n' +
'    shift(218);                     // \'rename\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shift(166);                     // \'json\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_PostfixExpr();\n' +
'    shift(79);                      // \'as\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("JSONRenameExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONRenameExpr()\n' +
'  {\n' +
'    shiftT(218);                    // \'rename\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shiftT(166);                    // \'json\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_PostfixExpr();\n' +
'    shiftT(79);                     // \'as\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_JSONReplaceExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONReplaceExpr", e0);\n' +
'    shift(219);                     // \'replace\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shift(166);                     // \'json\'\n' +
'    lookahead1W(82);                // S^WS | \'(:\' | \'value\'\n' +
'    shift(261);                     // \'value\'\n' +
'    lookahead1W(64);                // S^WS | \'(:\' | \'of\'\n' +
'    shift(196);                     // \'of\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_PostfixExpr();\n' +
'    shift(270);                     // \'with\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("JSONReplaceExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONReplaceExpr()\n' +
'  {\n' +
'    shiftT(219);                    // \'replace\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shiftT(166);                    // \'json\'\n' +
'    lookahead1W(82);                // S^WS | \'(:\' | \'value\'\n' +
'    shiftT(261);                    // \'value\'\n' +
'    lookahead1W(64);                // S^WS | \'(:\' | \'of\'\n' +
'    shiftT(196);                    // \'of\'\n' +
'    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |\n' +
'                                    // S^WS | \'$\' | \'%\' | \'(\' | \'(:\' | \'.\' | \'<\' | \'<!--\' | \'<?\' | \'[\' | \'after\' |\n' +
'                                    // \'allowing\' | \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' |\n' +
'                                    // \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' |\n' +
'                                    // \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' |\n' +
'                                    // \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' |\n' +
'                                    // \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_PostfixExpr();\n' +
'    shiftT(270);                    // \'with\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_JSONAppendExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONAppendExpr", e0);\n' +
'    shift(77);                      // \'append\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shift(166);                     // \'json\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    shift(163);                     // \'into\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("JSONAppendExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONAppendExpr()\n' +
'  {\n' +
'    shiftT(77);                     // \'append\'\n' +
'    lookahead1W(56);                // S^WS | \'(:\' | \'json\'\n' +
'    shiftT(166);                    // \'json\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'    shiftT(163);                    // \'into\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_CommonContent()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CommonContent", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 12:                        // PredefinedEntityRef\n' +
'      shift(12);                    // PredefinedEntityRef\n' +
'      break;\n' +
'    case 23:                        // CharRef\n' +
'      shift(23);                    // CharRef\n' +
'      break;\n' +
'    case 277:                       // \'{{\'\n' +
'      shift(277);                   // \'{{\'\n' +
'      break;\n' +
'    case 283:                       // \'}}\'\n' +
'      shift(283);                   // \'}}\'\n' +
'      break;\n' +
'    default:\n' +
'      parse_BlockExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CommonContent", e0);\n' +
'  }\n' +
'\n' +
'  function try_CommonContent()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 12:                        // PredefinedEntityRef\n' +
'      shiftT(12);                   // PredefinedEntityRef\n' +
'      break;\n' +
'    case 23:                        // CharRef\n' +
'      shiftT(23);                   // CharRef\n' +
'      break;\n' +
'    case 277:                       // \'{{\'\n' +
'      shiftT(277);                  // \'{{\'\n' +
'      break;\n' +
'    case 283:                       // \'}}\'\n' +
'      shiftT(283);                  // \'}}\'\n' +
'      break;\n' +
'    default:\n' +
'      try_BlockExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_ContentExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ContentExpr", e0);\n' +
'    parse_StatementsAndExpr();\n' +
'    eventHandler.endNonterminal("ContentExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_ContentExpr()\n' +
'  {\n' +
'    try_StatementsAndExpr();\n' +
'  }\n' +
'\n' +
'  function parse_CompDocConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompDocConstructor", e0);\n' +
'    shift(119);                     // \'document\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_BlockExpr();\n' +
'    eventHandler.endNonterminal("CompDocConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompDocConstructor()\n' +
'  {\n' +
'    shiftT(119);                    // \'document\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    try_BlockExpr();\n' +
'  }\n' +
'\n' +
'  function parse_CompAttrConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompAttrConstructor", e0);\n' +
'    shift(82);                      // \'attribute\'\n' +
'    lookahead1W(252);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_EQName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(10, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(276);              // \'{\'\n' +
'          lookahead1W(88);          // S^WS | \'(:\' | \'}\'\n' +
'          shiftT(282);              // \'}\'\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(10, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(88);              // S^WS | \'(:\' | \'}\'\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_BlockExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CompAttrConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompAttrConstructor()\n' +
'  {\n' +
'    shiftT(82);                     // \'attribute\'\n' +
'    lookahead1W(252);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_Expr();\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      try_EQName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(10, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(276);              // \'{\'\n' +
'          lookahead1W(88);          // S^WS | \'(:\' | \'}\'\n' +
'          shiftT(282);              // \'}\'\n' +
'          memoize(10, e0A, -1);\n' +
'          lk = -3;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(10, e0A, -2);\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(88);              // S^WS | \'(:\' | \'}\'\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    case -3:\n' +
'      break;\n' +
'    default:\n' +
'      try_BlockExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CompPIConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompPIConstructor", e0);\n' +
'    shift(216);                     // \'processing-instruction\'\n' +
'    lookahead1W(253);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_NCName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(11, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(276);              // \'{\'\n' +
'          lookahead1W(88);          // S^WS | \'(:\' | \'}\'\n' +
'          shiftT(282);              // \'}\'\n' +
'          lk = -1;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(11, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(88);              // S^WS | \'(:\' | \'}\'\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      whitespace();\n' +
'      parse_BlockExpr();\n' +
'    }\n' +
'    eventHandler.endNonterminal("CompPIConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompPIConstructor()\n' +
'  {\n' +
'    shiftT(216);                    // \'processing-instruction\'\n' +
'    lookahead1W(253);               // NCName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'      try_Expr();\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      try_NCName();\n' +
'    }\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(11, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          shiftT(276);              // \'{\'\n' +
'          lookahead1W(88);          // S^WS | \'(:\' | \'}\'\n' +
'          shiftT(282);              // \'}\'\n' +
'          memoize(11, e0A, -1);\n' +
'          lk = -3;\n' +
'        }\n' +
'        catch (p1A)\n' +
'        {\n' +
'          lk = -2;\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(11, e0A, -2);\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case -1:\n' +
'      shiftT(276);                  // \'{\'\n' +
'      lookahead1W(88);              // S^WS | \'(:\' | \'}\'\n' +
'      shiftT(282);                  // \'}\'\n' +
'      break;\n' +
'    case -3:\n' +
'      break;\n' +
'    default:\n' +
'      try_BlockExpr();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_CompCommentConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompCommentConstructor", e0);\n' +
'    shift(96);                      // \'comment\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_BlockExpr();\n' +
'    eventHandler.endNonterminal("CompCommentConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompCommentConstructor()\n' +
'  {\n' +
'    shiftT(96);                     // \'comment\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    try_BlockExpr();\n' +
'  }\n' +
'\n' +
'  function parse_CompTextConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("CompTextConstructor", e0);\n' +
'    shift(244);                     // \'text\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    whitespace();\n' +
'    parse_BlockExpr();\n' +
'    eventHandler.endNonterminal("CompTextConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_CompTextConstructor()\n' +
'  {\n' +
'    shiftT(244);                    // \'text\'\n' +
'    lookahead1W(87);                // S^WS | \'(:\' | \'{\'\n' +
'    try_BlockExpr();\n' +
'  }\n' +
'\n' +
'  function parse_PrimaryExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PrimaryExpr", e0);\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 184:                       // \'namespace\'\n' +
'      lookahead2W(258);             // NCName^Token | S^WS | \'#\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      lookahead2W(257);             // NCName^Token | S^WS | \'#\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 121:                       // \'element\'\n' +
'      lookahead2W(254);             // EQName^Token | S^WS | \'#\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(93);              // S^WS | \'#\' | \'(:\' | \'{\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'    case 202:                       // \'ordered\'\n' +
'    case 256:                       // \'unordered\'\n' +
'      lookahead2W(139);             // S^WS | \'#\' | \'(\' | \'(:\' | \'{\'\n' +
'      break;\n' +
'    case 6:                         // EQName^Token\n' +
'    case 70:                        // \'after\'\n' +
'    case 72:                        // \'allowing\'\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 75:                        // \'and\'\n' +
'    case 79:                        // \'as\'\n' +
'    case 80:                        // \'ascending\'\n' +
'    case 81:                        // \'at\'\n' +
'    case 83:                        // \'base-uri\'\n' +
'    case 84:                        // \'before\'\n' +
'    case 85:                        // \'boundary-space\'\n' +
'    case 86:                        // \'break\'\n' +
'    case 88:                        // \'case\'\n' +
'    case 89:                        // \'cast\'\n' +
'    case 90:                        // \'castable\'\n' +
'    case 91:                        // \'catch\'\n' +
'    case 93:                        // \'child\'\n' +
'    case 94:                        // \'collation\'\n' +
'    case 97:                        // \'constraint\'\n' +
'    case 98:                        // \'construction\'\n' +
'    case 101:                       // \'context\'\n' +
'    case 102:                       // \'continue\'\n' +
'    case 103:                       // \'copy\'\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'    case 105:                       // \'count\'\n' +
'    case 106:                       // \'decimal-format\'\n' +
'    case 108:                       // \'declare\'\n' +
'    case 109:                       // \'default\'\n' +
'    case 110:                       // \'delete\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 113:                       // \'descending\'\n' +
'    case 118:                       // \'div\'\n' +
'    case 122:                       // \'else\'\n' +
'    case 123:                       // \'empty\'\n' +
'    case 125:                       // \'encoding\'\n' +
'    case 126:                       // \'end\'\n' +
'    case 128:                       // \'eq\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 131:                       // \'except\'\n' +
'    case 132:                       // \'exit\'\n' +
'    case 133:                       // \'external\'\n' +
'    case 134:                       // \'first\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 137:                       // \'for\'\n' +
'    case 141:                       // \'ft-option\'\n' +
'    case 146:                       // \'ge\'\n' +
'    case 148:                       // \'group\'\n' +
'    case 150:                       // \'gt\'\n' +
'    case 151:                       // \'idiv\'\n' +
'    case 153:                       // \'import\'\n' +
'    case 154:                       // \'in\'\n' +
'    case 155:                       // \'index\'\n' +
'    case 159:                       // \'insert\'\n' +
'    case 160:                       // \'instance\'\n' +
'    case 161:                       // \'integrity\'\n' +
'    case 162:                       // \'intersect\'\n' +
'    case 163:                       // \'into\'\n' +
'    case 164:                       // \'is\'\n' +
'    case 170:                       // \'last\'\n' +
'    case 171:                       // \'lax\'\n' +
'    case 172:                       // \'le\'\n' +
'    case 174:                       // \'let\'\n' +
'    case 176:                       // \'loop\'\n' +
'    case 178:                       // \'lt\'\n' +
'    case 180:                       // \'mod\'\n' +
'    case 181:                       // \'modify\'\n' +
'    case 182:                       // \'module\'\n' +
'    case 186:                       // \'ne\'\n' +
'    case 192:                       // \'nodes\'\n' +
'    case 198:                       // \'only\'\n' +
'    case 199:                       // \'option\'\n' +
'    case 200:                       // \'or\'\n' +
'    case 201:                       // \'order\'\n' +
'    case 203:                       // \'ordering\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'    case 218:                       // \'rename\'\n' +
'    case 219:                       // \'replace\'\n' +
'    case 220:                       // \'return\'\n' +
'    case 221:                       // \'returning\'\n' +
'    case 222:                       // \'revalidation\'\n' +
'    case 224:                       // \'satisfies\'\n' +
'    case 225:                       // \'schema\'\n' +
'    case 228:                       // \'score\'\n' +
'    case 229:                       // \'self\'\n' +
'    case 234:                       // \'sliding\'\n' +
'    case 235:                       // \'some\'\n' +
'    case 236:                       // \'stable\'\n' +
'    case 237:                       // \'start\'\n' +
'    case 240:                       // \'strict\'\n' +
'    case 248:                       // \'to\'\n' +
'    case 249:                       // \'treat\'\n' +
'    case 250:                       // \'try\'\n' +
'    case 251:                       // \'tumbling\'\n' +
'    case 252:                       // \'type\'\n' +
'    case 254:                       // \'union\'\n' +
'    case 257:                       // \'updating\'\n' +
'    case 260:                       // \'validate\'\n' +
'    case 261:                       // \'value\'\n' +
'    case 262:                       // \'variable\'\n' +
'    case 263:                       // \'version\'\n' +
'    case 266:                       // \'where\'\n' +
'    case 267:                       // \'while\'\n' +
'    case 270:                       // \'with\'\n' +
'    case 274:                       // \'xquery\'\n' +
'      lookahead2W(92);              // S^WS | \'#\' | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 2836                  // \'{\' Wildcard\n' +
'     || lk == 3348                  // \'{\' EQName^Token\n' +
'     || lk == 4372                  // \'{\' IntegerLiteral\n' +
'     || lk == 4884                  // \'{\' DecimalLiteral\n' +
'     || lk == 5396                  // \'{\' DoubleLiteral\n' +
'     || lk == 5908                  // \'{\' StringLiteral\n' +
'     || lk == 16148                 // \'{\' \'$\'\n' +
'     || lk == 16660                 // \'{\' \'%\'\n' +
'     || lk == 17684                 // \'{\' \'(\'\n' +
'     || lk == 18196                 // \'{\' \'(#\'\n' +
'     || lk == 20756                 // \'{\' \'+\'\n' +
'     || lk == 21780                 // \'{\' \'-\'\n' +
'     || lk == 22804                 // \'{\' \'.\'\n' +
'     || lk == 23316                 // \'{\' \'..\'\n' +
'     || lk == 23828                 // \'{\' \'/\'\n' +
'     || lk == 24340                 // \'{\' \'//\'\n' +
'     || lk == 27924                 // \'{\' \'<\'\n' +
'     || lk == 28436                 // \'{\' \'<!--\'\n' +
'     || lk == 30484                 // \'{\' \'<?\'\n' +
'     || lk == 34068                 // \'{\' \'@\'\n' +
'     || lk == 35092                 // \'{\' \'[\'\n' +
'     || lk == 36116                 // \'{\' \'after\'\n' +
'     || lk == 37140                 // \'{\' \'allowing\'\n' +
'     || lk == 37652                 // \'{\' \'ancestor\'\n' +
'     || lk == 38164                 // \'{\' \'ancestor-or-self\'\n' +
'     || lk == 38676                 // \'{\' \'and\'\n' +
'     || lk == 39700                 // \'{\' \'append\'\n' +
'     || lk == 40212                 // \'{\' \'array\'\n' +
'     || lk == 40724                 // \'{\' \'as\'\n' +
'     || lk == 41236                 // \'{\' \'ascending\'\n' +
'     || lk == 41748                 // \'{\' \'at\'\n' +
'     || lk == 42260                 // \'{\' \'attribute\'\n' +
'     || lk == 42772                 // \'{\' \'base-uri\'\n' +
'     || lk == 43284                 // \'{\' \'before\'\n' +
'     || lk == 43796                 // \'{\' \'boundary-space\'\n' +
'     || lk == 44308                 // \'{\' \'break\'\n' +
'     || lk == 45332                 // \'{\' \'case\'\n' +
'     || lk == 45844                 // \'{\' \'cast\'\n' +
'     || lk == 46356                 // \'{\' \'castable\'\n' +
'     || lk == 46868                 // \'{\' \'catch\'\n' +
'     || lk == 47892                 // \'{\' \'child\'\n' +
'     || lk == 48404                 // \'{\' \'collation\'\n' +
'     || lk == 49428                 // \'{\' \'comment\'\n' +
'     || lk == 49940                 // \'{\' \'constraint\'\n' +
'     || lk == 50452                 // \'{\' \'construction\'\n' +
'     || lk == 51988                 // \'{\' \'context\'\n' +
'     || lk == 52500                 // \'{\' \'continue\'\n' +
'     || lk == 53012                 // \'{\' \'copy\'\n' +
'     || lk == 53524                 // \'{\' \'copy-namespaces\'\n' +
'     || lk == 54036                 // \'{\' \'count\'\n' +
'     || lk == 54548                 // \'{\' \'decimal-format\'\n' +
'     || lk == 55572                 // \'{\' \'declare\'\n' +
'     || lk == 56084                 // \'{\' \'default\'\n' +
'     || lk == 56596                 // \'{\' \'delete\'\n' +
'     || lk == 57108                 // \'{\' \'descendant\'\n' +
'     || lk == 57620                 // \'{\' \'descendant-or-self\'\n' +
'     || lk == 58132                 // \'{\' \'descending\'\n' +
'     || lk == 60692                 // \'{\' \'div\'\n' +
'     || lk == 61204                 // \'{\' \'document\'\n' +
'     || lk == 61716                 // \'{\' \'document-node\'\n' +
'     || lk == 62228                 // \'{\' \'element\'\n' +
'     || lk == 62740                 // \'{\' \'else\'\n' +
'     || lk == 63252                 // \'{\' \'empty\'\n' +
'     || lk == 63764                 // \'{\' \'empty-sequence\'\n' +
'     || lk == 64276                 // \'{\' \'encoding\'\n' +
'     || lk == 64788                 // \'{\' \'end\'\n' +
'     || lk == 65812                 // \'{\' \'eq\'\n' +
'     || lk == 66324                 // \'{\' \'every\'\n' +
'     || lk == 67348                 // \'{\' \'except\'\n' +
'     || lk == 67860                 // \'{\' \'exit\'\n' +
'     || lk == 68372                 // \'{\' \'external\'\n' +
'     || lk == 68884                 // \'{\' \'first\'\n' +
'     || lk == 69396                 // \'{\' \'following\'\n' +
'     || lk == 69908                 // \'{\' \'following-sibling\'\n' +
'     || lk == 70420                 // \'{\' \'for\'\n' +
'     || lk == 72468                 // \'{\' \'ft-option\'\n' +
'     || lk == 74516                 // \'{\' \'function\'\n' +
'     || lk == 75028                 // \'{\' \'ge\'\n' +
'     || lk == 76052                 // \'{\' \'group\'\n' +
'     || lk == 77076                 // \'{\' \'gt\'\n' +
'     || lk == 77588                 // \'{\' \'idiv\'\n' +
'     || lk == 78100                 // \'{\' \'if\'\n' +
'     || lk == 78612                 // \'{\' \'import\'\n' +
'     || lk == 79124                 // \'{\' \'in\'\n' +
'     || lk == 79636                 // \'{\' \'index\'\n' +
'     || lk == 81684                 // \'{\' \'insert\'\n' +
'     || lk == 82196                 // \'{\' \'instance\'\n' +
'     || lk == 82708                 // \'{\' \'integrity\'\n' +
'     || lk == 83220                 // \'{\' \'intersect\'\n' +
'     || lk == 83732                 // \'{\' \'into\'\n' +
'     || lk == 84244                 // \'{\' \'is\'\n' +
'     || lk == 84756                 // \'{\' \'item\'\n' +
'     || lk == 85780                 // \'{\' \'json-item\'\n' +
'     || lk == 87316                 // \'{\' \'last\'\n' +
'     || lk == 87828                 // \'{\' \'lax\'\n' +
'     || lk == 88340                 // \'{\' \'le\'\n' +
'     || lk == 89364                 // \'{\' \'let\'\n' +
'     || lk == 90388                 // \'{\' \'loop\'\n' +
'     || lk == 91412                 // \'{\' \'lt\'\n' +
'     || lk == 92436                 // \'{\' \'mod\'\n' +
'     || lk == 92948                 // \'{\' \'modify\'\n' +
'     || lk == 93460                 // \'{\' \'module\'\n' +
'     || lk == 94484                 // \'{\' \'namespace\'\n' +
'     || lk == 94996                 // \'{\' \'namespace-node\'\n' +
'     || lk == 95508                 // \'{\' \'ne\'\n' +
'     || lk == 98068                 // \'{\' \'node\'\n' +
'     || lk == 98580                 // \'{\' \'nodes\'\n' +
'     || lk == 99604                 // \'{\' \'object\'\n' +
'     || lk == 101652                // \'{\' \'only\'\n' +
'     || lk == 102164                // \'{\' \'option\'\n' +
'     || lk == 102676                // \'{\' \'or\'\n' +
'     || lk == 103188                // \'{\' \'order\'\n' +
'     || lk == 103700                // \'{\' \'ordered\'\n' +
'     || lk == 104212                // \'{\' \'ordering\'\n' +
'     || lk == 105748                // \'{\' \'parent\'\n' +
'     || lk == 108820                // \'{\' \'preceding\'\n' +
'     || lk == 109332                // \'{\' \'preceding-sibling\'\n' +
'     || lk == 110868                // \'{\' \'processing-instruction\'\n' +
'     || lk == 111892                // \'{\' \'rename\'\n' +
'     || lk == 112404                // \'{\' \'replace\'\n' +
'     || lk == 112916                // \'{\' \'return\'\n' +
'     || lk == 113428                // \'{\' \'returning\'\n' +
'     || lk == 113940                // \'{\' \'revalidation\'\n' +
'     || lk == 114964                // \'{\' \'satisfies\'\n' +
'     || lk == 115476                // \'{\' \'schema\'\n' +
'     || lk == 115988                // \'{\' \'schema-attribute\'\n' +
'     || lk == 116500                // \'{\' \'schema-element\'\n' +
'     || lk == 117012                // \'{\' \'score\'\n' +
'     || lk == 117524                // \'{\' \'self\'\n' +
'     || lk == 120084                // \'{\' \'sliding\'\n' +
'     || lk == 120596                // \'{\' \'some\'\n' +
'     || lk == 121108                // \'{\' \'stable\'\n' +
'     || lk == 121620                // \'{\' \'start\'\n' +
'     || lk == 123156                // \'{\' \'strict\'\n' +
'     || lk == 124692                // \'{\' \'switch\'\n' +
'     || lk == 125204                // \'{\' \'text\'\n' +
'     || lk == 127252                // \'{\' \'to\'\n' +
'     || lk == 127764                // \'{\' \'treat\'\n' +
'     || lk == 128276                // \'{\' \'try\'\n' +
'     || lk == 128788                // \'{\' \'tumbling\'\n' +
'     || lk == 129300                // \'{\' \'type\'\n' +
'     || lk == 129812                // \'{\' \'typeswitch\'\n' +
'     || lk == 130324                // \'{\' \'union\'\n' +
'     || lk == 131348                // \'{\' \'unordered\'\n' +
'     || lk == 131860                // \'{\' \'updating\'\n' +
'     || lk == 133396                // \'{\' \'validate\'\n' +
'     || lk == 133908                // \'{\' \'value\'\n' +
'     || lk == 134420                // \'{\' \'variable\'\n' +
'     || lk == 134932                // \'{\' \'version\'\n' +
'     || lk == 136468                // \'{\' \'where\'\n' +
'     || lk == 136980                // \'{\' \'while\'\n' +
'     || lk == 138516                // \'{\' \'with\'\n' +
'     || lk == 140564                // \'{\' \'xquery\'\n' +
'     || lk == 141588                // \'{\' \'{\'\n' +
'     || lk == 142612                // \'{\' \'{|\'\n' +
'     || lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(12, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_BlockExpr();\n' +
'          lk = -10;\n' +
'        }\n' +
'        catch (p10A)\n' +
'        {\n' +
'          lk = -11;\n' +
'        }\n' +
'        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'        b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'        memoize(12, e0, lk);\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 8:                         // IntegerLiteral\n' +
'    case 9:                         // DecimalLiteral\n' +
'    case 10:                        // DoubleLiteral\n' +
'    case 11:                        // StringLiteral\n' +
'      parse_Literal();\n' +
'      break;\n' +
'    case 31:                        // \'$\'\n' +
'      parse_VarRef();\n' +
'      break;\n' +
'    case 34:                        // \'(\'\n' +
'      parse_ParenthesizedExpr();\n' +
'      break;\n' +
'    case 44:                        // \'.\'\n' +
'      parse_ContextItemExpr();\n' +
'      break;\n' +
'    case 17414:                     // EQName^Token \'(\'\n' +
'    case 17478:                     // \'after\' \'(\'\n' +
'    case 17480:                     // \'allowing\' \'(\'\n' +
'    case 17481:                     // \'ancestor\' \'(\'\n' +
'    case 17482:                     // \'ancestor-or-self\' \'(\'\n' +
'    case 17483:                     // \'and\' \'(\'\n' +
'    case 17487:                     // \'as\' \'(\'\n' +
'    case 17488:                     // \'ascending\' \'(\'\n' +
'    case 17489:                     // \'at\' \'(\'\n' +
'    case 17491:                     // \'base-uri\' \'(\'\n' +
'    case 17492:                     // \'before\' \'(\'\n' +
'    case 17493:                     // \'boundary-space\' \'(\'\n' +
'    case 17494:                     // \'break\' \'(\'\n' +
'    case 17496:                     // \'case\' \'(\'\n' +
'    case 17497:                     // \'cast\' \'(\'\n' +
'    case 17498:                     // \'castable\' \'(\'\n' +
'    case 17499:                     // \'catch\' \'(\'\n' +
'    case 17501:                     // \'child\' \'(\'\n' +
'    case 17502:                     // \'collation\' \'(\'\n' +
'    case 17505:                     // \'constraint\' \'(\'\n' +
'    case 17506:                     // \'construction\' \'(\'\n' +
'    case 17509:                     // \'context\' \'(\'\n' +
'    case 17510:                     // \'continue\' \'(\'\n' +
'    case 17511:                     // \'copy\' \'(\'\n' +
'    case 17512:                     // \'copy-namespaces\' \'(\'\n' +
'    case 17513:                     // \'count\' \'(\'\n' +
'    case 17514:                     // \'decimal-format\' \'(\'\n' +
'    case 17516:                     // \'declare\' \'(\'\n' +
'    case 17517:                     // \'default\' \'(\'\n' +
'    case 17518:                     // \'delete\' \'(\'\n' +
'    case 17519:                     // \'descendant\' \'(\'\n' +
'    case 17520:                     // \'descendant-or-self\' \'(\'\n' +
'    case 17521:                     // \'descending\' \'(\'\n' +
'    case 17526:                     // \'div\' \'(\'\n' +
'    case 17527:                     // \'document\' \'(\'\n' +
'    case 17530:                     // \'else\' \'(\'\n' +
'    case 17531:                     // \'empty\' \'(\'\n' +
'    case 17533:                     // \'encoding\' \'(\'\n' +
'    case 17534:                     // \'end\' \'(\'\n' +
'    case 17536:                     // \'eq\' \'(\'\n' +
'    case 17537:                     // \'every\' \'(\'\n' +
'    case 17539:                     // \'except\' \'(\'\n' +
'    case 17540:                     // \'exit\' \'(\'\n' +
'    case 17541:                     // \'external\' \'(\'\n' +
'    case 17542:                     // \'first\' \'(\'\n' +
'    case 17543:                     // \'following\' \'(\'\n' +
'    case 17544:                     // \'following-sibling\' \'(\'\n' +
'    case 17545:                     // \'for\' \'(\'\n' +
'    case 17549:                     // \'ft-option\' \'(\'\n' +
'    case 17554:                     // \'ge\' \'(\'\n' +
'    case 17556:                     // \'group\' \'(\'\n' +
'    case 17558:                     // \'gt\' \'(\'\n' +
'    case 17559:                     // \'idiv\' \'(\'\n' +
'    case 17561:                     // \'import\' \'(\'\n' +
'    case 17562:                     // \'in\' \'(\'\n' +
'    case 17563:                     // \'index\' \'(\'\n' +
'    case 17567:                     // \'insert\' \'(\'\n' +
'    case 17568:                     // \'instance\' \'(\'\n' +
'    case 17569:                     // \'integrity\' \'(\'\n' +
'    case 17570:                     // \'intersect\' \'(\'\n' +
'    case 17571:                     // \'into\' \'(\'\n' +
'    case 17572:                     // \'is\' \'(\'\n' +
'    case 17578:                     // \'last\' \'(\'\n' +
'    case 17579:                     // \'lax\' \'(\'\n' +
'    case 17580:                     // \'le\' \'(\'\n' +
'    case 17582:                     // \'let\' \'(\'\n' +
'    case 17584:                     // \'loop\' \'(\'\n' +
'    case 17586:                     // \'lt\' \'(\'\n' +
'    case 17588:                     // \'mod\' \'(\'\n' +
'    case 17589:                     // \'modify\' \'(\'\n' +
'    case 17590:                     // \'module\' \'(\'\n' +
'    case 17592:                     // \'namespace\' \'(\'\n' +
'    case 17594:                     // \'ne\' \'(\'\n' +
'    case 17600:                     // \'nodes\' \'(\'\n' +
'    case 17606:                     // \'only\' \'(\'\n' +
'    case 17607:                     // \'option\' \'(\'\n' +
'    case 17608:                     // \'or\' \'(\'\n' +
'    case 17609:                     // \'order\' \'(\'\n' +
'    case 17610:                     // \'ordered\' \'(\'\n' +
'    case 17611:                     // \'ordering\' \'(\'\n' +
'    case 17614:                     // \'parent\' \'(\'\n' +
'    case 17620:                     // \'preceding\' \'(\'\n' +
'    case 17621:                     // \'preceding-sibling\' \'(\'\n' +
'    case 17626:                     // \'rename\' \'(\'\n' +
'    case 17627:                     // \'replace\' \'(\'\n' +
'    case 17628:                     // \'return\' \'(\'\n' +
'    case 17629:                     // \'returning\' \'(\'\n' +
'    case 17630:                     // \'revalidation\' \'(\'\n' +
'    case 17632:                     // \'satisfies\' \'(\'\n' +
'    case 17633:                     // \'schema\' \'(\'\n' +
'    case 17636:                     // \'score\' \'(\'\n' +
'    case 17637:                     // \'self\' \'(\'\n' +
'    case 17642:                     // \'sliding\' \'(\'\n' +
'    case 17643:                     // \'some\' \'(\'\n' +
'    case 17644:                     // \'stable\' \'(\'\n' +
'    case 17645:                     // \'start\' \'(\'\n' +
'    case 17648:                     // \'strict\' \'(\'\n' +
'    case 17656:                     // \'to\' \'(\'\n' +
'    case 17657:                     // \'treat\' \'(\'\n' +
'    case 17658:                     // \'try\' \'(\'\n' +
'    case 17659:                     // \'tumbling\' \'(\'\n' +
'    case 17660:                     // \'type\' \'(\'\n' +
'    case 17662:                     // \'union\' \'(\'\n' +
'    case 17664:                     // \'unordered\' \'(\'\n' +
'    case 17665:                     // \'updating\' \'(\'\n' +
'    case 17668:                     // \'validate\' \'(\'\n' +
'    case 17669:                     // \'value\' \'(\'\n' +
'    case 17670:                     // \'variable\' \'(\'\n' +
'    case 17671:                     // \'version\' \'(\'\n' +
'    case 17674:                     // \'where\' \'(\'\n' +
'    case 17675:                     // \'while\' \'(\'\n' +
'    case 17678:                     // \'with\' \'(\'\n' +
'    case 17682:                     // \'xquery\' \'(\'\n' +
'      parse_FunctionCall();\n' +
'      break;\n' +
'    case 141514:                    // \'ordered\' \'{\'\n' +
'      parse_OrderedExpr();\n' +
'      break;\n' +
'    case 141568:                    // \'unordered\' \'{\'\n' +
'      parse_UnorderedExpr();\n' +
'      break;\n' +
'    case 32:                        // \'%\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 152:                       // \'if\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'    case 14854:                     // EQName^Token \'#\'\n' +
'    case 14918:                     // \'after\' \'#\'\n' +
'    case 14920:                     // \'allowing\' \'#\'\n' +
'    case 14921:                     // \'ancestor\' \'#\'\n' +
'    case 14922:                     // \'ancestor-or-self\' \'#\'\n' +
'    case 14923:                     // \'and\' \'#\'\n' +
'    case 14927:                     // \'as\' \'#\'\n' +
'    case 14928:                     // \'ascending\' \'#\'\n' +
'    case 14929:                     // \'at\' \'#\'\n' +
'    case 14930:                     // \'attribute\' \'#\'\n' +
'    case 14931:                     // \'base-uri\' \'#\'\n' +
'    case 14932:                     // \'before\' \'#\'\n' +
'    case 14933:                     // \'boundary-space\' \'#\'\n' +
'    case 14934:                     // \'break\' \'#\'\n' +
'    case 14936:                     // \'case\' \'#\'\n' +
'    case 14937:                     // \'cast\' \'#\'\n' +
'    case 14938:                     // \'castable\' \'#\'\n' +
'    case 14939:                     // \'catch\' \'#\'\n' +
'    case 14941:                     // \'child\' \'#\'\n' +
'    case 14942:                     // \'collation\' \'#\'\n' +
'    case 14944:                     // \'comment\' \'#\'\n' +
'    case 14945:                     // \'constraint\' \'#\'\n' +
'    case 14946:                     // \'construction\' \'#\'\n' +
'    case 14949:                     // \'context\' \'#\'\n' +
'    case 14950:                     // \'continue\' \'#\'\n' +
'    case 14951:                     // \'copy\' \'#\'\n' +
'    case 14952:                     // \'copy-namespaces\' \'#\'\n' +
'    case 14953:                     // \'count\' \'#\'\n' +
'    case 14954:                     // \'decimal-format\' \'#\'\n' +
'    case 14956:                     // \'declare\' \'#\'\n' +
'    case 14957:                     // \'default\' \'#\'\n' +
'    case 14958:                     // \'delete\' \'#\'\n' +
'    case 14959:                     // \'descendant\' \'#\'\n' +
'    case 14960:                     // \'descendant-or-self\' \'#\'\n' +
'    case 14961:                     // \'descending\' \'#\'\n' +
'    case 14966:                     // \'div\' \'#\'\n' +
'    case 14967:                     // \'document\' \'#\'\n' +
'    case 14969:                     // \'element\' \'#\'\n' +
'    case 14970:                     // \'else\' \'#\'\n' +
'    case 14971:                     // \'empty\' \'#\'\n' +
'    case 14973:                     // \'encoding\' \'#\'\n' +
'    case 14974:                     // \'end\' \'#\'\n' +
'    case 14976:                     // \'eq\' \'#\'\n' +
'    case 14977:                     // \'every\' \'#\'\n' +
'    case 14979:                     // \'except\' \'#\'\n' +
'    case 14980:                     // \'exit\' \'#\'\n' +
'    case 14981:                     // \'external\' \'#\'\n' +
'    case 14982:                     // \'first\' \'#\'\n' +
'    case 14983:                     // \'following\' \'#\'\n' +
'    case 14984:                     // \'following-sibling\' \'#\'\n' +
'    case 14985:                     // \'for\' \'#\'\n' +
'    case 14989:                     // \'ft-option\' \'#\'\n' +
'    case 14994:                     // \'ge\' \'#\'\n' +
'    case 14996:                     // \'group\' \'#\'\n' +
'    case 14998:                     // \'gt\' \'#\'\n' +
'    case 14999:                     // \'idiv\' \'#\'\n' +
'    case 15001:                     // \'import\' \'#\'\n' +
'    case 15002:                     // \'in\' \'#\'\n' +
'    case 15003:                     // \'index\' \'#\'\n' +
'    case 15007:                     // \'insert\' \'#\'\n' +
'    case 15008:                     // \'instance\' \'#\'\n' +
'    case 15009:                     // \'integrity\' \'#\'\n' +
'    case 15010:                     // \'intersect\' \'#\'\n' +
'    case 15011:                     // \'into\' \'#\'\n' +
'    case 15012:                     // \'is\' \'#\'\n' +
'    case 15018:                     // \'last\' \'#\'\n' +
'    case 15019:                     // \'lax\' \'#\'\n' +
'    case 15020:                     // \'le\' \'#\'\n' +
'    case 15022:                     // \'let\' \'#\'\n' +
'    case 15024:                     // \'loop\' \'#\'\n' +
'    case 15026:                     // \'lt\' \'#\'\n' +
'    case 15028:                     // \'mod\' \'#\'\n' +
'    case 15029:                     // \'modify\' \'#\'\n' +
'    case 15030:                     // \'module\' \'#\'\n' +
'    case 15032:                     // \'namespace\' \'#\'\n' +
'    case 15034:                     // \'ne\' \'#\'\n' +
'    case 15040:                     // \'nodes\' \'#\'\n' +
'    case 15046:                     // \'only\' \'#\'\n' +
'    case 15047:                     // \'option\' \'#\'\n' +
'    case 15048:                     // \'or\' \'#\'\n' +
'    case 15049:                     // \'order\' \'#\'\n' +
'    case 15050:                     // \'ordered\' \'#\'\n' +
'    case 15051:                     // \'ordering\' \'#\'\n' +
'    case 15054:                     // \'parent\' \'#\'\n' +
'    case 15060:                     // \'preceding\' \'#\'\n' +
'    case 15061:                     // \'preceding-sibling\' \'#\'\n' +
'    case 15064:                     // \'processing-instruction\' \'#\'\n' +
'    case 15066:                     // \'rename\' \'#\'\n' +
'    case 15067:                     // \'replace\' \'#\'\n' +
'    case 15068:                     // \'return\' \'#\'\n' +
'    case 15069:                     // \'returning\' \'#\'\n' +
'    case 15070:                     // \'revalidation\' \'#\'\n' +
'    case 15072:                     // \'satisfies\' \'#\'\n' +
'    case 15073:                     // \'schema\' \'#\'\n' +
'    case 15076:                     // \'score\' \'#\'\n' +
'    case 15077:                     // \'self\' \'#\'\n' +
'    case 15082:                     // \'sliding\' \'#\'\n' +
'    case 15083:                     // \'some\' \'#\'\n' +
'    case 15084:                     // \'stable\' \'#\'\n' +
'    case 15085:                     // \'start\' \'#\'\n' +
'    case 15088:                     // \'strict\' \'#\'\n' +
'    case 15092:                     // \'text\' \'#\'\n' +
'    case 15096:                     // \'to\' \'#\'\n' +
'    case 15097:                     // \'treat\' \'#\'\n' +
'    case 15098:                     // \'try\' \'#\'\n' +
'    case 15099:                     // \'tumbling\' \'#\'\n' +
'    case 15100:                     // \'type\' \'#\'\n' +
'    case 15102:                     // \'union\' \'#\'\n' +
'    case 15104:                     // \'unordered\' \'#\'\n' +
'    case 15105:                     // \'updating\' \'#\'\n' +
'    case 15108:                     // \'validate\' \'#\'\n' +
'    case 15109:                     // \'value\' \'#\'\n' +
'    case 15110:                     // \'variable\' \'#\'\n' +
'    case 15111:                     // \'version\' \'#\'\n' +
'    case 15114:                     // \'where\' \'#\'\n' +
'    case 15115:                     // \'while\' \'#\'\n' +
'    case 15118:                     // \'with\' \'#\'\n' +
'    case 15122:                     // \'xquery\' \'#\'\n' +
'      parse_FunctionItemExpr();\n' +
'      break;\n' +
'    case -10:\n' +
'      parse_BlockExpr();\n' +
'      break;\n' +
'    case -11:\n' +
'      parse_ObjectConstructor();\n' +
'      break;\n' +
'    case 68:                        // \'[\'\n' +
'      parse_ArrayConstructor();\n' +
'      break;\n' +
'    case 278:                       // \'{|\'\n' +
'      parse_JSONSimpleObjectUnion();\n' +
'      break;\n' +
'    default:\n' +
'      parse_Constructor();\n' +
'    }\n' +
'    eventHandler.endNonterminal("PrimaryExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_PrimaryExpr()\n' +
'  {\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 184:                       // \'namespace\'\n' +
'      lookahead2W(258);             // NCName^Token | S^WS | \'#\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 216:                       // \'processing-instruction\'\n' +
'      lookahead2W(257);             // NCName^Token | S^WS | \'#\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 276:                       // \'{\'\n' +
'      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      break;\n' +
'    case 82:                        // \'attribute\'\n' +
'    case 121:                       // \'element\'\n' +
'      lookahead2W(254);             // EQName^Token | S^WS | \'#\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\'\n' +
'      break;\n' +
'    case 96:                        // \'comment\'\n' +
'    case 244:                       // \'text\'\n' +
'      lookahead2W(93);              // S^WS | \'#\' | \'(:\' | \'{\'\n' +
'      break;\n' +
'    case 119:                       // \'document\'\n' +
'    case 202:                       // \'ordered\'\n' +
'    case 256:                       // \'unordered\'\n' +
'      lookahead2W(139);             // S^WS | \'#\' | \'(\' | \'(:\' | \'{\'\n' +
'      break;\n' +
'    case 6:                         // EQName^Token\n' +
'    case 70:                        // \'after\'\n' +
'    case 72:                        // \'allowing\'\n' +
'    case 73:                        // \'ancestor\'\n' +
'    case 74:                        // \'ancestor-or-self\'\n' +
'    case 75:                        // \'and\'\n' +
'    case 79:                        // \'as\'\n' +
'    case 80:                        // \'ascending\'\n' +
'    case 81:                        // \'at\'\n' +
'    case 83:                        // \'base-uri\'\n' +
'    case 84:                        // \'before\'\n' +
'    case 85:                        // \'boundary-space\'\n' +
'    case 86:                        // \'break\'\n' +
'    case 88:                        // \'case\'\n' +
'    case 89:                        // \'cast\'\n' +
'    case 90:                        // \'castable\'\n' +
'    case 91:                        // \'catch\'\n' +
'    case 93:                        // \'child\'\n' +
'    case 94:                        // \'collation\'\n' +
'    case 97:                        // \'constraint\'\n' +
'    case 98:                        // \'construction\'\n' +
'    case 101:                       // \'context\'\n' +
'    case 102:                       // \'continue\'\n' +
'    case 103:                       // \'copy\'\n' +
'    case 104:                       // \'copy-namespaces\'\n' +
'    case 105:                       // \'count\'\n' +
'    case 106:                       // \'decimal-format\'\n' +
'    case 108:                       // \'declare\'\n' +
'    case 109:                       // \'default\'\n' +
'    case 110:                       // \'delete\'\n' +
'    case 111:                       // \'descendant\'\n' +
'    case 112:                       // \'descendant-or-self\'\n' +
'    case 113:                       // \'descending\'\n' +
'    case 118:                       // \'div\'\n' +
'    case 122:                       // \'else\'\n' +
'    case 123:                       // \'empty\'\n' +
'    case 125:                       // \'encoding\'\n' +
'    case 126:                       // \'end\'\n' +
'    case 128:                       // \'eq\'\n' +
'    case 129:                       // \'every\'\n' +
'    case 131:                       // \'except\'\n' +
'    case 132:                       // \'exit\'\n' +
'    case 133:                       // \'external\'\n' +
'    case 134:                       // \'first\'\n' +
'    case 135:                       // \'following\'\n' +
'    case 136:                       // \'following-sibling\'\n' +
'    case 137:                       // \'for\'\n' +
'    case 141:                       // \'ft-option\'\n' +
'    case 146:                       // \'ge\'\n' +
'    case 148:                       // \'group\'\n' +
'    case 150:                       // \'gt\'\n' +
'    case 151:                       // \'idiv\'\n' +
'    case 153:                       // \'import\'\n' +
'    case 154:                       // \'in\'\n' +
'    case 155:                       // \'index\'\n' +
'    case 159:                       // \'insert\'\n' +
'    case 160:                       // \'instance\'\n' +
'    case 161:                       // \'integrity\'\n' +
'    case 162:                       // \'intersect\'\n' +
'    case 163:                       // \'into\'\n' +
'    case 164:                       // \'is\'\n' +
'    case 170:                       // \'last\'\n' +
'    case 171:                       // \'lax\'\n' +
'    case 172:                       // \'le\'\n' +
'    case 174:                       // \'let\'\n' +
'    case 176:                       // \'loop\'\n' +
'    case 178:                       // \'lt\'\n' +
'    case 180:                       // \'mod\'\n' +
'    case 181:                       // \'modify\'\n' +
'    case 182:                       // \'module\'\n' +
'    case 186:                       // \'ne\'\n' +
'    case 192:                       // \'nodes\'\n' +
'    case 198:                       // \'only\'\n' +
'    case 199:                       // \'option\'\n' +
'    case 200:                       // \'or\'\n' +
'    case 201:                       // \'order\'\n' +
'    case 203:                       // \'ordering\'\n' +
'    case 206:                       // \'parent\'\n' +
'    case 212:                       // \'preceding\'\n' +
'    case 213:                       // \'preceding-sibling\'\n' +
'    case 218:                       // \'rename\'\n' +
'    case 219:                       // \'replace\'\n' +
'    case 220:                       // \'return\'\n' +
'    case 221:                       // \'returning\'\n' +
'    case 222:                       // \'revalidation\'\n' +
'    case 224:                       // \'satisfies\'\n' +
'    case 225:                       // \'schema\'\n' +
'    case 228:                       // \'score\'\n' +
'    case 229:                       // \'self\'\n' +
'    case 234:                       // \'sliding\'\n' +
'    case 235:                       // \'some\'\n' +
'    case 236:                       // \'stable\'\n' +
'    case 237:                       // \'start\'\n' +
'    case 240:                       // \'strict\'\n' +
'    case 248:                       // \'to\'\n' +
'    case 249:                       // \'treat\'\n' +
'    case 250:                       // \'try\'\n' +
'    case 251:                       // \'tumbling\'\n' +
'    case 252:                       // \'type\'\n' +
'    case 254:                       // \'union\'\n' +
'    case 257:                       // \'updating\'\n' +
'    case 260:                       // \'validate\'\n' +
'    case 261:                       // \'value\'\n' +
'    case 262:                       // \'variable\'\n' +
'    case 263:                       // \'version\'\n' +
'    case 266:                       // \'where\'\n' +
'    case 267:                       // \'while\'\n' +
'    case 270:                       // \'with\'\n' +
'    case 274:                       // \'xquery\'\n' +
'      lookahead2W(92);              // S^WS | \'#\' | \'(\' | \'(:\'\n' +
'      break;\n' +
'    default:\n' +
'      lk = l1;\n' +
'    }\n' +
'    if (lk == 2836                  // \'{\' Wildcard\n' +
'     || lk == 3348                  // \'{\' EQName^Token\n' +
'     || lk == 4372                  // \'{\' IntegerLiteral\n' +
'     || lk == 4884                  // \'{\' DecimalLiteral\n' +
'     || lk == 5396                  // \'{\' DoubleLiteral\n' +
'     || lk == 5908                  // \'{\' StringLiteral\n' +
'     || lk == 16148                 // \'{\' \'$\'\n' +
'     || lk == 16660                 // \'{\' \'%\'\n' +
'     || lk == 17684                 // \'{\' \'(\'\n' +
'     || lk == 18196                 // \'{\' \'(#\'\n' +
'     || lk == 20756                 // \'{\' \'+\'\n' +
'     || lk == 21780                 // \'{\' \'-\'\n' +
'     || lk == 22804                 // \'{\' \'.\'\n' +
'     || lk == 23316                 // \'{\' \'..\'\n' +
'     || lk == 23828                 // \'{\' \'/\'\n' +
'     || lk == 24340                 // \'{\' \'//\'\n' +
'     || lk == 27924                 // \'{\' \'<\'\n' +
'     || lk == 28436                 // \'{\' \'<!--\'\n' +
'     || lk == 30484                 // \'{\' \'<?\'\n' +
'     || lk == 34068                 // \'{\' \'@\'\n' +
'     || lk == 35092                 // \'{\' \'[\'\n' +
'     || lk == 36116                 // \'{\' \'after\'\n' +
'     || lk == 37140                 // \'{\' \'allowing\'\n' +
'     || lk == 37652                 // \'{\' \'ancestor\'\n' +
'     || lk == 38164                 // \'{\' \'ancestor-or-self\'\n' +
'     || lk == 38676                 // \'{\' \'and\'\n' +
'     || lk == 39700                 // \'{\' \'append\'\n' +
'     || lk == 40212                 // \'{\' \'array\'\n' +
'     || lk == 40724                 // \'{\' \'as\'\n' +
'     || lk == 41236                 // \'{\' \'ascending\'\n' +
'     || lk == 41748                 // \'{\' \'at\'\n' +
'     || lk == 42260                 // \'{\' \'attribute\'\n' +
'     || lk == 42772                 // \'{\' \'base-uri\'\n' +
'     || lk == 43284                 // \'{\' \'before\'\n' +
'     || lk == 43796                 // \'{\' \'boundary-space\'\n' +
'     || lk == 44308                 // \'{\' \'break\'\n' +
'     || lk == 45332                 // \'{\' \'case\'\n' +
'     || lk == 45844                 // \'{\' \'cast\'\n' +
'     || lk == 46356                 // \'{\' \'castable\'\n' +
'     || lk == 46868                 // \'{\' \'catch\'\n' +
'     || lk == 47892                 // \'{\' \'child\'\n' +
'     || lk == 48404                 // \'{\' \'collation\'\n' +
'     || lk == 49428                 // \'{\' \'comment\'\n' +
'     || lk == 49940                 // \'{\' \'constraint\'\n' +
'     || lk == 50452                 // \'{\' \'construction\'\n' +
'     || lk == 51988                 // \'{\' \'context\'\n' +
'     || lk == 52500                 // \'{\' \'continue\'\n' +
'     || lk == 53012                 // \'{\' \'copy\'\n' +
'     || lk == 53524                 // \'{\' \'copy-namespaces\'\n' +
'     || lk == 54036                 // \'{\' \'count\'\n' +
'     || lk == 54548                 // \'{\' \'decimal-format\'\n' +
'     || lk == 55572                 // \'{\' \'declare\'\n' +
'     || lk == 56084                 // \'{\' \'default\'\n' +
'     || lk == 56596                 // \'{\' \'delete\'\n' +
'     || lk == 57108                 // \'{\' \'descendant\'\n' +
'     || lk == 57620                 // \'{\' \'descendant-or-self\'\n' +
'     || lk == 58132                 // \'{\' \'descending\'\n' +
'     || lk == 60692                 // \'{\' \'div\'\n' +
'     || lk == 61204                 // \'{\' \'document\'\n' +
'     || lk == 61716                 // \'{\' \'document-node\'\n' +
'     || lk == 62228                 // \'{\' \'element\'\n' +
'     || lk == 62740                 // \'{\' \'else\'\n' +
'     || lk == 63252                 // \'{\' \'empty\'\n' +
'     || lk == 63764                 // \'{\' \'empty-sequence\'\n' +
'     || lk == 64276                 // \'{\' \'encoding\'\n' +
'     || lk == 64788                 // \'{\' \'end\'\n' +
'     || lk == 65812                 // \'{\' \'eq\'\n' +
'     || lk == 66324                 // \'{\' \'every\'\n' +
'     || lk == 67348                 // \'{\' \'except\'\n' +
'     || lk == 67860                 // \'{\' \'exit\'\n' +
'     || lk == 68372                 // \'{\' \'external\'\n' +
'     || lk == 68884                 // \'{\' \'first\'\n' +
'     || lk == 69396                 // \'{\' \'following\'\n' +
'     || lk == 69908                 // \'{\' \'following-sibling\'\n' +
'     || lk == 70420                 // \'{\' \'for\'\n' +
'     || lk == 72468                 // \'{\' \'ft-option\'\n' +
'     || lk == 74516                 // \'{\' \'function\'\n' +
'     || lk == 75028                 // \'{\' \'ge\'\n' +
'     || lk == 76052                 // \'{\' \'group\'\n' +
'     || lk == 77076                 // \'{\' \'gt\'\n' +
'     || lk == 77588                 // \'{\' \'idiv\'\n' +
'     || lk == 78100                 // \'{\' \'if\'\n' +
'     || lk == 78612                 // \'{\' \'import\'\n' +
'     || lk == 79124                 // \'{\' \'in\'\n' +
'     || lk == 79636                 // \'{\' \'index\'\n' +
'     || lk == 81684                 // \'{\' \'insert\'\n' +
'     || lk == 82196                 // \'{\' \'instance\'\n' +
'     || lk == 82708                 // \'{\' \'integrity\'\n' +
'     || lk == 83220                 // \'{\' \'intersect\'\n' +
'     || lk == 83732                 // \'{\' \'into\'\n' +
'     || lk == 84244                 // \'{\' \'is\'\n' +
'     || lk == 84756                 // \'{\' \'item\'\n' +
'     || lk == 85780                 // \'{\' \'json-item\'\n' +
'     || lk == 87316                 // \'{\' \'last\'\n' +
'     || lk == 87828                 // \'{\' \'lax\'\n' +
'     || lk == 88340                 // \'{\' \'le\'\n' +
'     || lk == 89364                 // \'{\' \'let\'\n' +
'     || lk == 90388                 // \'{\' \'loop\'\n' +
'     || lk == 91412                 // \'{\' \'lt\'\n' +
'     || lk == 92436                 // \'{\' \'mod\'\n' +
'     || lk == 92948                 // \'{\' \'modify\'\n' +
'     || lk == 93460                 // \'{\' \'module\'\n' +
'     || lk == 94484                 // \'{\' \'namespace\'\n' +
'     || lk == 94996                 // \'{\' \'namespace-node\'\n' +
'     || lk == 95508                 // \'{\' \'ne\'\n' +
'     || lk == 98068                 // \'{\' \'node\'\n' +
'     || lk == 98580                 // \'{\' \'nodes\'\n' +
'     || lk == 99604                 // \'{\' \'object\'\n' +
'     || lk == 101652                // \'{\' \'only\'\n' +
'     || lk == 102164                // \'{\' \'option\'\n' +
'     || lk == 102676                // \'{\' \'or\'\n' +
'     || lk == 103188                // \'{\' \'order\'\n' +
'     || lk == 103700                // \'{\' \'ordered\'\n' +
'     || lk == 104212                // \'{\' \'ordering\'\n' +
'     || lk == 105748                // \'{\' \'parent\'\n' +
'     || lk == 108820                // \'{\' \'preceding\'\n' +
'     || lk == 109332                // \'{\' \'preceding-sibling\'\n' +
'     || lk == 110868                // \'{\' \'processing-instruction\'\n' +
'     || lk == 111892                // \'{\' \'rename\'\n' +
'     || lk == 112404                // \'{\' \'replace\'\n' +
'     || lk == 112916                // \'{\' \'return\'\n' +
'     || lk == 113428                // \'{\' \'returning\'\n' +
'     || lk == 113940                // \'{\' \'revalidation\'\n' +
'     || lk == 114964                // \'{\' \'satisfies\'\n' +
'     || lk == 115476                // \'{\' \'schema\'\n' +
'     || lk == 115988                // \'{\' \'schema-attribute\'\n' +
'     || lk == 116500                // \'{\' \'schema-element\'\n' +
'     || lk == 117012                // \'{\' \'score\'\n' +
'     || lk == 117524                // \'{\' \'self\'\n' +
'     || lk == 120084                // \'{\' \'sliding\'\n' +
'     || lk == 120596                // \'{\' \'some\'\n' +
'     || lk == 121108                // \'{\' \'stable\'\n' +
'     || lk == 121620                // \'{\' \'start\'\n' +
'     || lk == 123156                // \'{\' \'strict\'\n' +
'     || lk == 124692                // \'{\' \'switch\'\n' +
'     || lk == 125204                // \'{\' \'text\'\n' +
'     || lk == 127252                // \'{\' \'to\'\n' +
'     || lk == 127764                // \'{\' \'treat\'\n' +
'     || lk == 128276                // \'{\' \'try\'\n' +
'     || lk == 128788                // \'{\' \'tumbling\'\n' +
'     || lk == 129300                // \'{\' \'type\'\n' +
'     || lk == 129812                // \'{\' \'typeswitch\'\n' +
'     || lk == 130324                // \'{\' \'union\'\n' +
'     || lk == 131348                // \'{\' \'unordered\'\n' +
'     || lk == 131860                // \'{\' \'updating\'\n' +
'     || lk == 133396                // \'{\' \'validate\'\n' +
'     || lk == 133908                // \'{\' \'value\'\n' +
'     || lk == 134420                // \'{\' \'variable\'\n' +
'     || lk == 134932                // \'{\' \'version\'\n' +
'     || lk == 136468                // \'{\' \'where\'\n' +
'     || lk == 136980                // \'{\' \'while\'\n' +
'     || lk == 138516                // \'{\' \'with\'\n' +
'     || lk == 140564                // \'{\' \'xquery\'\n' +
'     || lk == 141588                // \'{\' \'{\'\n' +
'     || lk == 142612                // \'{\' \'{|\'\n' +
'     || lk == 144660)               // \'{\' \'}\'\n' +
'    {\n' +
'      lk = memoized(12, e0);\n' +
'      if (lk == 0)\n' +
'      {\n' +
'        var b0A = b0; var e0A = e0; var l1A = l1;\n' +
'        var b1A = b1; var e1A = e1; var l2A = l2;\n' +
'        var b2A = b2; var e2A = e2;\n' +
'        try\n' +
'        {\n' +
'          try_BlockExpr();\n' +
'          memoize(12, e0A, -10);\n' +
'          lk = -14;\n' +
'        }\n' +
'        catch (p10A)\n' +
'        {\n' +
'          lk = -11;\n' +
'          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {\n' +
'          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {\n' +
'          b2 = b2A; e2 = e2A; end = e2A; }}\n' +
'          memoize(12, e0A, -11);\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    switch (lk)\n' +
'    {\n' +
'    case 8:                         // IntegerLiteral\n' +
'    case 9:                         // DecimalLiteral\n' +
'    case 10:                        // DoubleLiteral\n' +
'    case 11:                        // StringLiteral\n' +
'      try_Literal();\n' +
'      break;\n' +
'    case 31:                        // \'$\'\n' +
'      try_VarRef();\n' +
'      break;\n' +
'    case 34:                        // \'(\'\n' +
'      try_ParenthesizedExpr();\n' +
'      break;\n' +
'    case 44:                        // \'.\'\n' +
'      try_ContextItemExpr();\n' +
'      break;\n' +
'    case 17414:                     // EQName^Token \'(\'\n' +
'    case 17478:                     // \'after\' \'(\'\n' +
'    case 17480:                     // \'allowing\' \'(\'\n' +
'    case 17481:                     // \'ancestor\' \'(\'\n' +
'    case 17482:                     // \'ancestor-or-self\' \'(\'\n' +
'    case 17483:                     // \'and\' \'(\'\n' +
'    case 17487:                     // \'as\' \'(\'\n' +
'    case 17488:                     // \'ascending\' \'(\'\n' +
'    case 17489:                     // \'at\' \'(\'\n' +
'    case 17491:                     // \'base-uri\' \'(\'\n' +
'    case 17492:                     // \'before\' \'(\'\n' +
'    case 17493:                     // \'boundary-space\' \'(\'\n' +
'    case 17494:                     // \'break\' \'(\'\n' +
'    case 17496:                     // \'case\' \'(\'\n' +
'    case 17497:                     // \'cast\' \'(\'\n' +
'    case 17498:                     // \'castable\' \'(\'\n' +
'    case 17499:                     // \'catch\' \'(\'\n' +
'    case 17501:                     // \'child\' \'(\'\n' +
'    case 17502:                     // \'collation\' \'(\'\n' +
'    case 17505:                     // \'constraint\' \'(\'\n' +
'    case 17506:                     // \'construction\' \'(\'\n' +
'    case 17509:                     // \'context\' \'(\'\n' +
'    case 17510:                     // \'continue\' \'(\'\n' +
'    case 17511:                     // \'copy\' \'(\'\n' +
'    case 17512:                     // \'copy-namespaces\' \'(\'\n' +
'    case 17513:                     // \'count\' \'(\'\n' +
'    case 17514:                     // \'decimal-format\' \'(\'\n' +
'    case 17516:                     // \'declare\' \'(\'\n' +
'    case 17517:                     // \'default\' \'(\'\n' +
'    case 17518:                     // \'delete\' \'(\'\n' +
'    case 17519:                     // \'descendant\' \'(\'\n' +
'    case 17520:                     // \'descendant-or-self\' \'(\'\n' +
'    case 17521:                     // \'descending\' \'(\'\n' +
'    case 17526:                     // \'div\' \'(\'\n' +
'    case 17527:                     // \'document\' \'(\'\n' +
'    case 17530:                     // \'else\' \'(\'\n' +
'    case 17531:                     // \'empty\' \'(\'\n' +
'    case 17533:                     // \'encoding\' \'(\'\n' +
'    case 17534:                     // \'end\' \'(\'\n' +
'    case 17536:                     // \'eq\' \'(\'\n' +
'    case 17537:                     // \'every\' \'(\'\n' +
'    case 17539:                     // \'except\' \'(\'\n' +
'    case 17540:                     // \'exit\' \'(\'\n' +
'    case 17541:                     // \'external\' \'(\'\n' +
'    case 17542:                     // \'first\' \'(\'\n' +
'    case 17543:                     // \'following\' \'(\'\n' +
'    case 17544:                     // \'following-sibling\' \'(\'\n' +
'    case 17545:                     // \'for\' \'(\'\n' +
'    case 17549:                     // \'ft-option\' \'(\'\n' +
'    case 17554:                     // \'ge\' \'(\'\n' +
'    case 17556:                     // \'group\' \'(\'\n' +
'    case 17558:                     // \'gt\' \'(\'\n' +
'    case 17559:                     // \'idiv\' \'(\'\n' +
'    case 17561:                     // \'import\' \'(\'\n' +
'    case 17562:                     // \'in\' \'(\'\n' +
'    case 17563:                     // \'index\' \'(\'\n' +
'    case 17567:                     // \'insert\' \'(\'\n' +
'    case 17568:                     // \'instance\' \'(\'\n' +
'    case 17569:                     // \'integrity\' \'(\'\n' +
'    case 17570:                     // \'intersect\' \'(\'\n' +
'    case 17571:                     // \'into\' \'(\'\n' +
'    case 17572:                     // \'is\' \'(\'\n' +
'    case 17578:                     // \'last\' \'(\'\n' +
'    case 17579:                     // \'lax\' \'(\'\n' +
'    case 17580:                     // \'le\' \'(\'\n' +
'    case 17582:                     // \'let\' \'(\'\n' +
'    case 17584:                     // \'loop\' \'(\'\n' +
'    case 17586:                     // \'lt\' \'(\'\n' +
'    case 17588:                     // \'mod\' \'(\'\n' +
'    case 17589:                     // \'modify\' \'(\'\n' +
'    case 17590:                     // \'module\' \'(\'\n' +
'    case 17592:                     // \'namespace\' \'(\'\n' +
'    case 17594:                     // \'ne\' \'(\'\n' +
'    case 17600:                     // \'nodes\' \'(\'\n' +
'    case 17606:                     // \'only\' \'(\'\n' +
'    case 17607:                     // \'option\' \'(\'\n' +
'    case 17608:                     // \'or\' \'(\'\n' +
'    case 17609:                     // \'order\' \'(\'\n' +
'    case 17610:                     // \'ordered\' \'(\'\n' +
'    case 17611:                     // \'ordering\' \'(\'\n' +
'    case 17614:                     // \'parent\' \'(\'\n' +
'    case 17620:                     // \'preceding\' \'(\'\n' +
'    case 17621:                     // \'preceding-sibling\' \'(\'\n' +
'    case 17626:                     // \'rename\' \'(\'\n' +
'    case 17627:                     // \'replace\' \'(\'\n' +
'    case 17628:                     // \'return\' \'(\'\n' +
'    case 17629:                     // \'returning\' \'(\'\n' +
'    case 17630:                     // \'revalidation\' \'(\'\n' +
'    case 17632:                     // \'satisfies\' \'(\'\n' +
'    case 17633:                     // \'schema\' \'(\'\n' +
'    case 17636:                     // \'score\' \'(\'\n' +
'    case 17637:                     // \'self\' \'(\'\n' +
'    case 17642:                     // \'sliding\' \'(\'\n' +
'    case 17643:                     // \'some\' \'(\'\n' +
'    case 17644:                     // \'stable\' \'(\'\n' +
'    case 17645:                     // \'start\' \'(\'\n' +
'    case 17648:                     // \'strict\' \'(\'\n' +
'    case 17656:                     // \'to\' \'(\'\n' +
'    case 17657:                     // \'treat\' \'(\'\n' +
'    case 17658:                     // \'try\' \'(\'\n' +
'    case 17659:                     // \'tumbling\' \'(\'\n' +
'    case 17660:                     // \'type\' \'(\'\n' +
'    case 17662:                     // \'union\' \'(\'\n' +
'    case 17664:                     // \'unordered\' \'(\'\n' +
'    case 17665:                     // \'updating\' \'(\'\n' +
'    case 17668:                     // \'validate\' \'(\'\n' +
'    case 17669:                     // \'value\' \'(\'\n' +
'    case 17670:                     // \'variable\' \'(\'\n' +
'    case 17671:                     // \'version\' \'(\'\n' +
'    case 17674:                     // \'where\' \'(\'\n' +
'    case 17675:                     // \'while\' \'(\'\n' +
'    case 17678:                     // \'with\' \'(\'\n' +
'    case 17682:                     // \'xquery\' \'(\'\n' +
'      try_FunctionCall();\n' +
'      break;\n' +
'    case 141514:                    // \'ordered\' \'{\'\n' +
'      try_OrderedExpr();\n' +
'      break;\n' +
'    case 141568:                    // \'unordered\' \'{\'\n' +
'      try_UnorderedExpr();\n' +
'      break;\n' +
'    case 32:                        // \'%\'\n' +
'    case 120:                       // \'document-node\'\n' +
'    case 124:                       // \'empty-sequence\'\n' +
'    case 145:                       // \'function\'\n' +
'    case 152:                       // \'if\'\n' +
'    case 165:                       // \'item\'\n' +
'    case 185:                       // \'namespace-node\'\n' +
'    case 191:                       // \'node\'\n' +
'    case 226:                       // \'schema-attribute\'\n' +
'    case 227:                       // \'schema-element\'\n' +
'    case 243:                       // \'switch\'\n' +
'    case 253:                       // \'typeswitch\'\n' +
'    case 14854:                     // EQName^Token \'#\'\n' +
'    case 14918:                     // \'after\' \'#\'\n' +
'    case 14920:                     // \'allowing\' \'#\'\n' +
'    case 14921:                     // \'ancestor\' \'#\'\n' +
'    case 14922:                     // \'ancestor-or-self\' \'#\'\n' +
'    case 14923:                     // \'and\' \'#\'\n' +
'    case 14927:                     // \'as\' \'#\'\n' +
'    case 14928:                     // \'ascending\' \'#\'\n' +
'    case 14929:                     // \'at\' \'#\'\n' +
'    case 14930:                     // \'attribute\' \'#\'\n' +
'    case 14931:                     // \'base-uri\' \'#\'\n' +
'    case 14932:                     // \'before\' \'#\'\n' +
'    case 14933:                     // \'boundary-space\' \'#\'\n' +
'    case 14934:                     // \'break\' \'#\'\n' +
'    case 14936:                     // \'case\' \'#\'\n' +
'    case 14937:                     // \'cast\' \'#\'\n' +
'    case 14938:                     // \'castable\' \'#\'\n' +
'    case 14939:                     // \'catch\' \'#\'\n' +
'    case 14941:                     // \'child\' \'#\'\n' +
'    case 14942:                     // \'collation\' \'#\'\n' +
'    case 14944:                     // \'comment\' \'#\'\n' +
'    case 14945:                     // \'constraint\' \'#\'\n' +
'    case 14946:                     // \'construction\' \'#\'\n' +
'    case 14949:                     // \'context\' \'#\'\n' +
'    case 14950:                     // \'continue\' \'#\'\n' +
'    case 14951:                     // \'copy\' \'#\'\n' +
'    case 14952:                     // \'copy-namespaces\' \'#\'\n' +
'    case 14953:                     // \'count\' \'#\'\n' +
'    case 14954:                     // \'decimal-format\' \'#\'\n' +
'    case 14956:                     // \'declare\' \'#\'\n' +
'    case 14957:                     // \'default\' \'#\'\n' +
'    case 14958:                     // \'delete\' \'#\'\n' +
'    case 14959:                     // \'descendant\' \'#\'\n' +
'    case 14960:                     // \'descendant-or-self\' \'#\'\n' +
'    case 14961:                     // \'descending\' \'#\'\n' +
'    case 14966:                     // \'div\' \'#\'\n' +
'    case 14967:                     // \'document\' \'#\'\n' +
'    case 14969:                     // \'element\' \'#\'\n' +
'    case 14970:                     // \'else\' \'#\'\n' +
'    case 14971:                     // \'empty\' \'#\'\n' +
'    case 14973:                     // \'encoding\' \'#\'\n' +
'    case 14974:                     // \'end\' \'#\'\n' +
'    case 14976:                     // \'eq\' \'#\'\n' +
'    case 14977:                     // \'every\' \'#\'\n' +
'    case 14979:                     // \'except\' \'#\'\n' +
'    case 14980:                     // \'exit\' \'#\'\n' +
'    case 14981:                     // \'external\' \'#\'\n' +
'    case 14982:                     // \'first\' \'#\'\n' +
'    case 14983:                     // \'following\' \'#\'\n' +
'    case 14984:                     // \'following-sibling\' \'#\'\n' +
'    case 14985:                     // \'for\' \'#\'\n' +
'    case 14989:                     // \'ft-option\' \'#\'\n' +
'    case 14994:                     // \'ge\' \'#\'\n' +
'    case 14996:                     // \'group\' \'#\'\n' +
'    case 14998:                     // \'gt\' \'#\'\n' +
'    case 14999:                     // \'idiv\' \'#\'\n' +
'    case 15001:                     // \'import\' \'#\'\n' +
'    case 15002:                     // \'in\' \'#\'\n' +
'    case 15003:                     // \'index\' \'#\'\n' +
'    case 15007:                     // \'insert\' \'#\'\n' +
'    case 15008:                     // \'instance\' \'#\'\n' +
'    case 15009:                     // \'integrity\' \'#\'\n' +
'    case 15010:                     // \'intersect\' \'#\'\n' +
'    case 15011:                     // \'into\' \'#\'\n' +
'    case 15012:                     // \'is\' \'#\'\n' +
'    case 15018:                     // \'last\' \'#\'\n' +
'    case 15019:                     // \'lax\' \'#\'\n' +
'    case 15020:                     // \'le\' \'#\'\n' +
'    case 15022:                     // \'let\' \'#\'\n' +
'    case 15024:                     // \'loop\' \'#\'\n' +
'    case 15026:                     // \'lt\' \'#\'\n' +
'    case 15028:                     // \'mod\' \'#\'\n' +
'    case 15029:                     // \'modify\' \'#\'\n' +
'    case 15030:                     // \'module\' \'#\'\n' +
'    case 15032:                     // \'namespace\' \'#\'\n' +
'    case 15034:                     // \'ne\' \'#\'\n' +
'    case 15040:                     // \'nodes\' \'#\'\n' +
'    case 15046:                     // \'only\' \'#\'\n' +
'    case 15047:                     // \'option\' \'#\'\n' +
'    case 15048:                     // \'or\' \'#\'\n' +
'    case 15049:                     // \'order\' \'#\'\n' +
'    case 15050:                     // \'ordered\' \'#\'\n' +
'    case 15051:                     // \'ordering\' \'#\'\n' +
'    case 15054:                     // \'parent\' \'#\'\n' +
'    case 15060:                     // \'preceding\' \'#\'\n' +
'    case 15061:                     // \'preceding-sibling\' \'#\'\n' +
'    case 15064:                     // \'processing-instruction\' \'#\'\n' +
'    case 15066:                     // \'rename\' \'#\'\n' +
'    case 15067:                     // \'replace\' \'#\'\n' +
'    case 15068:                     // \'return\' \'#\'\n' +
'    case 15069:                     // \'returning\' \'#\'\n' +
'    case 15070:                     // \'revalidation\' \'#\'\n' +
'    case 15072:                     // \'satisfies\' \'#\'\n' +
'    case 15073:                     // \'schema\' \'#\'\n' +
'    case 15076:                     // \'score\' \'#\'\n' +
'    case 15077:                     // \'self\' \'#\'\n' +
'    case 15082:                     // \'sliding\' \'#\'\n' +
'    case 15083:                     // \'some\' \'#\'\n' +
'    case 15084:                     // \'stable\' \'#\'\n' +
'    case 15085:                     // \'start\' \'#\'\n' +
'    case 15088:                     // \'strict\' \'#\'\n' +
'    case 15092:                     // \'text\' \'#\'\n' +
'    case 15096:                     // \'to\' \'#\'\n' +
'    case 15097:                     // \'treat\' \'#\'\n' +
'    case 15098:                     // \'try\' \'#\'\n' +
'    case 15099:                     // \'tumbling\' \'#\'\n' +
'    case 15100:                     // \'type\' \'#\'\n' +
'    case 15102:                     // \'union\' \'#\'\n' +
'    case 15104:                     // \'unordered\' \'#\'\n' +
'    case 15105:                     // \'updating\' \'#\'\n' +
'    case 15108:                     // \'validate\' \'#\'\n' +
'    case 15109:                     // \'value\' \'#\'\n' +
'    case 15110:                     // \'variable\' \'#\'\n' +
'    case 15111:                     // \'version\' \'#\'\n' +
'    case 15114:                     // \'where\' \'#\'\n' +
'    case 15115:                     // \'while\' \'#\'\n' +
'    case 15118:                     // \'with\' \'#\'\n' +
'    case 15122:                     // \'xquery\' \'#\'\n' +
'      try_FunctionItemExpr();\n' +
'      break;\n' +
'    case -10:\n' +
'      try_BlockExpr();\n' +
'      break;\n' +
'    case -11:\n' +
'      try_ObjectConstructor();\n' +
'      break;\n' +
'    case 68:                        // \'[\'\n' +
'      try_ArrayConstructor();\n' +
'      break;\n' +
'    case 278:                       // \'{|\'\n' +
'      try_JSONSimpleObjectUnion();\n' +
'      break;\n' +
'    case -14:\n' +
'      break;\n' +
'    default:\n' +
'      try_Constructor();\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function parse_JSONSimpleObjectUnion()\n' +
'  {\n' +
'    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);\n' +
'    shift(278);                     // \'{|\'\n' +
'    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|}\'\n' +
'    if (l1 != 281)                  // \'|}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'    }\n' +
'    shift(281);                     // \'|}\'\n' +
'    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);\n' +
'  }\n' +
'\n' +
'  function try_JSONSimpleObjectUnion()\n' +
'  {\n' +
'    shiftT(278);                    // \'{|\'\n' +
'    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'|}\'\n' +
'    if (l1 != 281)                  // \'|}\'\n' +
'    {\n' +
'      try_Expr();\n' +
'    }\n' +
'    shiftT(281);                    // \'|}\'\n' +
'  }\n' +
'\n' +
'  function parse_ObjectConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ObjectConstructor", e0);\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_PairConstructor();\n' +
'      for (;;)\n' +
'      {\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shift(41);                  // \',\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        whitespace();\n' +
'        parse_PairConstructor();\n' +
'      }\n' +
'    }\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("ObjectConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_ObjectConstructor()\n' +
'  {\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    if (l1 != 282)                  // \'}\'\n' +
'    {\n' +
'      try_PairConstructor();\n' +
'      for (;;)\n' +
'      {\n' +
'        if (l1 != 41)               // \',\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        shiftT(41);                 // \',\'\n' +
'        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'        try_PairConstructor();\n' +
'      }\n' +
'    }\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_PairConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("PairConstructor", e0);\n' +
'    parse_ExprSingle();\n' +
'    shift(49);                      // \':\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    whitespace();\n' +
'    parse_ExprSingle();\n' +
'    eventHandler.endNonterminal("PairConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_PairConstructor()\n' +
'  {\n' +
'    try_ExprSingle();\n' +
'    shiftT(49);                     // \':\'\n' +
'    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    try_ExprSingle();\n' +
'  }\n' +
'\n' +
'  function parse_ArrayConstructor()\n' +
'  {\n' +
'    eventHandler.startNonterminal("ArrayConstructor", e0);\n' +
'    shift(68);                      // \'[\'\n' +
'    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 69)                   // \']\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_Expr();\n' +
'    }\n' +
'    shift(69);                      // \']\'\n' +
'    eventHandler.endNonterminal("ArrayConstructor", e0);\n' +
'  }\n' +
'\n' +
'  function try_ArrayConstructor()\n' +
'  {\n' +
'    shiftT(68);                     // \'[\'\n' +
'    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \']\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\'\n' +
'    if (l1 != 69)                   // \']\'\n' +
'    {\n' +
'      try_Expr();\n' +
'    }\n' +
'    shiftT(69);                     // \']\'\n' +
'  }\n' +
'\n' +
'  function parse_BlockExpr()\n' +
'  {\n' +
'    eventHandler.startNonterminal("BlockExpr", e0);\n' +
'    shift(276);                     // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    whitespace();\n' +
'    parse_StatementsAndOptionalExpr();\n' +
'    shift(282);                     // \'}\'\n' +
'    eventHandler.endNonterminal("BlockExpr", e0);\n' +
'  }\n' +
'\n' +
'  function try_BlockExpr()\n' +
'  {\n' +
'    shiftT(276);                    // \'{\'\n' +
'    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'    try_StatementsAndOptionalExpr();\n' +
'    shiftT(282);                    // \'}\'\n' +
'  }\n' +
'\n' +
'  function parse_FunctionDecl()\n' +
'  {\n' +
'    eventHandler.startNonterminal("FunctionDecl", e0);\n' +
'    shift(145);                     // \'function\'\n' +
'    lookahead1W(249);               // EQName^Token | S^WS | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' |\n' +
'                                    // \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' | \'namespace-node\' | \'ne\' |\n' +
'                                    // \'node\' | \'nodes\' | \'only\' | \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' |\n' +
'                                    // \'parent\' | \'preceding\' | \'preceding-sibling\' | \'processing-instruction\' |\n' +
'                                    // \'rename\' | \'replace\' | \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' |\n' +
'                                    // \'schema\' | \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' |\n' +
'                                    // \'some\' | \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' |\n' +
'                                    // \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\'\n' +
'    whitespace();\n' +
'    parse_EQName();\n' +
'    lookahead1W(22);                // S^WS | \'(\' | \'(:\'\n' +
'    shift(34);                      // \'(\'\n' +
'    lookahead1W(94);                // S^WS | \'$\' | \'(:\' | \')\'\n' +
'    if (l1 == 31)                   // \'$\'\n' +
'    {\n' +
'      whitespace();\n' +
'      parse_ParamList();\n' +
'    }\n' +
'    shift(37);                      // \')\'\n' +
'    lookahead1W(148);               // S^WS | \'(:\' | \'as\' | \'external\' | \'{\'\n' +
'    if (l1 == 79)                   // \'as\'\n' +
'    {\n' +
'      shift(79);                    // \'as\'\n' +
'      lookahead1W(260);             // EQName^Token | S^WS | \'%\' | \'(\' | \'(:\' | \'after\' | \'allowing\' | \'ancestor\' |\n' +
'                                    // \'ancestor-or-self\' | \'and\' | \'array\' | \'as\' | \'ascending\' | \'at\' | \'attribute\' |\n' +
'                                    // \'base-uri\' | \'before\' | \'boundary-space\' | \'break\' | \'case\' | \'cast\' |\n' +
'                                    // \'castable\' | \'catch\' | \'child\' | \'collation\' | \'comment\' | \'constraint\' |\n' +
'                                    // \'construction\' | \'context\' | \'continue\' | \'copy\' | \'copy-namespaces\' | \'count\' |\n' +
'                                    // \'decimal-format\' | \'declare\' | \'default\' | \'delete\' | \'descendant\' |\n' +
'                                    // \'descendant-or-self\' | \'descending\' | \'div\' | \'document\' | \'document-node\' |\n' +
'                                    // \'element\' | \'else\' | \'empty\' | \'empty-sequence\' | \'encoding\' | \'end\' | \'eq\' |\n' +
'                                    // \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' | \'following\' |\n' +
'                                    // \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' | \'group\' | \'gt\' |\n' +
'                                    // \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' | \'instance\' | \'integrity\' |\n' +
'                                    // \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' | \'last\' | \'lax\' | \'le\' |\n' +
'                                    // \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' | \'namespace\' |\n' +
'                                    // \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' | \'option\' |\n' +
'                                    // \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'structured-item\' | \'switch\' | \'text\' | \'to\' |\n' +
'                                    // \'treat\' | \'try\' | \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' |\n' +
'                                    // \'updating\' | \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' |\n' +
'                                    // \'with\' | \'xquery\'\n' +
'      whitespace();\n' +
'      parse_SequenceType();\n' +
'    }\n' +
'    lookahead1W(118);               // S^WS | \'(:\' | \'external\' | \'{\'\n' +
'    switch (l1)\n' +
'    {\n' +
'    case 276:                       // \'{\'\n' +
'      shift(276);                   // \'{\'\n' +
'      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |\n' +
'                                    // StringLiteral | S^WS | \'$\' | \'%\' | \'(\' | \'(#\' | \'(:\' | \'+\' | \'-\' | \'.\' | \'..\' |\n' +
'                                    // \'/\' | \'//\' | \'<\' | \'<!--\' | \'<?\' | \'@\' | \'[\' | \'after\' | \'allowing\' |\n' +
'                                    // \'ancestor\' | \'ancestor-or-self\' | \'and\' | \'append\' | \'array\' | \'as\' |\n' +
'                                    // \'ascending\' | \'at\' | \'attribute\' | \'base-uri\' | \'before\' | \'boundary-space\' |\n' +
'                                    // \'break\' | \'case\' | \'cast\' | \'castable\' | \'catch\' | \'child\' | \'collation\' |\n' +
'                                    // \'comment\' | \'constraint\' | \'construction\' | \'context\' | \'continue\' | \'copy\' |\n' +
'                                    // \'copy-namespaces\' | \'count\' | \'decimal-format\' | \'declare\' | \'default\' |\n' +
'                                    // \'delete\' | \'descendant\' | \'descendant-or-self\' | \'descending\' | \'div\' |\n' +
'                                    // \'document\' | \'document-node\' | \'element\' | \'else\' | \'empty\' | \'empty-sequence\' |\n' +
'                                    // \'encoding\' | \'end\' | \'eq\' | \'every\' | \'except\' | \'exit\' | \'external\' | \'first\' |\n' +
'                                    // \'following\' | \'following-sibling\' | \'for\' | \'ft-option\' | \'function\' | \'ge\' |\n' +
'                                    // \'group\' | \'gt\' | \'idiv\' | \'if\' | \'import\' | \'in\' | \'index\' | \'insert\' |\n' +
'                                    // \'instance\' | \'integrity\' | \'intersect\' | \'into\' | \'is\' | \'item\' | \'json-item\' |\n' +
'                                    // \'last\' | \'lax\' | \'le\' | \'let\' | \'loop\' | \'lt\' | \'mod\' | \'modify\' | \'module\' |\n' +
'                                    // \'namespace\' | \'namespace-node\' | \'ne\' | \'node\' | \'nodes\' | \'object\' | \'only\' |\n' +
'                                    // \'option\' | \'or\' | \'order\' | \'ordered\' | \'ordering\' | \'parent\' | \'preceding\' |\n' +
'                                    // \'preceding-sibling\' | \'processing-instruction\' | \'rename\' | \'replace\' |\n' +
'                                    // \'return\' | \'returning\' | \'revalidation\' | \'satisfies\' | \'schema\' |\n' +
'                                    // \'schema-attribute\' | \'schema-element\' | \'score\' | \'self\' | \'sliding\' | \'some\' |\n' +
'                                    // \'stable\' | \'start\' | \'strict\' | \'switch\' | \'text\' | \'to\' | \'treat\' | \'try\' |\n' +
'                                    // \'tumbling\' | \'type\' | \'typeswitch\' | \'union\' | \'unordered\' | \'updating\' |\n' +
'                                    // \'validate\' | \'value\' | \'variable\' | \'version\' | \'where\' | \'while\' | \'with\' |\n' +
'                                    // \'xquery\' | \'{\' | \'{|\' | \'}\'\n' +
'      whitespace();\n' +
'      parse_StatementsAndOptionalExpr();\n' +
'      shift(282);                   // \'}\'\n' +
'      break;\n' +
'    default:\n' +
'      shift(133);                   // \'external\'\n' +
'    }\n' +
'    eventHandler.endNonterminal("FunctionDecl", e0);\n' +
'  }\n' +
'\n' +
'  var lk, b0, e0;\n' +
'  var l1, b1, e1;\n' +
'  var l2, b2, e2;\n' +
'  var bx, ex, sx, lx, tx;\n' +
'  var eventHandler;\n' +
'  var memo;\n' +
'\n' +
'  function memoize(i, e, v)\n' +
'  {\n' +
'    memo[(e << 4) + i] = v;\n' +
'  }\n' +
'\n' +
'  function memoized(i, e)\n' +
'  {\n' +
'    var v = memo[(e << 4) + i];\n' +
'    return typeof v != "undefined" ? v : 0;\n' +
'  }\n' +
'\n' +
'  function error(b, e, s, l, t)\n' +
'  {\n' +
'    if (e > ex)\n' +
'    {\n' +
'      bx = b;\n' +
'      ex = e;\n' +
'      sx = s;\n' +
'      lx = l;\n' +
'      tx = t;\n' +
'    }\n' +
'    throw new self.ParseException(bx, ex, sx, lx, tx);\n' +
'  }\n' +
'\n' +
'  function shift(t)\n' +
'  {\n' +
'    if (l1 == t)\n' +
'    {\n' +
'      whitespace();\n' +
'      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1 > size ? size : e1);\n' +
'      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {\n' +
'      b1 = b2; e1 = e2; l2 = 0; }\n' +
'    }\n' +
'    else\n' +
'    {\n' +
'      error(b1, e1, 0, l1, t);\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function shiftT(t)\n' +
'  {\n' +
'    if (l1 == t)\n' +
'    {\n' +
'      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {\n' +
'      b1 = b2; e1 = e2; l2 = 0; }\n' +
'    }\n' +
'    else\n' +
'    {\n' +
'      error(b1, e1, 0, l1, t);\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function skip(code)\n' +
'  {\n' +
'    var b0W = b0; var e0W = e0; var l1W = l1;\n' +
'    var b1W = b1; var e1W = e1;\n' +
'\n' +
'    l1 = code; b1 = begin; e1 = end;\n' +
'    l2 = 0;\n' +
'\n' +
'    try_Whitespace();\n' +
'\n' +
'    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {\n' +
'    b1 = b1W; e1 = e1W; }\n' +
'  }\n' +
'\n' +
'  function whitespace()\n' +
'  {\n' +
'    if (e0 != b1)\n' +
'    {\n' +
'      b0 = e0;\n' +
'      e0 = b1;\n' +
'      eventHandler.whitespace(b0, e0);\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function matchW(set)\n' +
'  {\n' +
'    var code;\n' +
'    for (;;)\n' +
'    {\n' +
'      code = match(set);\n' +
'      if (code != 22)               // S^WS\n' +
'      {\n' +
'        if (code != 36)             // \'(:\'\n' +
'        {\n' +
'          break;\n' +
'        }\n' +
'        skip(code);\n' +
'      }\n' +
'    }\n' +
'    return code;\n' +
'  }\n' +
'\n' +
'  function lookahead1W(set)\n' +
'  {\n' +
'    if (l1 == 0)\n' +
'    {\n' +
'      l1 = matchW(set);\n' +
'      b1 = begin;\n' +
'      e1 = end;\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function lookahead2W(set)\n' +
'  {\n' +
'    if (l2 == 0)\n' +
'    {\n' +
'      l2 = matchW(set);\n' +
'      b2 = begin;\n' +
'      e2 = end;\n' +
'    }\n' +
'    lk = (l2 << 9) | l1;\n' +
'  }\n' +
'\n' +
'  function lookahead1(set)\n' +
'  {\n' +
'    if (l1 == 0)\n' +
'    {\n' +
'      l1 = match(set);\n' +
'      b1 = begin;\n' +
'      e1 = end;\n' +
'    }\n' +
'  }\n' +
'\n' +
'  function lookahead2(set)\n' +
'  {\n' +
'    if (l2 == 0)\n' +
'    {\n' +
'      l2 = match(set);\n' +
'      b2 = begin;\n' +
'      e2 = end;\n' +
'    }\n' +
'    lk = (l2 << 9) | l1;\n' +
'  }\n' +
'\n' +
'  var input;\n' +
'  var size;\n' +
'  var begin;\n' +
'  var end;\n' +
'\n' +
'  function match(tokenSetId)\n' +
'  {\n' +
'    var nonbmp = false;\n' +
'    begin = end;\n' +
'    var current = end;\n' +
'    var result = XQueryParser.INITIAL[tokenSetId];\n' +
'    var state = 0;\n' +
'\n' +
'    for (var code = result & 4095; code != 0; )\n' +
'    {\n' +
'      var charclass;\n' +
'      var c0 = current < size ? input.charCodeAt(current) : 0;\n' +
'      ++current;\n' +
'      if (c0 < 0x80)\n' +
'      {\n' +
'        charclass = XQueryParser.MAP0[c0];\n' +
'      }\n' +
'      else if (c0 < 0xd800)\n' +
'      {\n' +
'        var c1 = c0 >> 4;\n' +
'        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];\n' +
'      }\n' +
'      else\n' +
'      {\n' +
'        if (c0 < 0xdc00)\n' +
'        {\n' +
'          var c1 = current < size ? input.charCodeAt(current) : 0;\n' +
'          if (c1 >= 0xdc00 && c1 < 0xe000)\n' +
'          {\n' +
'            ++current;\n' +
'            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;\n' +
'            nonbmp = true;\n' +
'          }\n' +
'        }\n' +
'        var lo = 0, hi = 5;\n' +
'        for (var m = 3; ; m = (hi + lo) >> 1)\n' +
'        {\n' +
'          if (XQueryParser.MAP2[m] > c0) hi = m - 1;\n' +
'          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;\n' +
'          else {charclass = XQueryParser.MAP2[12 + m]; break;}\n' +
'          if (lo > hi) {charclass = 0; break;}\n' +
'        }\n' +
'      }\n' +
'\n' +
'      state = code;\n' +
'      var i0 = (charclass << 12) + code - 1;\n' +
'      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];\n' +
'\n' +
'      if (code > 4095)\n' +
'      {\n' +
'        result = code;\n' +
'        code &= 4095;\n' +
'        end = current;\n' +
'      }\n' +
'    }\n' +
'\n' +
'    result >>= 12;\n' +
'    if (result == 0)\n' +
'    {\n' +
'      end = current - 1;\n' +
'      var c1 = end < size ? input.charCodeAt(end) : 0;\n' +
'      if (c1 >= 0xdc00 && c1 < 0xe000) --end;\n' +
'      return error(begin, end, state, -1, -1);\n' +
'    }\n' +
'\n' +
'    if (nonbmp)\n' +
'    {\n' +
'      for (var i = result >> 9; i > 0; --i)\n' +
'      {\n' +
'        --end;\n' +
'        var c1 = end < size ? input.charCodeAt(end) : 0;\n' +
'        if (c1 >= 0xdc00 && c1 < 0xe000) --end;\n' +
'      }\n' +
'    }\n' +
'    else\n' +
'    {\n' +
'      end -= result >> 9;\n' +
'    }\n' +
'\n' +
'    return (result & 511) - 1;\n' +
'  }\n' +
'}\n' +
'\n' +
'XQueryParser.getTokenSet = function(tokenSetId)\n' +
'{\n' +
'  var set = [];\n' +
'  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;\n' +
'  for (var i = 0; i < 284; i += 32)\n' +
'  {\n' +
'    var j = i;\n' +
'    var i0 = (i >> 5) * 3689 + s - 1;\n' +
'    var i1 = i0 >> 1;\n' +
'    var i2 = i1 >> 2;\n' +
'    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];\n' +
'    for ( ; f != 0; f >>>= 1, ++j)\n' +
'    {\n' +
'      if ((f & 1) != 0)\n' +
'      {\n' +
'        set.push(XQueryParser.TOKEN[j]);\n' +
'      }\n' +
'    }\n' +
'  }\n' +
'  return set;\n' +
'};\n' +
'\n' +
'XQueryParser.MAP0 =\n' +
'[\n' +
'  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,\n' +
'  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,\n' +
'  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,\n' +
'  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n' +
'  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38\n' +
'];\n' +
'\n' +
'XQueryParser.MAP1 =\n' +
'[\n' +
'  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,\n' +
'  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,\n' +
'  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,\n' +
'  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,\n' +
'  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,\n' +
'  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,\n' +
'  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,\n' +
'  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,\n' +
'  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,\n' +
'  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,\n' +
'  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,\n' +
'  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n' +
'  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,\n' +
'  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,\n' +
'  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,\n' +
'  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n' +
'  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,\n' +
'  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,\n' +
'  /* 452 */ 69, 69, 69, 69\n' +
'];\n' +
'\n' +
'XQueryParser.MAP2 =\n' +
'[\n' +
'  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,\n' +
'  /* 17 */ 38\n' +
'];\n' +
'\n' +
'XQueryParser.INITIAL =\n' +
'[\n' +
'  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n' +
'  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n' +
'  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n' +
'  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\n' +
'  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n' +
'  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\n' +
'  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n' +
'  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,\n' +
'  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,\n' +
'  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n' +
'  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,\n' +
'  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,\n' +
'  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285\n' +
'];\n' +
'\n' +
'XQueryParser.TRANSITION =\n' +
'[\n' +
'  /*     0 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    15 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    30 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    45 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    60 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    75 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*    90 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   105 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   120 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   135 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   150 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   165 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   180 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   195 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   210 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   225 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   240 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   255 */ 25502, 21854, 18176, 18180, 18180, 18180, 18199, 18180, 18180, 18180, 18180, 18220, 18180, 18180, 18180,\n' +
'  /*   270 */ 18180, 18211, 18180, 18183, 18236, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502,\n' +
'  /*   285 */ 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882,\n' +
'  /*   300 */ 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297,\n' +
'  /*   315 */ 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229,\n' +
'  /*   330 */ 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148,\n' +
'  /*   345 */ 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840,\n' +
'  /*   360 */ 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697,\n' +
'  /*   375 */ 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198,\n' +
'  /*   390 */ 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237,\n' +
'  /*   405 */ 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624,\n' +
'  /*   420 */ 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818,\n' +
'  /*   435 */ 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172,\n' +
'  /*   450 */ 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759,\n' +
'  /*   465 */ 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611,\n' +
'  /*   480 */ 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   495 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   510 */ 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502, 25502, 25502, 35938, 47044, 20797,\n' +
'  /*   525 */ 20810, 20822, 20834, 50727, 22454, 20857, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 20661, 25502,\n' +
'  /*   540 */ 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 25530, 20887, 20314, 47265, 24983,\n' +
'  /*   555 */ 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537,\n' +
'  /*   570 */ 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502,\n' +
'  /*   585 */ 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765,\n' +
'  /*   600 */ 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910,\n' +
'  /*   615 */ 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684,\n' +
'  /*   630 */ 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174,\n' +
'  /*   645 */ 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627,\n' +
'  /*   660 */ 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186,\n' +
'  /*   675 */ 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560,\n' +
'  /*   690 */ 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134,\n' +
'  /*   705 */ 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431,\n' +
'  /*   720 */ 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578,\n' +
'  /*   735 */ 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   750 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*   765 */ 25502, 25502, 25502, 21475, 20923, 25502, 25502, 25502, 21059, 25502, 25502, 39957, 21182, 20942, 25502,\n' +
'  /*   780 */ 25502, 25502, 25502, 25502, 20979, 21006, 21038, 25502, 25502, 25502, 26163, 25502, 25502, 21075, 25502,\n' +
'  /*   795 */ 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 21111, 20990, 47265,\n' +
'  /*   810 */ 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433,\n' +
'  /*   825 */ 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502,\n' +
'  /*   840 */ 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207,\n' +
'  /*   855 */ 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502,\n' +
'  /*   870 */ 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827,\n' +
'  /*   885 */ 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137,\n' +
'  /*   900 */ 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531,\n' +
'  /*   915 */ 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670,\n' +
'  /*   930 */ 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948,\n' +
'  /*   945 */ 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473,\n' +
'  /*   960 */ 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415,\n' +
'  /*   975 */ 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424,\n' +
'  /*   990 */ 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1005 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1020 */ 25502, 25502, 25502, 25502, 21127, 21208, 25502, 25502, 25502, 43924, 25502, 25502, 50783, 25502, 35938,\n' +
'  /*  1035 */ 28037, 21243, 21176, 21167, 21198, 21229, 45434, 20857, 25502, 25502, 25502, 26163, 21259, 25502, 21276,\n' +
'  /*  1050 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295, 21305,\n' +
'  /*  1065 */ 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410,\n' +
'  /*  1080 */ 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517,\n' +
'  /*  1095 */ 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 21341, 18708, 20726, 18728, 18746, 18447, 25563,\n' +
'  /*  1110 */ 24207, 18765, 20148, 18279, 24324, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791,\n' +
'  /*  1125 */ 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961,\n' +
'  /*  1140 */ 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113,\n' +
'  /*  1155 */ 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403,\n' +
'  /*  1170 */ 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648,\n' +
'  /*  1185 */ 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925,\n' +
'  /*  1200 */ 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102,\n' +
'  /*  1215 */ 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399,\n' +
'  /*  1230 */ 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451,\n' +
'  /*  1245 */ 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1260 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1275 */ 25502, 25502, 25502, 25502, 25502, 21019, 38627, 25502, 25502, 25502, 26840, 38632, 25502, 49819, 25502,\n' +
'  /*  1290 */ 39481, 50856, 21357, 25502, 21364, 25502, 39470, 21380, 20857, 25502, 25502, 25502, 26163, 25502, 25502,\n' +
'  /*  1305 */ 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295,\n' +
'  /*  1320 */ 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402,\n' +
'  /*  1335 */ 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774,\n' +
'  /*  1350 */ 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447,\n' +
'  /*  1365 */ 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885,\n' +
'  /*  1380 */ 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078,\n' +
'  /*  1395 */ 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824,\n' +
'  /*  1410 */ 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361,\n' +
'  /*  1425 */ 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626,\n' +
'  /*  1440 */ 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904,\n' +
'  /*  1455 */ 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064,\n' +
'  /*  1470 */ 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203,\n' +
'  /*  1485 */ 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547,\n' +
'  /*  1500 */ 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502,\n' +
'  /*  1515 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1530 */ 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 21409, 25502, 25502,\n' +
'  /*  1545 */ 25502, 45228, 25502, 25502, 21440, 25502, 25502, 21428, 21462, 20857, 25502, 25502, 25502, 26163, 25502,\n' +
'  /*  1560 */ 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414,\n' +
'  /*  1575 */ 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387,\n' +
'  /*  1590 */ 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502,\n' +
'  /*  1605 */ 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746,\n' +
'  /*  1620 */ 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502,\n' +
'  /*  1635 */ 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075,\n' +
'  /*  1650 */ 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289,\n' +
'  /*  1665 */ 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690,\n' +
'  /*  1680 */ 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604,\n' +
'  /*  1695 */ 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875,\n' +
'  /*  1710 */ 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197,\n' +
'  /*  1725 */ 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247,\n' +
'  /*  1740 */ 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270,\n' +
'  /*  1755 */ 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502,\n' +
'  /*  1770 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  1785 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502,\n' +
'  /*  1800 */ 25502, 25502, 36626, 25502, 25502, 25502, 25502, 25502, 25502, 19843, 21491, 25502, 25502, 25502, 26163,\n' +
'  /*  1815 */ 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712,\n' +
'  /*  1830 */ 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938,\n' +
'  /*  1845 */ 21528, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 25573, 18394, 45409, 18417, 18440, 20367, 18481,\n' +
'  /*  1860 */ 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728,\n' +
'  /*  1875 */ 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097,\n' +
'  /*  1890 */ 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057,\n' +
'  /*  1905 */ 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306,\n' +
'  /*  1920 */ 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331,\n' +
'  /*  1935 */ 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566,\n' +
'  /*  1950 */ 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859,\n' +
'  /*  1965 */ 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027,\n' +
'  /*  1980 */ 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383,\n' +
'  /*  1995 */ 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387,\n' +
'  /*  2010 */ 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502,\n' +
'  /*  2025 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  2040 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21585, 21553, 25502, 25502, 25502, 40766, 25502,\n' +
'  /*  2055 */ 25502, 48704, 21446, 18261, 25502, 25502, 25502, 25502, 25502, 18249, 21572, 21601, 25502, 25502, 25502,\n' +
'  /*  2070 */ 26163, 25502, 25502, 21638, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262,\n' +
'  /*  2085 */ 18712, 19414, 18295, 21654, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983,\n' +
'  /*  2100 */ 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367,\n' +
'  /*  2115 */ 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726,\n' +
'  /*  2130 */ 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749,\n' +
'  /*  2145 */ 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039,\n' +
'  /*  2160 */ 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091,\n' +
'  /*  2175 */ 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286,\n' +
'  /*  2190 */ 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264,\n' +
'  /*  2205 */ 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840,\n' +
'  /*  2220 */ 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011,\n' +
'  /*  2235 */ 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209,\n' +
'  /*  2250 */ 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070,\n' +
'  /*  2265 */ 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502,\n' +
'  /*  2280 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  2295 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21393, 21705, 21745, 21745, 21745, 21712,\n' +
'  /*  2310 */ 21740, 21745, 21750, 21825, 21690, 21775, 21806, 21819, 21728, 21766, 21791, 21841, 20857, 25502, 25502,\n' +
'  /*  2325 */ 25502, 30612, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277,\n' +
'  /*  2340 */ 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 21870, 25502, 23391, 25502, 51178, 49187, 18322,\n' +
'  /*  2355 */ 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440,\n' +
'  /*  2370 */ 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708,\n' +
'  /*  2385 */ 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449,\n' +
'  /*  2400 */ 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595,\n' +
'  /*  2415 */ 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597,\n' +
'  /*  2430 */ 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253,\n' +
'  /*  2445 */ 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543,\n' +
'  /*  2460 */ 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775,\n' +
'  /*  2475 */ 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995,\n' +
'  /*  2490 */ 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358,\n' +
'  /*  2505 */ 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515,\n' +
'  /*  2520 */ 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772,\n' +
'  /*  2535 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  2550 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 21918, 25502, 25502, 25502,\n' +
'  /*  2565 */ 27881, 39686, 25502, 40438, 39692, 35938, 21917, 25502, 21888, 21894, 21910, 21934, 21957, 21973, 25502,\n' +
'  /*  2580 */ 25502, 25502, 19158, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712,\n' +
'  /*  2595 */ 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25501, 25502, 23391, 25502, 51178, 49187,\n' +
'  /*  2610 */ 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417,\n' +
'  /*  2625 */ 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671,\n' +
'  /*  2640 */ 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712,\n' +
'  /*  2655 */ 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932,\n' +
'  /*  2670 */ 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073,\n' +
'  /*  2685 */ 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116,\n' +
'  /*  2700 */ 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220,\n' +
'  /*  2715 */ 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366,\n' +
'  /*  2730 */ 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966,\n' +
'  /*  2745 */ 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342,\n' +
'  /*  2760 */ 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712,\n' +
'  /*  2775 */ 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760,\n' +
'  /*  2790 */ 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  2805 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 45716, 25502, 25502,\n' +
'  /*  2820 */ 25502, 26460, 25502, 25502, 25502, 49942, 47370, 18824, 22054, 22040, 22057, 22025, 22010, 22073, 20857,\n' +
'  /*  2835 */ 25502, 25502, 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593,\n' +
'  /*  2850 */ 18712, 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178,\n' +
'  /*  2865 */ 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 18775, 18394, 45409,\n' +
'  /*  2880 */ 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606,\n' +
'  /*  2895 */ 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730,\n' +
'  /*  2910 */ 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938,\n' +
'  /*  2925 */ 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055,\n' +
'  /*  2940 */ 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235,\n' +
'  /*  2955 */ 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518,\n' +
'  /*  2970 */ 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654,\n' +
'  /*  2985 */ 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562,\n' +
'  /*  3000 */ 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301,\n' +
'  /*  3015 */ 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278,\n' +
'  /*  3030 */ 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744,\n' +
'  /*  3045 */ 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3060 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502,\n' +
'  /*  3075 */ 25502, 25502, 26460, 25502, 25502, 25502, 49962, 48732, 19588, 22115, 22134, 22115, 22148, 19587, 22118,\n' +
'  /*  3090 */ 20857, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3105 */ 50593, 18712, 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23371, 25502,\n' +
'  /*  3120 */ 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394,\n' +
'  /*  3135 */ 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009,\n' +
'  /*  3150 */ 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728,\n' +
'  /*  3165 */ 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916,\n' +
'  /*  3180 */ 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037,\n' +
'  /*  3195 */ 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625,\n' +
'  /*  3210 */ 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901,\n' +
'  /*  3225 */ 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632,\n' +
'  /*  3240 */ 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950,\n' +
'  /*  3255 */ 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232,\n' +
'  /*  3270 */ 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751,\n' +
'  /*  3285 */ 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714,\n' +
'  /*  3300 */ 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3315 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 22189,\n' +
'  /*  3330 */ 25502, 25502, 25502, 26460, 39752, 25502, 42092, 22185, 49056, 22171, 22205, 22210, 22210, 22226, 50877,\n' +
'  /*  3345 */ 46194, 20857, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3360 */ 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391,\n' +
'  /*  3375 */ 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698,\n' +
'  /*  3390 */ 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502,\n' +
'  /*  3405 */ 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710,\n' +
'  /*  3420 */ 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519,\n' +
'  /*  3435 */ 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593,\n' +
'  /*  3450 */ 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529,\n' +
'  /*  3465 */ 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477,\n' +
'  /*  3480 */ 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610,\n' +
'  /*  3495 */ 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244,\n' +
'  /*  3510 */ 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216,\n' +
'  /*  3525 */ 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489,\n' +
'  /*  3540 */ 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979,\n' +
'  /*  3555 */ 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3570 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 22249,\n' +
'  /*  3585 */ 25502, 25502, 25502, 25502, 26460, 25502, 25502, 25502, 25502, 35938, 31981, 22272, 22291, 22272, 22305,\n' +
'  /*  3600 */ 31980, 22275, 22328, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3615 */ 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 22893, 25502, 29430, 25502, 25502, 25500, 22371,\n' +
'  /*  3630 */ 23371, 29501, 25502, 25502, 25502, 25502, 25502, 22393, 46734, 28221, 28221, 22605, 27962, 30515, 30515,\n' +
'  /*  3645 */ 22647, 29597, 46164, 29597, 29597, 45887, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 18537, 19211,\n' +
'  /*  3660 */ 22413, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826,\n' +
'  /*  3675 */ 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 22430, 25502, 25502, 25502, 25502, 25502, 43212,\n' +
'  /*  3690 */ 24473, 25502, 25502, 22470, 22493, 28221, 28221, 28221, 28148, 47217, 30515, 30515, 30515, 35845, 22512,\n' +
'  /*  3705 */ 22537, 29597, 29597, 29597, 50531, 35014, 33327, 25502, 25502, 25502, 25502, 22155, 25502, 25502, 27229,\n' +
'  /*  3720 */ 28221, 50310, 28221, 28221, 22604, 30515, 22558, 30515, 30515, 29114, 29597, 22577, 29597, 29597, 48005,\n' +
'  /*  3735 */ 35018, 25502, 25502, 39655, 25502, 45050, 25502, 28219, 28221, 28221, 22598, 30515, 30515, 34090, 38335,\n' +
'  /*  3750 */ 29597, 29597, 46285, 30461, 33321, 22624, 25502, 18655, 25502, 46214, 50809, 28221, 22605, 22641, 30515,\n' +
'  /*  3765 */ 22820, 22663, 29597, 34694, 36851, 25502, 32047, 22684, 34284, 22703, 49417, 22722, 30515, 22749, 22774,\n' +
'  /*  3780 */ 28622, 31922, 49076, 50510, 28217, 22793, 33193, 22816, 31609, 35994, 49079, 22841, 36448, 33510, 22879,\n' +
'  /*  3795 */ 41265, 22922, 22941, 22959, 27227, 28224, 35061, 35372, 37727, 49594, 22977, 46213, 22607, 35370, 28245,\n' +
'  /*  3810 */ 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3825 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3840 */ 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502, 25502, 34410, 35938, 25502, 25502, 25502, 25502,\n' +
'  /*  3855 */ 25502, 50085, 23029, 23078, 25502, 25502, 25502, 26163, 25502, 25502, 23115, 25502, 25502, 25502, 25502,\n' +
'  /*  3870 */ 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 28417, 22893, 25502, 25502, 25502, 25502, 25500,\n' +
'  /*  3885 */ 25502, 23391, 25502, 25502, 25502, 25502, 25502, 25502, 22393, 28221, 28221, 28221, 22605, 30515, 30515,\n' +
'  /*  3900 */ 30515, 22647, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 18537,\n' +
'  /*  3915 */ 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515,\n' +
'  /*  3930 */ 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3945 */ 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845,\n' +
'  /*  3960 */ 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  3975 */ 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597, 29597,\n' +
'  /*  3990 */ 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515, 30515,\n' +
'  /*  4005 */ 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515,\n' +
'  /*  4020 */ 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823,\n' +
'  /*  4035 */ 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062,\n' +
'  /*  4050 */ 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370,\n' +
'  /*  4065 */ 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4080 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4095 */ 25502, 21019, 23141, 25502, 25502, 25502, 39439, 25502, 25502, 25502, 25502, 35938, 29178, 23161, 23182,\n' +
'  /*  4110 */ 29183, 23204, 29178, 23166, 20857, 25502, 25502, 25502, 26163, 25502, 25502, 51469, 37071, 25502, 50937,\n' +
'  /*  4125 */ 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882,\n' +
'  /*  4140 */ 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297,\n' +
'  /*  4155 */ 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229,\n' +
'  /*  4170 */ 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148,\n' +
'  /*  4185 */ 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840,\n' +
'  /*  4200 */ 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697,\n' +
'  /*  4215 */ 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198,\n' +
'  /*  4230 */ 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237,\n' +
'  /*  4245 */ 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624,\n' +
'  /*  4260 */ 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818,\n' +
'  /*  4275 */ 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172,\n' +
'  /*  4290 */ 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759,\n' +
'  /*  4305 */ 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611,\n' +
'  /*  4320 */ 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4335 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4350 */ 25502, 25502, 21019, 23227, 25502, 25502, 25502, 26460, 25502, 25502, 25502, 25912, 35938, 25502, 25502,\n' +
'  /*  4365 */ 25502, 25502, 25502, 38673, 23244, 23278, 25502, 25502, 25502, 26163, 25502, 25502, 23315, 25502, 25502,\n' +
'  /*  4380 */ 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 32253, 22893, 25502, 25502, 25502,\n' +
'  /*  4395 */ 25502, 25500, 25502, 25306, 25502, 25502, 25502, 25502, 25502, 25502, 22393, 28221, 28221, 28221, 22605,\n' +
'  /*  4410 */ 30515, 30515, 30515, 22647, 29597, 29597, 29597, 29597, 32310, 48345, 23336, 25502, 25502, 25502, 25502,\n' +
'  /*  4425 */ 25502, 23361, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515,\n' +
'  /*  4440 */ 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 36236, 23425, 25502, 25502, 25502, 25502,\n' +
'  /*  4455 */ 25502, 30938, 25502, 25502, 25502, 38059, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515,\n' +
'  /*  4470 */ 30515, 32454, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4485 */ 25502, 25502, 39898, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 23486, 29597, 29597,\n' +
'  /*  4500 */ 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515,\n' +
'  /*  4515 */ 30515, 30515, 38486, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221,\n' +
'  /*  4530 */ 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515,\n' +
'  /*  4545 */ 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215,\n' +
'  /*  4560 */ 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213,\n' +
'  /*  4575 */ 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4590 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4605 */ 25502, 25502, 25502, 21019, 22377, 25502, 25502, 25502, 28749, 26891, 25502, 25502, 23526, 35938, 24270,\n' +
'  /*  4620 */ 48358, 23567, 23573, 23589, 25503, 47312, 23612, 25502, 25502, 25502, 36382, 23628, 25502, 51469, 25502,\n' +
'  /*  4635 */ 25502, 25502, 25502, 25502, 25502, 25502, 50706, 23864, 24889, 19307, 23882, 24758, 23645, 20314, 47265,\n' +
'  /*  4650 */ 24983, 26882, 23672, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 23690, 23927, 23715, 23744,\n' +
'  /*  4665 */ 23699, 19297, 18465, 24354, 24537, 23773, 24944, 23789, 24147, 24184, 23834, 25502, 47774, 18517, 25502,\n' +
'  /*  4680 */ 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 25099, 24796, 24639, 23862, 25106, 24314, 24207,\n' +
'  /*  4695 */ 18765, 20148, 18279, 19461, 23880, 24933, 23899, 23882, 23809, 23818, 24241, 25502, 42885, 18791, 26502,\n' +
'  /*  4710 */ 44910, 18840, 18864, 25502, 44519, 18916, 18938, 23915, 25137, 23943, 23959, 23983, 24529, 18961, 24827,\n' +
'  /*  4725 */ 19684, 19697, 18987, 24012, 46827, 24042, 24058, 24426, 24155, 24235, 23656, 21289, 48824, 19113, 19137,\n' +
'  /*  4740 */ 19174, 19198, 22906, 46802, 23996, 24770, 24083, 23728, 24111, 19286, 19331, 20690, 19361, 24136, 24171,\n' +
'  /*  4755 */ 24026, 23799, 24920, 24223, 24257, 43901, 19518, 48220, 19543, 43264, 19566, 24304, 24609, 25039, 24340,\n' +
'  /*  4770 */ 20186, 20624, 19725, 24370, 24398, 24712, 24442, 24563, 24458, 19840, 19859, 19875, 44904, 24495, 24517,\n' +
'  /*  4785 */ 25149, 24095, 19376, 25178, 19345, 24553, 24412, 24669, 24579, 20011, 20027, 30197, 24595, 24625, 23757,\n' +
'  /*  4800 */ 20134, 20172, 24655, 24698, 24382, 24728, 20301, 20342, 24786, 24812, 20383, 24743, 24067, 24858, 20415,\n' +
'  /*  4815 */ 24874, 23967, 24906, 24960, 24999, 24501, 24890, 23883, 25025, 25055, 19709, 19315, 25086, 24197, 24842,\n' +
'  /*  4830 */ 25122, 25165, 25194, 25231, 24682, 46815, 25260, 25276, 25288, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4845 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  4860 */ 25502, 25502, 25502, 25502, 21019, 49982, 25502, 25502, 25502, 26460, 25327, 25502, 25502, 25322, 49287,\n' +
'  /*  4875 */ 25343, 25351, 25351, 25351, 25367, 51021, 48201, 20857, 25502, 25502, 25502, 26163, 25502, 25502, 51469,\n' +
'  /*  4890 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 18295, 20314,\n' +
'  /*  4905 */ 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402, 18410,\n' +
'  /*  4920 */ 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774, 18517,\n' +
'  /*  4935 */ 25502, 25502, 43229, 25390, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447, 25563,\n' +
'  /*  4950 */ 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 25428, 25444, 25456, 18791,\n' +
'  /*  4965 */ 26502, 44910, 18840, 25478, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078, 18961,\n' +
'  /*  4980 */ 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 20262, 21289, 48824, 19113,\n' +
'  /*  4995 */ 19137, 19174, 19198, 22906, 47805, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361, 25519,\n' +
'  /*  5010 */ 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 25589, 19626, 19648,\n' +
'  /*  5025 */ 19670, 20186, 20624, 19725, 25613, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904, 19925,\n' +
'  /*  5040 */ 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064, 20102,\n' +
'  /*  5055 */ 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203, 20399,\n' +
'  /*  5070 */ 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547, 19451,\n' +
'  /*  5085 */ 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  5100 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  5115 */ 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502, 25502, 25502,\n' +
'  /*  5130 */ 46066, 28713, 25643, 25643, 25643, 25652, 51502, 25675, 20857, 25502, 25502, 25502, 26163, 25502, 25502,\n' +
'  /*  5145 */ 51469, 25502, 25502, 50057, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414, 25709,\n' +
'  /*  5160 */ 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387, 45402,\n' +
'  /*  5175 */ 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502, 47774,\n' +
'  /*  5190 */ 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746, 18447,\n' +
'  /*  5205 */ 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502, 42885,\n' +
'  /*  5220 */ 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075, 20078,\n' +
'  /*  5235 */ 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289, 48824,\n' +
'  /*  5250 */ 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690, 19361,\n' +
'  /*  5265 */ 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604, 19626,\n' +
'  /*  5280 */ 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875, 44904,\n' +
'  /*  5295 */ 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197, 20064,\n' +
'  /*  5310 */ 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247, 51203,\n' +
'  /*  5325 */ 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270, 20547,\n' +
'  /*  5340 */ 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502, 25502,\n' +
'  /*  5355 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  5370 */ 25502, 25502, 25502, 25502, 25502, 25502, 23042, 42425, 25502, 25502, 25502, 26460, 25502, 25502, 25502,\n' +
'  /*  5385 */ 25502, 35938, 20907, 25737, 25737, 25737, 25746, 51042, 50150, 20857, 25769, 25502, 25502, 26163, 25502,\n' +
'  /*  5400 */ 25502, 51469, 25502, 25502, 42351, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712, 19414,\n' +
'  /*  5415 */ 25786, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 18387,\n' +
'  /*  5430 */ 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481, 25502,\n' +
'  /*  5445 */ 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746,\n' +
'  /*  5460 */ 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502,\n' +
'  /*  5475 */ 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075,\n' +
'  /*  5490 */ 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289,\n' +
'  /*  5505 */ 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690,\n' +
'  /*  5520 */ 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604,\n' +
'  /*  5535 */ 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875,\n' +
'  /*  5550 */ 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197,\n' +
'  /*  5565 */ 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247,\n' +
'  /*  5580 */ 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270,\n' +
'  /*  5595 */ 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502,\n' +
'  /*  5610 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  5625 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 22086, 22095, 25502, 25502, 25502, 33480, 25502, 25502,\n' +
'  /*  5640 */ 25502, 25502, 35938, 46956, 25822, 25822, 25822, 25831, 51112, 50556, 25854, 25502, 25502, 25502, 26163,\n' +
'  /*  5655 */ 25502, 25502, 51469, 25502, 25502, 43718, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712,\n' +
'  /*  5670 */ 19414, 25891, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938,\n' +
'  /*  5685 */ 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481,\n' +
'  /*  5700 */ 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728,\n' +
'  /*  5715 */ 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097,\n' +
'  /*  5730 */ 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057,\n' +
'  /*  5745 */ 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306,\n' +
'  /*  5760 */ 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331,\n' +
'  /*  5775 */ 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566,\n' +
'  /*  5790 */ 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859,\n' +
'  /*  5805 */ 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027,\n' +
'  /*  5820 */ 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383,\n' +
'  /*  5835 */ 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 25928, 19751, 18278, 18712, 20515, 25070, 19387,\n' +
'  /*  5850 */ 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502,\n' +
'  /*  5865 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  5880 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25994, 25502, 25502, 25502, 25502, 26460, 27090,\n' +
'  /*  5895 */ 25502, 25502, 50390, 49799, 25502, 25502, 25502, 27094, 25963, 25502, 25981, 20857, 25502, 25502, 25502,\n' +
'  /*  5910 */ 26163, 25502, 25502, 51469, 21622, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262,\n' +
'  /*  5925 */ 18712, 25552, 26010, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983,\n' +
'  /*  5940 */ 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367,\n' +
'  /*  5955 */ 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726,\n' +
'  /*  5970 */ 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749,\n' +
'  /*  5985 */ 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039,\n' +
'  /*  6000 */ 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091,\n' +
'  /*  6015 */ 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286,\n' +
'  /*  6030 */ 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264,\n' +
'  /*  6045 */ 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840,\n' +
'  /*  6060 */ 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011,\n' +
'  /*  6075 */ 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209,\n' +
'  /*  6090 */ 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070,\n' +
'  /*  6105 */ 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502,\n' +
'  /*  6120 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6135 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460,\n' +
'  /*  6150 */ 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 25502, 45152, 26046, 20857, 25502, 25502,\n' +
'  /*  6165 */ 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277,\n' +
'  /*  6180 */ 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322,\n' +
'  /*  6195 */ 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440,\n' +
'  /*  6210 */ 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708,\n' +
'  /*  6225 */ 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449,\n' +
'  /*  6240 */ 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595,\n' +
'  /*  6255 */ 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597,\n' +
'  /*  6270 */ 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253,\n' +
'  /*  6285 */ 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543,\n' +
'  /*  6300 */ 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775,\n' +
'  /*  6315 */ 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995,\n' +
'  /*  6330 */ 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358,\n' +
'  /*  6345 */ 51209, 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515,\n' +
'  /*  6360 */ 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772,\n' +
'  /*  6375 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6390 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502,\n' +
'  /*  6405 */ 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502,\n' +
'  /*  6420 */ 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221,\n' +
'  /*  6435 */ 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6450 */ 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597,\n' +
'  /*  6465 */ 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939, 25502, 25502, 25502, 25502, 37356,\n' +
'  /*  6480 */ 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597,\n' +
'  /*  6495 */ 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 25502, 25502, 25502, 25502, 28220,\n' +
'  /*  6510 */ 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597,\n' +
'  /*  6525 */ 22961, 35014, 23462, 25502, 25502, 25502, 25502, 26157, 25502, 25502, 27719, 28221, 28221, 28221, 28221,\n' +
'  /*  6540 */ 22604, 30515, 30515, 30515, 30515, 32517, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502,\n' +
'  /*  6555 */ 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486, 29597, 29597, 29597, 30461,\n' +
'  /*  6570 */ 33321, 25502, 25502, 30824, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694,\n' +
'  /*  6585 */ 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502,\n' +
'  /*  6600 */ 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598,\n' +
'  /*  6615 */ 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906,\n' +
'  /*  6630 */ 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6645 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502,\n' +
'  /*  6660 */ 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092,\n' +
'  /*  6675 */ 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229,\n' +
'  /*  6690 */ 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502,\n' +
'  /*  6705 */ 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597,\n' +
'  /*  6720 */ 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939, 25502, 25502, 25502, 25502,\n' +
'  /*  6735 */ 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597,\n' +
'  /*  6750 */ 29597, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 25502, 25502, 25502, 25502,\n' +
'  /*  6765 */ 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597,\n' +
'  /*  6780 */ 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27719, 28221, 28221, 28221,\n' +
'  /*  6795 */ 28221, 22604, 30515, 30515, 30515, 30515, 32517, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502,\n' +
'  /*  6810 */ 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486, 29597, 29597, 29597,\n' +
'  /*  6825 */ 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597,\n' +
'  /*  6840 */ 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076,\n' +
'  /*  6855 */ 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844,\n' +
'  /*  6870 */ 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352,\n' +
'  /*  6885 */ 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6900 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502,\n' +
'  /*  6915 */ 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666,\n' +
'  /*  6930 */ 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  6945 */ 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502,\n' +
'  /*  6960 */ 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597,\n' +
'  /*  6975 */ 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939, 27915, 25502, 25502,\n' +
'  /*  6990 */ 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597,\n' +
'  /*  7005 */ 29597, 29597, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 25502, 25502, 25502,\n' +
'  /*  7020 */ 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597,\n' +
'  /*  7035 */ 29597, 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27719, 28221, 28221,\n' +
'  /*  7050 */ 28221, 28221, 22604, 30515, 30515, 30515, 30515, 32517, 29597, 29597, 29597, 29597, 48005, 35018, 25502,\n' +
'  /*  7065 */ 25502, 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486, 29597, 29597,\n' +
'  /*  7080 */ 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597,\n' +
'  /*  7095 */ 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922,\n' +
'  /*  7110 */ 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219,\n' +
'  /*  7125 */ 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650,\n' +
'  /*  7140 */ 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7155 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502,\n' +
'  /*  7170 */ 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062,\n' +
'  /*  7185 */ 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7200 */ 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502,\n' +
'  /*  7215 */ 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820,\n' +
'  /*  7230 */ 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939, 25502, 25502,\n' +
'  /*  7245 */ 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597,\n' +
'  /*  7260 */ 29597, 29597, 29597, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 26179, 25502,\n' +
'  /*  7275 */ 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597,\n' +
'  /*  7290 */ 29597, 29597, 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27719, 28221,\n' +
'  /*  7305 */ 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 32517, 29597, 29597, 29597, 29597, 48005, 35018,\n' +
'  /*  7320 */ 25502, 25502, 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486, 29597,\n' +
'  /*  7335 */ 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820,\n' +
'  /*  7350 */ 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622,\n' +
'  /*  7365 */ 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265,\n' +
'  /*  7380 */ 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503,\n' +
'  /*  7395 */ 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7410 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257,\n' +
'  /*  7425 */ 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551,\n' +
'  /*  7440 */ 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 27928, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7455 */ 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500, 25502,\n' +
'  /*  7470 */ 27924, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515,\n' +
'  /*  7485 */ 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939, 25502,\n' +
'  /*  7500 */ 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826,\n' +
'  /*  7515 */ 29597, 29597, 29597, 29597, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 25502,\n' +
'  /*  7530 */ 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121,\n' +
'  /*  7545 */ 29597, 29597, 29597, 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27719,\n' +
'  /*  7560 */ 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 32517, 29597, 29597, 29597, 29597, 48005,\n' +
'  /*  7575 */ 35018, 25502, 25502, 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486,\n' +
'  /*  7590 */ 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515,\n' +
'  /*  7605 */ 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597,\n' +
'  /*  7620 */ 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777,\n' +
'  /*  7635 */ 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245,\n' +
'  /*  7650 */ 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7665 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7680 */ 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502,\n' +
'  /*  7695 */ 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7710 */ 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502, 25502, 25500,\n' +
'  /*  7725 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515,\n' +
'  /*  7740 */ 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7755 */ 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515,\n' +
'  /*  7770 */ 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7785 */ 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845,\n' +
'  /*  7800 */ 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7815 */ 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597, 29597,\n' +
'  /*  7830 */ 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515, 30515,\n' +
'  /*  7845 */ 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515,\n' +
'  /*  7860 */ 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823,\n' +
'  /*  7875 */ 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062,\n' +
'  /*  7890 */ 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370,\n' +
'  /*  7905 */ 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7920 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7935 */ 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502,\n' +
'  /*  7950 */ 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  7965 */ 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 45273, 25502, 25502, 25502, 25502,\n' +
'  /*  7980 */ 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515,\n' +
'  /*  7995 */ 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8010 */ 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515,\n' +
'  /*  8025 */ 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8040 */ 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515,\n' +
'  /*  8055 */ 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8070 */ 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597,\n' +
'  /*  8085 */ 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515,\n' +
'  /*  8100 */ 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605,\n' +
'  /*  8115 */ 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515,\n' +
'  /*  8130 */ 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603,\n' +
'  /*  8145 */ 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607,\n' +
'  /*  8160 */ 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8175 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8190 */ 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502,\n' +
'  /*  8205 */ 25502, 25502, 41551, 26062, 44666, 26199, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8220 */ 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502, 25502,\n' +
'  /*  8235 */ 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605,\n' +
'  /*  8250 */ 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8265 */ 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515,\n' +
'  /*  8280 */ 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8295 */ 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515,\n' +
'  /*  8310 */ 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8325 */ 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597,\n' +
'  /*  8340 */ 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515,\n' +
'  /*  8355 */ 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221,\n' +
'  /*  8370 */ 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515,\n' +
'  /*  8385 */ 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215,\n' +
'  /*  8400 */ 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213,\n' +
'  /*  8415 */ 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8430 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8445 */ 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 49318,\n' +
'  /*  8460 */ 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502,\n' +
'  /*  8475 */ 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502, 25502,\n' +
'  /*  8490 */ 25502, 25502, 25500, 25502, 25502, 35742, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221,\n' +
'  /*  8505 */ 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502,\n' +
'  /*  8520 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515,\n' +
'  /*  8535 */ 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502,\n' +
'  /*  8550 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515,\n' +
'  /*  8565 */ 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502,\n' +
'  /*  8580 */ 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597,\n' +
'  /*  8595 */ 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223,\n' +
'  /*  8610 */ 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221,\n' +
'  /*  8625 */ 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601,\n' +
'  /*  8640 */ 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079,\n' +
'  /*  8655 */ 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825,\n' +
'  /*  8670 */ 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8685 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8700 */ 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938,\n' +
'  /*  8715 */ 25502, 25502, 25502, 25502, 43192, 26240, 26256, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502,\n' +
'  /*  8730 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502,\n' +
'  /*  8745 */ 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 28221,\n' +
'  /*  8760 */ 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502,\n' +
'  /*  8775 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606,\n' +
'  /*  8790 */ 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502,\n' +
'  /*  8805 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515,\n' +
'  /*  8820 */ 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502,\n' +
'  /*  8835 */ 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114,\n' +
'  /*  8850 */ 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221,\n' +
'  /*  8865 */ 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214,\n' +
'  /*  8880 */ 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221,\n' +
'  /*  8895 */ 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994,\n' +
'  /*  8910 */ 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608,\n' +
'  /*  8925 */ 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8940 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  8955 */ 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502,\n' +
'  /*  8970 */ 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502,\n' +
'  /*  8985 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766,\n' +
'  /*  9000 */ 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221,\n' +
'  /*  9015 */ 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502,\n' +
'  /*  9030 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221,\n' +
'  /*  9045 */ 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502,\n' +
'  /*  9060 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604,\n' +
'  /*  9075 */ 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502,\n' +
'  /*  9090 */ 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515,\n' +
'  /*  9105 */ 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 29728, 25502, 25502, 28219, 28221,\n' +
'  /*  9120 */ 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502,\n' +
'  /*  9135 */ 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218,\n' +
'  /*  9150 */ 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597,\n' +
'  /*  9165 */ 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215,\n' +
'  /*  9180 */ 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502,\n' +
'  /*  9195 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  9210 */ 25502, 25502, 25502, 25502, 25502, 25502, 25688, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502,\n' +
'  /*  9225 */ 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502,\n' +
'  /*  9240 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898,\n' +
'  /*  9255 */ 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122,\n' +
'  /*  9270 */ 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502,\n' +
'  /*  9285 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221,\n' +
'  /*  9300 */ 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502,\n' +
'  /*  9315 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221,\n' +
'  /*  9330 */ 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502,\n' +
'  /*  9345 */ 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515,\n' +
'  /*  9360 */ 30515, 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219,\n' +
'  /*  9375 */ 28221, 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502,\n' +
'  /*  9390 */ 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502,\n' +
'  /*  9405 */ 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063,\n' +
'  /*  9420 */ 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372,\n' +
'  /*  9435 */ 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502,\n' +
'  /*  9450 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  9465 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502,\n' +
'  /*  9480 */ 25502, 25502, 35938, 48244, 26272, 26291, 26313, 26325, 48246, 26275, 20857, 25502, 25502, 25502, 26163,\n' +
'  /*  9495 */ 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262, 18712,\n' +
'  /*  9510 */ 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 30290, 51178, 49187, 18322, 29983, 25938,\n' +
'  /*  9525 */ 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481,\n' +
'  /*  9540 */ 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728,\n' +
'  /*  9555 */ 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097,\n' +
'  /*  9570 */ 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057,\n' +
'  /*  9585 */ 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306,\n' +
'  /*  9600 */ 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331,\n' +
'  /*  9615 */ 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566,\n' +
'  /*  9630 */ 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859,\n' +
'  /*  9645 */ 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 26348,\n' +
'  /*  9660 */ 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383,\n' +
'  /*  9675 */ 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387,\n' +
'  /*  9690 */ 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502,\n' +
'  /*  9705 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  9720 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502,\n' +
'  /*  9735 */ 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 25502, 25502, 19843, 20857, 25502, 25502, 25502,\n' +
'  /*  9750 */ 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277, 19262,\n' +
'  /*  9765 */ 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983,\n' +
'  /*  9780 */ 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367,\n' +
'  /*  9795 */ 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726,\n' +
'  /*  9810 */ 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749,\n' +
'  /*  9825 */ 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039,\n' +
'  /*  9840 */ 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091,\n' +
'  /*  9855 */ 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286,\n' +
'  /*  9870 */ 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264,\n' +
'  /*  9885 */ 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840,\n' +
'  /*  9900 */ 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011,\n' +
'  /*  9915 */ 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209,\n' +
'  /*  9930 */ 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070,\n' +
'  /*  9945 */ 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502,\n' +
'  /*  9960 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /*  9975 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460,\n' +
'  /*  9990 */ 25502, 25502, 25502, 25502, 35938, 28974, 25502, 26379, 26385, 26401, 25502, 26424, 20857, 25502, 25502,\n' +
'  /* 10005 */ 25502, 26163, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712, 18277,\n' +
'  /* 10020 */ 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322,\n' +
'  /* 10035 */ 29983, 25938, 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440,\n' +
'  /* 10050 */ 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708,\n' +
'  /* 10065 */ 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449,\n' +
'  /* 10080 */ 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595,\n' +
'  /* 10095 */ 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597,\n' +
'  /* 10110 */ 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253,\n' +
'  /* 10125 */ 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543,\n' +
'  /* 10140 */ 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775,\n' +
'  /* 10155 */ 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995,\n' +
'  /* 10170 */ 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 26440, 20342, 20358,\n' +
'  /* 10185 */ 51209, 20383, 20247, 51203, 20399, 26476, 20431, 19759, 20459, 20443, 26492, 19751, 18278, 18712, 20515,\n' +
'  /* 10200 */ 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772,\n' +
'  /* 10215 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 10230 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 21872, 25502, 25502, 25502,\n' +
'  /* 10245 */ 36984, 26518, 26549, 23674, 26534, 26566, 25403, 25412, 26618, 26632, 26644, 26660, 26676, 26092, 26692,\n' +
'  /* 10260 */ 25502, 26716, 38968, 26939, 30262, 26733, 26771, 26820, 26856, 27136, 26872, 26907, 26928, 26963, 26979,\n' +
'  /* 10275 */ 26995, 27011, 27040, 26076, 27076, 27110, 25502, 25502, 25502, 45553, 25502, 27132, 30832, 19013, 30498,\n' +
'  /* 10290 */ 25502, 25215, 25502, 27152, 28221, 28221, 30054, 22605, 30515, 30515, 44359, 36820, 29597, 29597, 29597,\n' +
'  /* 10305 */ 27172, 32231, 36039, 25502, 26700, 25502, 27191, 33744, 19152, 30939, 27208, 42344, 25502, 27225, 27245,\n' +
'  /* 10320 */ 36731, 37265, 28221, 28555, 47424, 41921, 44038, 30515, 30515, 27261, 27304, 42307, 27348, 29597, 43398,\n' +
'  /* 10335 */ 32941, 27366, 38257, 26142, 28302, 25502, 39594, 20957, 36697, 27382, 25502, 25502, 27417, 45591, 37410,\n' +
'  /* 10350 */ 40992, 50626, 38412, 28221, 27449, 27471, 30515, 27519, 27538, 47459, 32524, 27558, 49560, 39273, 29597,\n' +
'  /* 10365 */ 27582, 27604, 27624, 27651, 27672, 25502, 33626, 19580, 27707, 25502, 27719, 49695, 28221, 28221, 49412,\n' +
'  /* 10380 */ 27743, 50037, 30515, 30515, 27759, 32517, 27809, 29597, 29597, 27845, 48005, 35018, 27861, 43699, 33699,\n' +
'  /* 10395 */ 25502, 27897, 45329, 27944, 31292, 43021, 28223, 32202, 38479, 27960, 38486, 35984, 27978, 29597, 30461,\n' +
'  /* 10410 */ 27994, 36328, 25502, 25502, 25659, 46214, 32973, 32806, 22605, 32845, 34899, 22820, 44153, 43769, 34694,\n' +
'  /* 10425 */ 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502,\n' +
'  /* 10440 */ 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 28016, 28053, 28075, 28096,\n' +
'  /* 10455 */ 28117, 28143, 28164, 28186, 28214, 22608, 22825, 28240, 22607, 35370, 28245, 27503, 32650, 31352, 33906,\n' +
'  /* 10470 */ 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 10485 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 28265, 25502,\n' +
'  /* 10500 */ 25502, 36984, 25502, 25502, 25502, 25502, 40226, 28284, 25502, 28336, 28342, 28358, 28374, 28390, 26092,\n' +
'  /* 10515 */ 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 28786, 25502, 25502, 25502, 25502, 25502, 27229,\n' +
'  /* 10530 */ 28221, 35843, 30434, 29597, 28406, 29766, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502,\n' +
'  /* 10545 */ 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597,\n' +
'  /* 10560 */ 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 19021, 30939, 41509, 25502, 41508, 25502,\n' +
'  /* 10575 */ 37356, 28221, 28221, 28221, 28221, 42582, 22606, 30515, 30515, 30515, 46026, 28444, 29597, 29597, 29597,\n' +
'  /* 10590 */ 29597, 28481, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938, 25502, 25502, 25502, 25502,\n' +
'  /* 10605 */ 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597,\n' +
'  /* 10620 */ 29597, 22961, 35014, 23462, 25502, 37838, 25502, 25502, 25502, 28506, 28527, 27719, 28549, 28221, 28221,\n' +
'  /* 10635 */ 28221, 28571, 28600, 30515, 30515, 44854, 32882, 28618, 29597, 29597, 29597, 28638, 35018, 25502, 25502,\n' +
'  /* 10650 */ 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515, 38486, 29597, 29597, 29597,\n' +
'  /* 10665 */ 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597,\n' +
'  /* 10680 */ 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076,\n' +
'  /* 10695 */ 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844,\n' +
'  /* 10710 */ 29598, 49643, 32118, 28666, 28693, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352,\n' +
'  /* 10725 */ 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 10740 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 28729,\n' +
'  /* 10755 */ 25502, 25502, 36984, 25502, 28765, 25502, 28783, 47009, 28802, 28811, 28827, 28842, 28854, 28870, 28886,\n' +
'  /* 10770 */ 26092, 25502, 25502, 29953, 27116, 25502, 31412, 25502, 25502, 22414, 25502, 25502, 25502, 19182, 25502,\n' +
'  /* 10785 */ 28902, 22397, 35843, 28927, 38720, 27332, 28951, 25502, 31973, 25502, 25502, 29008, 23228, 25502, 25770,\n' +
'  /* 10800 */ 26550, 37064, 29032, 27209, 26717, 29053, 29077, 28221, 28221, 34293, 29102, 30515, 30515, 41956, 29140,\n' +
'  /* 10815 */ 29199, 29597, 29597, 32310, 36039, 29218, 29217, 25502, 33210, 25502, 39015, 30939, 25502, 29234, 29264,\n' +
'  /* 10830 */ 25502, 37356, 39796, 33950, 37332, 45822, 28221, 22606, 29283, 48078, 32177, 30515, 40826, 28935, 29311,\n' +
'  /* 10845 */ 29331, 27785, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 29351, 25502, 22992, 25502, 36051, 25502,\n' +
'  /* 10860 */ 25502, 28220, 28221, 28221, 28221, 36498, 22604, 30515, 30515, 30515, 38148, 35845, 29121, 29597, 29597,\n' +
'  /* 10875 */ 29597, 36194, 44423, 29368, 29390, 25502, 25502, 25502, 25798, 25502, 29427, 25502, 27719, 28221, 28221,\n' +
'  /* 10890 */ 28221, 29446, 22604, 30515, 30515, 28080, 30515, 32517, 29597, 29597, 40895, 29597, 48005, 35018, 25502,\n' +
'  /* 10905 */ 25502, 18501, 25502, 25502, 29463, 23509, 28221, 29479, 28223, 30515, 29580, 30515, 38486, 29597, 41992,\n' +
'  /* 10920 */ 29597, 30461, 39937, 29496, 25502, 25502, 40110, 29517, 29538, 31286, 22605, 29557, 29575, 22820, 29596,\n' +
'  /* 10935 */ 29614, 34694, 33327, 25502, 42370, 25502, 28218, 28221, 42593, 30515, 48298, 22823, 29597, 40876, 31922,\n' +
'  /* 10950 */ 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219,\n' +
'  /* 10965 */ 35844, 29598, 29634, 29650, 29700, 29716, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650,\n' +
'  /* 10980 */ 33072, 29752, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 10995 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502,\n' +
'  /* 11010 */ 21022, 25502, 25502, 36984, 25502, 29816, 21512, 25502, 40054, 29835, 29844, 29860, 29874, 29883, 29899,\n' +
'  /* 11025 */ 29915, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 45962, 45960, 25502,\n' +
'  /* 11040 */ 31387, 31394, 34047, 27455, 30434, 29931, 45898, 29766, 25502, 26912, 49173, 25502, 25500, 33124, 25502,\n' +
'  /* 11055 */ 29949, 25502, 43537, 37529, 29969, 30013, 30047, 40506, 46715, 30070, 30087, 41033, 49722, 30113, 30133,\n' +
'  /* 11070 */ 34228, 34172, 30149, 50762, 32310, 36039, 25502, 25502, 25502, 35041, 25502, 27906, 30939, 25502, 25502,\n' +
'  /* 11085 */ 25502, 25502, 30175, 28221, 28221, 28221, 28221, 30213, 22606, 30515, 30515, 30515, 48481, 40826, 29597,\n' +
'  /* 11100 */ 29597, 29597, 29597, 30232, 48007, 30249, 26142, 30285, 25502, 25502, 21087, 30636, 30938, 25502, 25502,\n' +
'  /* 11115 */ 25502, 30306, 30325, 29541, 28221, 28221, 34152, 30368, 30384, 30405, 30515, 30515, 30426, 50979, 50916,\n' +
'  /* 11130 */ 29597, 29597, 29597, 30458, 35014, 23462, 25502, 25502, 25502, 25502, 42388, 40421, 25502, 28198, 28221,\n' +
'  /* 11145 */ 28221, 32416, 28221, 22800, 30515, 30515, 34766, 30515, 34256, 29597, 29597, 51000, 29597, 48005, 30477,\n' +
'  /* 11160 */ 25502, 30495, 21615, 25502, 44780, 25502, 23509, 46729, 48435, 28223, 30515, 30514, 30532, 38486, 40914,\n' +
'  /* 11175 */ 29597, 30560, 30461, 33321, 45746, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820,\n' +
'  /* 11190 */ 29597, 29597, 34694, 33327, 46515, 25502, 25502, 28218, 28221, 44006, 30515, 22943, 22823, 29597, 31108,\n' +
'  /* 11205 */ 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 34116, 49079, 46215, 22603, 35062, 22777, 48668,\n' +
'  /* 11220 */ 31451, 34758, 44659, 26408, 49585, 34639, 43800, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503,\n' +
'  /* 11235 */ 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11250 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257,\n' +
'  /* 11265 */ 25502, 21260, 30586, 25502, 36984, 20963, 30605, 25502, 30628, 30765, 30652, 30661, 30677, 30691, 30703,\n' +
'  /* 11280 */ 30719, 30735, 26092, 25502, 30751, 51288, 26163, 30781, 30812, 27928, 27635, 30848, 30868, 30888, 30917,\n' +
'  /* 11295 */ 30955, 30971, 30998, 31014, 31030, 31060, 31096, 41241, 31124, 32673, 33708, 31160, 31177, 39621, 36375,\n' +
'  /* 11310 */ 39148, 20048, 25502, 25502, 27192, 25502, 25502, 31243, 45790, 40539, 31272, 31256, 48462, 22863, 41205,\n' +
'  /* 11325 */ 31308, 45874, 31337, 36875, 33041, 32310, 36039, 39334, 34988, 31374, 31410, 31428, 31476, 22355, 25502,\n' +
'  /* 11340 */ 31514, 31530, 19890, 20326, 31546, 30352, 31573, 31625, 37603, 39985, 31641, 31657, 31673, 48109, 31710,\n' +
'  /* 11355 */ 31805, 31830, 42451, 31866, 31902, 31944, 31960, 26142, 25806, 31997, 40137, 32015, 18634, 30938, 32035,\n' +
'  /* 11370 */ 32071, 49194, 19550, 23510, 32107, 28221, 40964, 32134, 32152, 28584, 32175, 30515, 32193, 49028, 29121,\n' +
'  /* 11385 */ 32218, 29597, 50338, 32280, 32300, 32326, 23462, 20841, 23054, 29997, 25502, 32367, 20871, 43345, 32387,\n' +
'  /* 11400 */ 32413, 32432, 26804, 47859, 46465, 22561, 32453, 32470, 32505, 32517, 32540, 32557, 31753, 31739, 48005,\n' +
'  /* 11415 */ 35018, 25502, 25502, 32576, 25502, 25502, 30190, 23509, 32612, 32630, 28223, 30117, 27522, 34560, 38486,\n' +
'  /* 11430 */ 31080, 48785, 38513, 30461, 33321, 41843, 43812, 32671, 32689, 32756, 30339, 32787, 32822, 32870, 32898,\n' +
'  /* 11445 */ 32928, 32989, 33016, 33057, 33113, 21674, 49664, 33167, 26224, 40283, 34520, 31687, 33188, 36948, 22582,\n' +
'  /* 11460 */ 29315, 31922, 25838, 33209, 28217, 40805, 30515, 27495, 29597, 33226, 29780, 46215, 33267, 33285, 33309,\n' +
'  /* 11475 */ 48814, 28219, 33344, 43364, 27691, 41653, 33360, 33387, 33429, 44191, 33445, 46213, 22607, 35370, 33496,\n' +
'  /* 11490 */ 33534, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11505 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11520 */ 23257, 25502, 25502, 33569, 25502, 36984, 33590, 33608, 22099, 31138, 33651, 33681, 25502, 33667, 33787,\n' +
'  /* 11535 */ 33796, 33812, 33828, 26092, 25502, 25502, 33844, 26163, 25502, 25502, 25502, 25502, 25502, 33770, 25502,\n' +
'  /* 11550 */ 33762, 25502, 33769, 45029, 36724, 33864, 36516, 33891, 33938, 29766, 25502, 19901, 25502, 25502, 33972,\n' +
'  /* 11565 */ 25502, 25502, 25502, 33996, 26592, 25502, 34015, 25502, 34036, 34069, 28221, 28221, 28249, 34086, 30515,\n' +
'  /* 11580 */ 30515, 36820, 34106, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 30939,\n' +
'  /* 11595 */ 25502, 25502, 25502, 43894, 37356, 28221, 28221, 28221, 28221, 34132, 22606, 30515, 30515, 30515, 48757,\n' +
'  /* 11610 */ 40826, 29597, 29597, 29597, 38182, 29597, 48007, 29374, 26142, 25502, 25502, 25502, 25502, 25502, 30938,\n' +
'  /* 11625 */ 25502, 41861, 25502, 25502, 28220, 28221, 28221, 34150, 28221, 22604, 30515, 30515, 46623, 30515, 35845,\n' +
'  /* 11640 */ 29121, 29597, 29597, 34168, 29597, 22961, 35014, 23462, 25502, 25502, 25502, 25502, 25502, 25502, 34188,\n' +
'  /* 11655 */ 27719, 28221, 28221, 28221, 34206, 22604, 30515, 30515, 39211, 30515, 32517, 29597, 29597, 29597, 34226,\n' +
'  /* 11670 */ 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 23509, 28221, 28221, 28223, 30515, 30515, 30515,\n' +
'  /* 11685 */ 38486, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515,\n' +
'  /* 11700 */ 30515, 22820, 29597, 29597, 34694, 35153, 25502, 25502, 25502, 29522, 28221, 22601, 36577, 30515, 37116,\n' +
'  /* 11715 */ 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062,\n' +
'  /* 11730 */ 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370,\n' +
'  /* 11745 */ 34244, 34272, 32650, 31725, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11760 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11775 */ 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 51446, 25502, 25502, 42047, 34309, 34318, 34334,\n' +
'  /* 11790 */ 34340, 34356, 34372, 34388, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 30872, 25502, 25502, 25502,\n' +
'  /* 11805 */ 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 34404, 25502, 25502, 25502,\n' +
'  /* 11820 */ 25500, 25502, 25502, 25502, 34426, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515,\n' +
'  /* 11835 */ 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 11850 */ 25502, 25502, 34443, 25502, 25502, 34463, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515,\n' +
'  /* 11865 */ 30515, 40847, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 34967, 25502, 18945,\n' +
'  /* 11880 */ 36126, 25502, 25502, 36128, 19909, 28220, 28221, 47079, 28221, 28221, 22604, 30515, 30515, 34479, 30515,\n' +
'  /* 11895 */ 35845, 29121, 29597, 39254, 29597, 29597, 22961, 28650, 33327, 25502, 25502, 25906, 25502, 25502, 25502,\n' +
'  /* 11910 */ 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597,\n' +
'  /* 11925 */ 29597, 48005, 35018, 25502, 25502, 22312, 25502, 34499, 25502, 28219, 28221, 28221, 34517, 30515, 30515,\n' +
'  /* 11940 */ 38885, 38335, 29597, 29597, 46169, 30461, 33321, 30796, 45571, 34536, 25502, 32713, 36170, 48922, 34552,\n' +
'  /* 11955 */ 30389, 31044, 34576, 49472, 47571, 34599, 35104, 25502, 35724, 29792, 33546, 37662, 34625, 40619, 32836,\n' +
'  /* 11970 */ 34666, 38914, 34688, 31922, 49076, 26332, 45247, 49533, 39235, 34710, 34730, 35994, 49079, 46215, 22603,\n' +
'  /* 11985 */ 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607,\n' +
'  /* 12000 */ 35370, 28245, 27503, 34782, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12015 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12030 */ 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502,\n' +
'  /* 12045 */ 25502, 25502, 41551, 26062, 44666, 26092, 24279, 25502, 25502, 34813, 25502, 25502, 25502, 34859, 25502,\n' +
'  /* 12060 */ 34860, 25502, 25502, 34840, 34856, 27229, 34876, 34893, 37178, 29618, 32242, 34915, 25502, 25502, 25502,\n' +
'  /* 12075 */ 34945, 34824, 25502, 34964, 25502, 25502, 34983, 25502, 25502, 25502, 26122, 28221, 28221, 40957, 22605,\n' +
'  /* 12090 */ 30515, 30515, 42788, 36820, 29597, 29597, 38832, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12105 */ 25502, 25502, 25502, 25502, 29676, 37550, 37356, 28221, 28221, 28221, 28221, 28221, 44609, 30515, 30515,\n' +
'  /* 12120 */ 30515, 30515, 46685, 29597, 29597, 29597, 29597, 29597, 35004, 35020, 25502, 51171, 25502, 25502, 25502,\n' +
'  /* 12135 */ 25502, 25502, 25502, 25502, 25502, 35036, 35439, 28221, 28221, 28221, 28221, 22604, 35057, 30515, 30515,\n' +
'  /* 12150 */ 30515, 35845, 23493, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 29800, 25502, 25502,\n' +
'  /* 12165 */ 25502, 25502, 27229, 28221, 28221, 28221, 37338, 22604, 30515, 30515, 30515, 38307, 29114, 29597, 29597,\n' +
'  /* 12180 */ 29597, 43389, 48005, 35018, 25502, 25502, 42969, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515,\n' +
'  /* 12195 */ 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221,\n' +
'  /* 12210 */ 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 42166, 25502, 25502, 35079, 28221, 22601, 30515,\n' +
'  /* 12225 */ 30515, 22823, 29597, 28622, 35098, 49076, 25502, 35120, 38078, 30515, 35361, 29597, 35140, 49079, 46215,\n' +
'  /* 12240 */ 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213,\n' +
'  /* 12255 */ 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12270 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12285 */ 25502, 25502, 25502, 23257, 25502, 25502, 31490, 25502, 36984, 25965, 24479, 31144, 20275, 20285, 49374,\n' +
'  /* 12300 */ 49383, 35178, 35193, 35205, 35221, 35237, 26092, 25502, 25502, 25502, 25489, 39950, 25502, 25502, 31999,\n' +
'  /* 12315 */ 35253, 28311, 35274, 41479, 35291, 35307, 25693, 35323, 35343, 37966, 32284, 28428, 35388, 25502, 25502,\n' +
'  /* 12330 */ 25502, 32055, 25500, 29819, 50680, 25502, 25502, 25502, 48987, 35418, 25502, 35455, 42190, 35486, 31460,\n' +
'  /* 12345 */ 35504, 35527, 35565, 39379, 35585, 35631, 35621, 29597, 35655, 32310, 36039, 25502, 33735, 23446, 25502,\n' +
'  /* 12360 */ 35704, 47598, 35740, 49224, 25502, 35758, 28293, 36346, 28221, 35780, 28221, 35799, 36303, 35839, 43515,\n' +
'  /* 12375 */ 30515, 41697, 35861, 35900, 29597, 35954, 38165, 35971, 36010, 39403, 35020, 25502, 25502, 25502, 25502,\n' +
'  /* 12390 */ 40119, 36075, 48697, 25502, 36123, 25502, 25502, 36144, 36167, 28221, 28221, 47075, 47197, 47483, 30515,\n' +
'  /* 12405 */ 30515, 48141, 50899, 36186, 36210, 29597, 29597, 31074, 31880, 36230, 33327, 23409, 36252, 36319, 36362,\n' +
'  /* 12420 */ 36398, 26022, 36414, 36434, 28221, 35823, 43470, 36464, 36532, 30515, 36566, 37992, 47892, 31597, 29597,\n' +
'  /* 12435 */ 31767, 38938, 36601, 33000, 27608, 26030, 36642, 36660, 36680, 45691, 36696, 36713, 43491, 36747, 36788,\n' +
'  /* 12450 */ 36813, 22733, 44067, 36836, 36870, 35914, 36891, 36926, 42035, 25502, 25502, 46306, 36964, 20781, 37000,\n' +
'  /* 12465 */ 39357, 49541, 37026, 35352, 28170, 48168, 27052, 34694, 33327, 18646, 49623, 25502, 28218, 28221, 22601,\n' +
'  /* 12480 */ 30515, 30515, 22823, 29597, 28622, 27276, 37051, 25502, 39906, 40568, 37087, 37109, 37132, 35994, 49079,\n' +
'  /* 12495 */ 35433, 22603, 35062, 22777, 42832, 37148, 32159, 31789, 27227, 28224, 35061, 35372, 46215, 22608, 22825,\n' +
'  /* 12510 */ 51255, 37164, 37214, 28245, 27503, 32650, 31352, 36025, 33914, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12525 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12540 */ 25502, 25502, 25502, 25502, 23257, 25502, 25502, 23400, 25502, 36984, 25502, 25502, 25502, 25502, 35938,\n' +
'  /* 12555 */ 39075, 20926, 23408, 25947, 41551, 37250, 37285, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502,\n' +
'  /* 12570 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766, 25502,\n' +
'  /* 12585 */ 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 37301, 25502, 25502, 25502, 26122, 28221, 28221,\n' +
'  /* 12600 */ 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 37320, 36039, 25502, 25502, 25502,\n' +
'  /* 12615 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606,\n' +
'  /* 12630 */ 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502,\n' +
'  /* 12645 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515,\n' +
'  /* 12660 */ 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502,\n' +
'  /* 12675 */ 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114,\n' +
'  /* 12690 */ 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221,\n' +
'  /* 12705 */ 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214,\n' +
'  /* 12720 */ 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221,\n' +
'  /* 12735 */ 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994,\n' +
'  /* 12750 */ 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608,\n' +
'  /* 12765 */ 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12780 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 12795 */ 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 32596, 25502, 36984, 25502, 25502, 25502, 25502,\n' +
'  /* 12810 */ 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502,\n' +
'  /* 12825 */ 37354, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766,\n' +
'  /* 12840 */ 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221,\n' +
'  /* 12855 */ 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502,\n' +
'  /* 12870 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221,\n' +
'  /* 12885 */ 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 18493,\n' +
'  /* 12900 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23299, 28221, 28221, 28221, 28221, 22604,\n' +
'  /* 12915 */ 37372, 30515, 30515, 30515, 35845, 32489, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502,\n' +
'  /* 12930 */ 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515,\n' +
'  /* 12945 */ 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221,\n' +
'  /* 12960 */ 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502,\n' +
'  /* 12975 */ 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218,\n' +
'  /* 12990 */ 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597,\n' +
'  /* 13005 */ 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215,\n' +
'  /* 13020 */ 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502,\n' +
'  /* 13035 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 13050 */ 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 23188, 25502, 36984, 25502, 39174, 25502,\n' +
'  /* 13065 */ 18882, 37389, 37426, 37439, 37455, 37461, 37477, 37493, 37509, 26092, 25502, 37525, 25502, 26163, 25502,\n' +
'  /* 13080 */ 18848, 41769, 25502, 25502, 37545, 25502, 21213, 35764, 37566, 37588, 37639, 37678, 37702, 36910, 37743,\n' +
'  /* 13095 */ 37778, 37809, 37837, 25502, 28511, 25500, 25502, 18692, 32371, 25502, 33574, 25502, 37825, 37854, 37876,\n' +
'  /* 13110 */ 37892, 32614, 31220, 37927, 37952, 30515, 37982, 42221, 46250, 38008, 41739, 38356, 42715, 38028, 25502,\n' +
'  /* 13125 */ 38056, 25502, 25502, 25502, 48387, 25502, 25502, 25502, 25502, 25502, 38226, 37269, 38075, 38094, 42553,\n' +
'  /* 13140 */ 28221, 37758, 38113, 49922, 30515, 38146, 45845, 34583, 38164, 38181, 38521, 29597, 38198, 35020, 25502,\n' +
'  /* 13155 */ 25502, 21095, 20655, 25502, 40263, 25502, 38224, 25502, 25502, 25502, 28220, 28221, 28221, 38242, 36291,\n' +
'  /* 13170 */ 22604, 30515, 30515, 47114, 38294, 38330, 29121, 29597, 29597, 38351, 38372, 22961, 35014, 33327, 25869,\n' +
'  /* 13185 */ 25502, 25502, 29684, 25502, 25502, 25502, 27229, 28221, 38408, 28221, 28221, 22604, 27542, 30515, 30515,\n' +
'  /* 13200 */ 30515, 29114, 29201, 29597, 29597, 29597, 48005, 35018, 21505, 22256, 25502, 35162, 25502, 38428, 31200,\n' +
'  /* 13215 */ 38446, 28221, 43971, 38466, 30515, 30515, 33875, 38502, 29597, 29597, 44389, 33321, 45526, 25502, 42111,\n' +
'  /* 13230 */ 25502, 46214, 35488, 28221, 22605, 34483, 30515, 22820, 22542, 29597, 34694, 33327, 25502, 38537, 25502,\n' +
'  /* 13245 */ 28218, 28221, 32644, 30515, 30410, 22823, 29597, 38554, 31922, 49076, 25502, 28217, 28222, 30515, 35063,\n' +
'  /* 13260 */ 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372,\n' +
'  /* 13275 */ 40479, 38576, 38612, 38278, 46543, 38649, 28245, 27503, 38689, 31352, 33906, 33914, 25502, 25502, 25502,\n' +
'  /* 13290 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 13305 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 18521, 25502, 36984, 25502, 21556,\n' +
'  /* 13320 */ 25502, 25502, 35402, 50116, 50125, 38736, 38750, 38759, 38775, 38791, 26199, 25502, 37793, 25502, 26163,\n' +
'  /* 13335 */ 25502, 30852, 25502, 25502, 25502, 37793, 25502, 23120, 37572, 37792, 23125, 38807, 44015, 47916, 38830,\n' +
'  /* 13350 */ 45898, 29766, 25502, 25502, 32589, 25502, 25500, 34501, 23629, 25502, 36644, 38848, 25502, 33726, 34020,\n' +
'  /* 13365 */ 38866, 28221, 32437, 37623, 22605, 38882, 28602, 44931, 38901, 47985, 29597, 47161, 38930, 27024, 38954,\n' +
'  /* 13380 */ 38984, 47287, 39013, 39031, 25502, 25502, 25502, 25502, 36337, 25502, 25502, 37356, 34134, 37911, 34210,\n' +
'  /* 13395 */ 28221, 28221, 22606, 39050, 30515, 39099, 30515, 40826, 44113, 44959, 44966, 29597, 29597, 48007, 35020,\n' +
'  /* 13410 */ 25502, 34427, 25502, 44548, 25502, 25502, 39118, 39137, 39164, 25502, 42129, 28220, 45105, 28221, 43101,\n' +
'  /* 13425 */ 39190, 22604, 48591, 39210, 30515, 39227, 35845, 39251, 33029, 29597, 50835, 39270, 22961, 35014, 33327,\n' +
'  /* 13440 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515,\n' +
'  /* 13455 */ 30515, 30515, 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 13470 */ 28219, 28221, 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 43166, 25502, 25502,\n' +
'  /* 13485 */ 25502, 25502, 46214, 32966, 28221, 22605, 39289, 30515, 22820, 39310, 29597, 34694, 33327, 25502, 25502,\n' +
'  /* 13500 */ 39330, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 27829, 31922, 49076, 25502, 28217, 28222, 30515,\n' +
'  /* 13515 */ 35063, 29597, 35994, 41443, 46215, 49905, 38130, 46133, 32341, 39350, 39373, 39395, 27227, 28224, 35061,\n' +
'  /* 13530 */ 35372, 46215, 22608, 22825, 46213, 22607, 34650, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502,\n' +
'  /* 13545 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 13560 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 21412, 25502, 48410, 25502,\n' +
'  /* 13575 */ 18542, 39419, 23099, 39455, 39497, 39536, 39522, 39541, 39506, 39557, 39573, 26092, 25502, 38663, 39589,\n' +
'  /* 13590 */ 39610, 39721, 41473, 25502, 39637, 39654, 39671, 39709, 47342, 19121, 39737, 43608, 39776, 39812, 39856,\n' +
'  /* 13605 */ 39922, 39973, 29766, 25502, 40001, 25502, 34190, 40022, 40042, 30309, 40070, 40101, 25502, 40135, 40153,\n' +
'  /* 13620 */ 18352, 40182, 27156, 28221, 32802, 22605, 40198, 30515, 41949, 36820, 48534, 46279, 38012, 29597, 31321,\n' +
'  /* 13635 */ 40214, 30589, 25502, 40242, 19002, 25502, 25502, 25502, 40261, 29411, 25502, 40026, 37356, 44580, 40279,\n' +
'  /* 13650 */ 28221, 28221, 28221, 41119, 38122, 30515, 30515, 30515, 40826, 44451, 29597, 29597, 29597, 29597, 27318,\n' +
'  /* 13665 */ 35020, 25502, 25502, 25502, 25502, 25502, 40299, 25502, 21666, 40006, 23062, 25502, 40317, 28221, 28221,\n' +
'  /* 13680 */ 46004, 30216, 45173, 30515, 30515, 30516, 30515, 40338, 40359, 29597, 29597, 28465, 27350, 22961, 36938,\n' +
'  /* 13695 */ 33327, 40382, 40418, 40437, 40454, 40245, 26363, 26581, 40474, 36151, 40495, 40528, 40561, 22604, 40584,\n' +
'  /* 13710 */ 40600, 44093, 40616, 29114, 44713, 40635, 40678, 40694, 48005, 48656, 42406, 40715, 44253, 40746, 21987,\n' +
'  /* 13725 */ 40782, 40801, 36489, 48279, 50426, 30515, 40821, 40842, 40863, 29933, 40892, 40911, 40930, 33321, 22342,\n' +
'  /* 13740 */ 25502, 25502, 47627, 40946, 34070, 40980, 29086, 39102, 41014, 45618, 29335, 38702, 34694, 36616, 25502,\n' +
'  /* 13755 */ 25502, 32704, 30031, 41049, 22601, 41065, 41025, 33293, 41081, 28622, 39065, 49343, 35716, 41100, 28222,\n' +
'  /* 13770 */ 38314, 35063, 49466, 35994, 49079, 41097, 41116, 41135, 43154, 37717, 41160, 41191, 41227, 36267, 41904,\n' +
'  /* 13785 */ 37936, 35926, 46215, 22608, 22825, 46213, 22607, 35370, 28127, 42247, 32650, 31352, 33906, 41257, 25502,\n' +
'  /* 13800 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 13815 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 41281, 36984,\n' +
'  /* 13830 */ 25502, 18873, 41302, 25502, 27288, 41322, 41331, 41347, 41361, 41370, 41386, 41402, 26092, 41418, 28767,\n' +
'  /* 13845 */ 41434, 41596, 24288, 41459, 25502, 41495, 19804, 41525, 47247, 41541, 41567, 41583, 41623, 41639, 41674,\n' +
'  /* 13860 */ 41713, 41729, 44481, 41755, 25502, 34447, 41798, 41819, 41840, 23470, 36418, 18363, 41859, 41877, 25502,\n' +
'  /* 13875 */ 40402, 25502, 26122, 32136, 44304, 41897, 41920, 30515, 41937, 41688, 41972, 29597, 38712, 42008, 44161,\n' +
'  /* 13890 */ 42063, 36039, 25502, 31161, 42091, 25502, 42108, 35258, 19790, 25502, 42127, 42145, 42163, 23551, 42182,\n' +
'  /* 13905 */ 42512, 36477, 28221, 35124, 37010, 30515, 42206, 42263, 30515, 42281, 47535, 27793, 42297, 29597, 35605,\n' +
'  /* 13920 */ 48007, 30479, 42331, 42367, 35275, 25502, 42386, 25502, 25502, 25502, 25502, 25502, 42404, 28220, 28221,\n' +
'  /* 13935 */ 39791, 50008, 28221, 22604, 30515, 47665, 50956, 30515, 35845, 29121, 29597, 27823, 40653, 29597, 22961,\n' +
'  /* 13950 */ 35014, 33327, 25502, 25502, 42422, 31850, 25502, 25502, 25502, 47606, 28221, 28221, 28221, 28221, 22855,\n' +
'  /* 13965 */ 30515, 30515, 30515, 30515, 42441, 29597, 29597, 29597, 29597, 42477, 35018, 38538, 39083, 25502, 25502,\n' +
'  /* 13980 */ 25502, 46388, 42507, 35783, 28221, 49739, 30515, 36585, 30515, 46111, 29597, 36902, 29597, 30461, 42743,\n' +
'  /* 13995 */ 42528, 25502, 25502, 25502, 44816, 28221, 42548, 33269, 50573, 30515, 34714, 42630, 29597, 34694, 31845,\n' +
'  /* 14010 */ 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 34609, 49076, 25502, 42569,\n' +
'  /* 14025 */ 34877, 42780, 35511, 42627, 35994, 42646, 42672, 45671, 42688, 42731, 47755, 36279, 42769, 42703, 27227,\n' +
'  /* 14040 */ 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 28677, 42804, 46648, 32650, 31352, 34797, 42824,\n' +
'  /* 14055 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14070 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 32085,\n' +
'  /* 14085 */ 36984, 25502, 25502, 42848, 26602, 42870, 50502, 25502, 36854, 42907, 42919, 42935, 42951, 26092, 25502,\n' +
'  /* 14100 */ 25502, 21151, 26163, 25502, 25502, 25502, 42967, 27683, 25502, 25502, 38270, 21149, 25502, 27229, 50317,\n' +
'  /* 14115 */ 37762, 42985, 44142, 43009, 29766, 25502, 48976, 25502, 25502, 25500, 25502, 43043, 43059, 33172, 25502,\n' +
'  /* 14130 */ 25502, 33848, 25502, 43080, 50621, 43096, 35470, 22605, 43117, 38590, 44332, 43141, 50248, 22668, 39314,\n' +
'  /* 14145 */ 50650, 32954, 45015, 43182, 25502, 18686, 43208, 25502, 43228, 43245, 25502, 25502, 25502, 25502, 37356,\n' +
'  /* 14160 */ 28221, 28221, 28221, 43280, 28221, 22606, 30515, 30515, 48619, 30515, 40826, 29597, 29597, 29124, 29597,\n' +
'  /* 14175 */ 29597, 48007, 31358, 43301, 25502, 20042, 25502, 25502, 41881, 25502, 43317, 25502, 43340, 42147, 28220,\n' +
'  /* 14190 */ 30071, 44296, 28221, 28221, 22604, 30515, 44204, 30515, 30515, 35845, 43361, 29597, 43380, 29597, 29597,\n' +
'  /* 14205 */ 22961, 35014, 33327, 41286, 25502, 25502, 25502, 25502, 33690, 25502, 30022, 28221, 28221, 46330, 28221,\n' +
'  /* 14220 */ 22604, 30515, 30515, 43414, 30515, 32482, 29597, 29597, 35598, 29597, 48005, 35018, 25502, 25502, 25502,\n' +
'  /* 14235 */ 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461,\n' +
'  /* 14250 */ 33321, 25502, 45930, 25502, 25502, 23292, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 38560,\n' +
'  /* 14265 */ 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502,\n' +
'  /* 14280 */ 28217, 28222, 30515, 35063, 29597, 30159, 43435, 42656, 22477, 44687, 22777, 33239, 43465, 35844, 29598,\n' +
'  /* 14295 */ 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906,\n' +
'  /* 14310 */ 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14325 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502,\n' +
'  /* 14340 */ 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092,\n' +
'  /* 14355 */ 25502, 25502, 25502, 26163, 25502, 25502, 32019, 25502, 25502, 25502, 43862, 43865, 25875, 43858, 31190,\n' +
'  /* 14370 */ 43486, 43507, 35884, 44873, 45898, 29766, 43531, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502,\n' +
'  /* 14385 */ 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597,\n' +
'  /* 14400 */ 29597, 29597, 32310, 36039, 25502, 25502, 25502, 47036, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14415 */ 38430, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 43419, 29597, 29597, 29597,\n' +
'  /* 14430 */ 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14445 */ 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597,\n' +
'  /* 14460 */ 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221,\n' +
'  /* 14475 */ 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502,\n' +
'  /* 14490 */ 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597,\n' +
'  /* 14505 */ 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597,\n' +
'  /* 14520 */ 34694, 33327, 25502, 25502, 25502, 28218, 43553, 22601, 44615, 30515, 22823, 43574, 28622, 31922, 49076,\n' +
'  /* 14535 */ 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844,\n' +
'  /* 14550 */ 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352,\n' +
'  /* 14565 */ 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14580 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502,\n' +
'  /* 14595 */ 25502, 26746, 19824, 25502, 25502, 26453, 25502, 38040, 43594, 25462, 43624, 43637, 43646, 43662, 43678,\n' +
'  /* 14610 */ 26092, 25502, 26833, 28029, 26163, 51410, 43694, 43715, 30901, 28992, 27874, 23003, 23013, 30982, 28320,\n' +
'  /* 14625 */ 49323, 33097, 43734, 43750, 43785, 43828, 43844, 25502, 25502, 25502, 22625, 43881, 42854, 43917, 36977,\n' +
'  /* 14640 */ 51158, 25502, 25502, 25502, 43940, 43966, 50816, 28221, 43987, 44031, 35569, 30515, 44054, 44646, 29597,\n' +
'  /* 14655 */ 44109, 35688, 44129, 44177, 44220, 25502, 25502, 25502, 38850, 40085, 44248, 25502, 19817, 18816, 40083,\n' +
'  /* 14670 */ 34948, 37356, 37615, 22925, 28221, 28221, 44269, 44320, 30515, 44355, 30515, 27484, 44375, 44419, 47166,\n' +
'  /* 14685 */ 29597, 27175, 44439, 44467, 35020, 25502, 25502, 25502, 44497, 39840, 22445, 44518, 37304, 44535, 23846,\n' +
'  /* 14700 */ 25209, 44572, 28221, 44596, 32740, 28221, 45311, 30515, 48848, 44631, 44682, 42265, 44703, 29597, 44729,\n' +
'  /* 14715 */ 35639, 29597, 48176, 35014, 31928, 44778, 25502, 39121, 44796, 43064, 25502, 48995, 44812, 33956, 44832,\n' +
'  /* 14730 */ 48052, 28221, 22604, 44080, 30515, 44853, 30515, 29114, 45627, 29597, 44870, 29597, 48005, 44889, 25502,\n' +
'  /* 14745 */ 29170, 28705, 25502, 25502, 25502, 45302, 28221, 28221, 46446, 44926, 30515, 30515, 44947, 44982, 29597,\n' +
'  /* 14760 */ 29597, 45001, 33321, 25502, 45045, 25502, 25502, 23345, 28221, 28221, 36507, 30515, 30515, 46242, 29597,\n' +
'  /* 14775 */ 29597, 31912, 33327, 25753, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922,\n' +
'  /* 14790 */ 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 45066, 45092, 31557, 37035, 45131, 41265, 28219,\n' +
'  /* 14805 */ 35844, 29598, 26213, 45168, 45189, 45216, 45244, 22608, 22825, 46213, 22607, 35370, 45263, 45289, 32650,\n' +
'  /* 14820 */ 42236, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 14835 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257, 25502,\n' +
'  /* 14850 */ 25502, 25502, 21994, 36984, 45327, 34929, 48879, 45345, 45374, 45425, 45358, 45450, 45464, 45476, 45492,\n' +
'  /* 14865 */ 45508, 26092, 45524, 23320, 25502, 45542, 25502, 25502, 50686, 25502, 23262, 45569, 45587, 46764, 28268,\n' +
'  /* 14880 */ 46771, 43449, 37903, 45607, 42611, 45643, 45659, 29766, 39760, 19219, 33592, 25502, 41607, 45687, 25502,\n' +
'  /* 14895 */ 25502, 25502, 33635, 45707, 45741, 36664, 45762, 45814, 47416, 28221, 42808, 45838, 35539, 30515, 36820,\n' +
'  /* 14910 */ 45861, 36214, 29597, 29597, 32310, 36039, 25502, 45925, 25502, 39432, 45946, 45978, 25502, 25502, 25502,\n' +
'  /* 14925 */ 25502, 29352, 37356, 29447, 28221, 45996, 28221, 28221, 46020, 46679, 49914, 30515, 30515, 30097, 44985,\n' +
'  /* 14940 */ 35955, 29597, 29597, 48315, 27588, 35020, 25502, 25502, 40458, 25502, 46042, 20899, 29037, 33133, 33473,\n' +
'  /* 14955 */ 46064, 33151, 46082, 28221, 28221, 41175, 38450, 29061, 30515, 30515, 47687, 47210, 46106, 46127, 29597,\n' +
'  /* 14970 */ 29597, 28458, 46149, 22961, 38208, 46185, 33980, 25502, 21941, 25502, 25502, 22233, 21052, 46210, 28221,\n' +
'  /* 14985 */ 28221, 42075, 28221, 22604, 30515, 30515, 46231, 30515, 29114, 29597, 29597, 46266, 29597, 48005, 35018,\n' +
'  /* 15000 */ 25502, 39638, 46301, 44502, 48365, 25502, 46322, 48271, 43558, 28223, 30515, 46346, 48473, 41211, 29597,\n' +
'  /* 15015 */ 46366, 38386, 30461, 33321, 25502, 25502, 46384, 46404, 46214, 28221, 28221, 22605, 30515, 30515, 22820,\n' +
'  /* 15030 */ 29597, 29597, 30570, 33327, 46420, 23540, 18371, 46438, 28221, 46462, 30515, 31694, 22823, 29597, 46481,\n' +
'  /* 15045 */ 39827, 49508, 46511, 46531, 28222, 46565, 46549, 46588, 42461, 49079, 46215, 46606, 46639, 42023, 41265,\n' +
'  /* 15060 */ 28219, 35844, 29598, 45980, 38097, 39294, 35372, 37404, 46664, 45200, 46701, 36797, 46750, 28245, 27503,\n' +
'  /* 15075 */ 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15090 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 23257,\n' +
'  /* 15105 */ 25502, 25502, 25502, 23145, 36984, 25502, 25502, 32351, 25502, 46787, 33401, 33413, 46843, 46859, 46871,\n' +
'  /* 15120 */ 46887, 46903, 26092, 46919, 21138, 22687, 26163, 40396, 25297, 46938, 28983, 33753, 46948, 46972, 46981,\n' +
'  /* 15135 */ 46997, 47025, 47060, 44283, 47095, 47130, 47146, 47182, 47233, 29267, 33328, 27656, 47263, 47281, 25502,\n' +
'  /* 15150 */ 25502, 47303, 47328, 18337, 33717, 47358, 47386, 47402, 50016, 32771, 35814, 31585, 47440, 35873, 47475,\n' +
'  /* 15165 */ 43125, 47499, 47522, 47557, 46368, 32310, 42491, 47587, 18621, 25502, 47622, 40166, 40759, 25502, 33771,\n' +
'  /* 15180 */ 25502, 36059, 47643, 50284, 40998, 43027, 28059, 28221, 26795, 22606, 47659, 47681, 47703, 47707, 40826,\n' +
'  /* 15195 */ 22758, 28490, 31814, 29597, 47723, 31886, 47745, 25502, 37234, 25502, 47771, 47790, 25502, 47834, 23440,\n' +
'  /* 15210 */ 25502, 33142, 25721, 28220, 47850, 47875, 28221, 36772, 22604, 48119, 46572, 30515, 51061, 47908, 47932,\n' +
'  /* 15225 */ 47951, 47977, 29597, 40662, 48001, 35014, 28000, 33617, 25502, 41824, 18805, 25502, 31498, 48023, 26183,\n' +
'  /* 15240 */ 46090, 31227, 48039, 38814, 45798, 48073, 48094, 36550, 48135, 30544, 37191, 47961, 48157, 48526, 44762,\n' +
'  /* 15255 */ 35018, 48192, 25502, 48217, 23211, 48236, 44556, 32397, 48262, 28221, 34053, 35549, 48295, 30515, 27773,\n' +
'  /* 15270 */ 35669, 48314, 29597, 48331, 33321, 25502, 48381, 30932, 48403, 45725, 40512, 48426, 48451, 37686, 48497,\n' +
'  /* 15285 */ 48516, 44753, 48550, 34694, 29155, 25502, 25502, 26106, 28911, 44837, 48566, 48586, 48607, 33518, 47541,\n' +
'  /* 15300 */ 48642, 29665, 48684, 48720, 27727, 48057, 48748, 32912, 48781, 48801, 49079, 46215, 22603, 35062, 22777,\n' +
'  /* 15315 */ 41265, 28219, 35844, 29598, 27227, 28224, 35061, 38392, 42753, 48840, 48864, 48913, 48946, 48962, 49011,\n' +
'  /* 15330 */ 27503, 32650, 31352, 39871, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15345 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15360 */ 23257, 25502, 25502, 25502, 25502, 49044, 25502, 25502, 49072, 25502, 44232, 36089, 36098, 49095, 36098,\n' +
'  /* 15375 */ 36107, 49111, 49127, 26092, 25502, 25502, 25502, 26297, 25502, 28533, 25502, 25502, 25502, 25502, 28530,\n' +
'  /* 15390 */ 25502, 28742, 25502, 27229, 45776, 42602, 49143, 42315, 45909, 49159, 32091, 25502, 25502, 25502, 25500,\n' +
'  /* 15405 */ 25502, 25502, 49210, 25502, 25502, 25502, 25502, 49218, 49240, 28221, 28221, 28221, 45115, 49256, 30515,\n' +
'  /* 15420 */ 30515, 48626, 44744, 29597, 29597, 32541, 33085, 44403, 49275, 25502, 41782, 26947, 25502, 25502, 25502,\n' +
'  /* 15435 */ 49303, 29016, 25502, 49339, 49359, 28221, 32722, 43997, 49399, 29480, 22606, 48500, 46350, 46615, 49433,\n' +
'  /* 15450 */ 49452, 29597, 35682, 49488, 40366, 47935, 22521, 35020, 25502, 25502, 49504, 41306, 25502, 25502, 25502,\n' +
'  /* 15465 */ 40301, 25502, 25502, 25502, 49524, 49896, 28221, 28221, 28221, 22604, 49436, 30515, 30515, 30515, 35845,\n' +
'  /* 15480 */ 49557, 40644, 29597, 29597, 29597, 22961, 35014, 33922, 25502, 51439, 25502, 25502, 25502, 25502, 40785,\n' +
'  /* 15495 */ 27229, 49576, 28221, 28221, 28221, 41658, 30515, 30515, 30515, 30515, 29295, 29597, 29597, 29597, 29597,\n' +
'  /* 15510 */ 48005, 35018, 49619, 25502, 25502, 49639, 49659, 25502, 49680, 28221, 28221, 28223, 49711, 30515, 30515,\n' +
'  /* 15525 */ 40343, 31780, 29597, 29597, 28101, 33321, 23596, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515,\n' +
'  /* 15540 */ 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823,\n' +
'  /* 15555 */ 29597, 28622, 31922, 49076, 25502, 28217, 49738, 37093, 35063, 41985, 35994, 49079, 46215, 22603, 35062,\n' +
'  /* 15570 */ 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 26785, 49755, 33371, 46213, 22607, 35370,\n' +
'  /* 15585 */ 28245, 41144, 49771, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15600 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15615 */ 25502, 23257, 25502, 25502, 25502, 25502, 49787, 49838, 38997, 49815, 25502, 33251, 25502, 38994, 49835,\n' +
'  /* 15630 */ 51474, 43950, 49854, 49870, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15645 */ 25502, 25502, 25502, 25502, 27229, 49886, 49020, 49603, 29597, 45898, 29766, 25502, 25502, 49938, 49958,\n' +
'  /* 15660 */ 25500, 25502, 25502, 25502, 25502, 25502, 49978, 25502, 25502, 26122, 49998, 28221, 36762, 22605, 50032,\n' +
'  /* 15675 */ 30515, 47107, 36820, 47729, 29597, 43578, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15690 */ 50053, 25502, 25502, 33999, 25502, 37356, 28221, 28221, 32731, 28221, 28221, 22606, 30515, 49259, 30515,\n' +
'  /* 15705 */ 30515, 40826, 29597, 29597, 50756, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15720 */ 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515,\n' +
'  /* 15735 */ 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15750 */ 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597,\n' +
'  /* 15765 */ 29597, 48005, 35018, 25502, 25502, 29405, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515,\n' +
'  /* 15780 */ 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 23092, 25502, 25502, 46214, 28221, 28221, 22605,\n' +
'  /* 15795 */ 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515,\n' +
'  /* 15810 */ 22823, 29597, 28622, 31922, 33460, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603,\n' +
'  /* 15825 */ 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607,\n' +
'  /* 15840 */ 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15855 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15870 */ 25502, 25502, 23257, 25502, 25502, 25502, 25502, 50073, 25502, 38633, 25502, 43324, 50101, 50141, 25502,\n' +
'  /* 15885 */ 50166, 50180, 50192, 50208, 50224, 26092, 25502, 25502, 25502, 26163, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15900 */ 25502, 25502, 25502, 25502, 25502, 27229, 26126, 35843, 50240, 42993, 46495, 50264, 25502, 25502, 25502,\n' +
'  /* 15915 */ 25502, 25500, 25502, 25502, 25502, 29736, 25502, 25502, 25502, 25502, 26122, 28221, 28221, 28221, 22605,\n' +
'  /* 15930 */ 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15945 */ 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515, 30515,\n' +
'  /* 15960 */ 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 15975 */ 25502, 21317, 25502, 25502, 25502, 25502, 50300, 28221, 28221, 28221, 28221, 48930, 30515, 30515, 30515,\n' +
'  /* 15990 */ 30515, 35845, 50333, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 41803, 25502, 25502, 25502,\n' +
'  /* 16005 */ 25502, 25502, 27229, 28221, 39194, 28221, 35082, 22604, 30515, 50450, 30515, 48765, 29114, 29597, 37198,\n' +
'  /* 16020 */ 29597, 34672, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223, 30515,\n' +
'  /* 16035 */ 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221, 28221,\n' +
'  /* 16050 */ 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601, 30515,\n' +
'  /* 16065 */ 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079, 46215,\n' +
'  /* 16080 */ 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825, 46213,\n' +
'  /* 16095 */ 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16110 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16125 */ 25502, 25502, 25502, 25688, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938, 25502,\n' +
'  /* 16140 */ 25502, 25502, 25502, 45076, 50354, 50370, 26092, 25502, 25502, 25502, 26163, 50386, 39693, 25502, 25502,\n' +
'  /* 16155 */ 25502, 25502, 48897, 25502, 37860, 48893, 31441, 50406, 50442, 32854, 29597, 45898, 29766, 25502, 25502,\n' +
'  /* 16170 */ 25502, 50278, 25500, 50466, 50487, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221, 31210, 40322,\n' +
'  /* 16185 */ 22605, 30515, 44339, 29559, 36820, 29597, 30233, 29597, 50526, 32310, 39885, 50547, 25502, 25502, 25502,\n' +
'  /* 16200 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221, 22606, 30515,\n' +
'  /* 16215 */ 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502, 25502, 25502,\n' +
'  /* 16230 */ 25502, 25502, 42532, 25502, 25502, 25502, 39034, 28220, 28221, 33553, 28221, 28221, 22604, 30515, 30515,\n' +
'  /* 16245 */ 50572, 30515, 37373, 29121, 29597, 40699, 29597, 29597, 22961, 35014, 33327, 50589, 25502, 25502, 25502,\n' +
'  /* 16260 */ 25502, 25502, 25502, 27229, 43285, 28221, 28221, 28221, 22604, 36542, 30515, 30515, 30515, 29114, 27060,\n' +
'  /* 16275 */ 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221, 28221, 28223,\n' +
'  /* 16290 */ 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502, 46214, 28221,\n' +
'  /* 16305 */ 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218, 28221, 22601,\n' +
'  /* 16320 */ 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994, 49079,\n' +
'  /* 16335 */ 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608, 22825,\n' +
'  /* 16350 */ 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16365 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16380 */ 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502, 35938,\n' +
'  /* 16395 */ 25502, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 37228, 25502, 25502, 26163, 25502, 25502, 27393,\n' +
'  /* 16410 */ 25502, 25502, 25502, 25502, 27397, 25502, 25502, 50609, 22496, 35843, 50642, 27566, 32264, 50666, 25502,\n' +
'  /* 16425 */ 25502, 50702, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50722, 26122, 28221, 28221,\n' +
'  /* 16440 */ 22706, 22605, 30515, 30515, 30515, 50743, 29597, 29597, 29597, 43762, 32310, 36039, 25502, 43256, 25502,\n' +
'  /* 16455 */ 25502, 25502, 25502, 25502, 25502, 25502, 50778, 25502, 37356, 28221, 50799, 28221, 37652, 28221, 22606,\n' +
'  /* 16470 */ 47452, 30515, 38596, 30515, 40826, 46590, 29597, 29597, 50832, 29597, 48007, 35020, 25502, 25502, 50851,\n' +
'  /* 16485 */ 25502, 25502, 25502, 25502, 25502, 50872, 25502, 25502, 28220, 35327, 28221, 28221, 28221, 22604, 30515,\n' +
'  /* 16500 */ 50893, 30515, 30515, 35845, 29121, 32560, 50915, 29597, 29597, 47506, 35014, 33327, 25502, 25502, 25502,\n' +
'  /* 16515 */ 25502, 25502, 25502, 50932, 27229, 28221, 28221, 50416, 28221, 47884, 30515, 30515, 50953, 30515, 50972,\n' +
'  /* 16530 */ 29597, 29597, 50995, 29597, 34744, 35018, 25502, 25502, 25502, 51016, 25502, 25502, 28219, 28221, 28221,\n' +
'  /* 16545 */ 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 45143, 25502, 25502, 25374, 25502, 19527,\n' +
'  /* 16560 */ 28221, 28221, 48570, 30515, 30515, 32655, 29597, 29597, 34694, 33327, 25502, 51037, 25502, 28218, 40545,\n' +
'  /* 16575 */ 22601, 30515, 51058, 22823, 30442, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597, 35994,\n' +
'  /* 16590 */ 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215, 22608,\n' +
'  /* 16605 */ 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16620 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16635 */ 25502, 25502, 25502, 25502, 25502, 23257, 25502, 25502, 25502, 25502, 36984, 25502, 25502, 25502, 25502,\n' +
'  /* 16650 */ 35938, 51107, 25502, 25502, 25502, 41551, 26062, 44666, 26092, 25502, 25502, 25502, 26163, 25502, 25502,\n' +
'  /* 16665 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843, 30434, 29597, 45898, 29766,\n' +
'  /* 16680 */ 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 26122, 28221,\n' +
'  /* 16695 */ 28221, 28221, 22605, 30515, 30515, 30515, 36820, 29597, 29597, 29597, 29597, 32310, 36039, 25502, 25502,\n' +
'  /* 16710 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221, 28221, 28221, 28221, 28221,\n' +
'  /* 16725 */ 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597, 48007, 35020, 25502, 25502,\n' +
'  /* 16740 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221, 28221, 28221, 28221, 22604,\n' +
'  /* 16755 */ 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961, 35014, 33327, 25502, 25502,\n' +
'  /* 16770 */ 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515,\n' +
'  /* 16785 */ 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502, 25502, 25502, 28219, 28221,\n' +
'  /* 16800 */ 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321, 25502, 25502, 25502, 25502,\n' +
'  /* 16815 */ 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327, 25502, 25502, 25502, 28218,\n' +
'  /* 16830 */ 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217, 28222, 30515, 35063, 29597,\n' +
'  /* 16845 */ 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227, 28224, 35061, 35372, 46215,\n' +
'  /* 16860 */ 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914, 25502, 25502, 25502, 25502,\n' +
'  /* 16875 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 16890 */ 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 19490, 18590, 18588, 18568,\n' +
'  /* 16905 */ 27433, 51092, 46422, 18583, 18578, 27431, 19502, 51077, 51128, 20857, 25502, 25502, 25502, 26163, 25502,\n' +
'  /* 16920 */ 25502, 51144, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27401, 18712, 18277, 24120, 18712, 19414,\n' +
'  /* 16935 */ 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938, 51194,\n' +
'  /* 16950 */ 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20156, 18394, 45409, 18417, 18440, 20367, 18481, 25502,\n' +
'  /* 16965 */ 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728, 18746,\n' +
'  /* 16980 */ 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097, 25502,\n' +
'  /* 16995 */ 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057, 19075,\n' +
'  /* 17010 */ 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306, 21289,\n' +
'  /* 17025 */ 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331, 20690,\n' +
'  /* 17040 */ 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566, 19604,\n' +
'  /* 17055 */ 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859, 19875,\n' +
'  /* 17070 */ 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027, 30197,\n' +
'  /* 17085 */ 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383, 20247,\n' +
'  /* 17100 */ 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387, 19270,\n' +
'  /* 17115 */ 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502, 25502,\n' +
'  /* 17130 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17145 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460, 25502, 25502,\n' +
'  /* 17160 */ 28965, 25502, 35938, 18891, 18900, 51225, 51239, 51248, 42891, 51341, 20857, 25502, 25502, 25502, 26163,\n' +
'  /* 17175 */ 25502, 25502, 51469, 25502, 25502, 25502, 46048, 25502, 25502, 46045, 50593, 18712, 18277, 19262, 18712,\n' +
'  /* 17190 */ 25541, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983, 25938,\n' +
'  /* 17205 */ 18387, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20698, 18394, 45409, 18417, 18440, 20367, 18481,\n' +
'  /* 17220 */ 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726, 18728,\n' +
'  /* 17235 */ 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749, 19097,\n' +
'  /* 17250 */ 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039, 19057,\n' +
'  /* 17265 */ 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091, 18306,\n' +
'  /* 17280 */ 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286, 19331,\n' +
'  /* 17295 */ 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264, 19566,\n' +
'  /* 17310 */ 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840, 19859,\n' +
'  /* 17325 */ 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011, 20027,\n' +
'  /* 17340 */ 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209, 20383,\n' +
'  /* 17355 */ 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070, 19387,\n' +
'  /* 17370 */ 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502, 25502,\n' +
'  /* 17385 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17400 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 23381, 25502,\n' +
'  /* 17415 */ 25502, 25502, 25502, 29248, 20499, 51271, 51304, 51310, 51281, 18922, 40730, 20857, 25502, 25502, 25502,\n' +
'  /* 17430 */ 26163, 25502, 25502, 51326, 25502, 25502, 21325, 25502, 25502, 25502, 46922, 50593, 18712, 18277, 19262,\n' +
'  /* 17445 */ 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25500, 25502, 23391, 25502, 51178, 49187, 18322, 29983,\n' +
'  /* 17460 */ 25938, 51357, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20086, 18394, 45409, 18417, 18440, 20367,\n' +
'  /* 17475 */ 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671, 18708, 20726,\n' +
'  /* 17490 */ 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712, 18449, 18749,\n' +
'  /* 17505 */ 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932, 20595, 19039,\n' +
'  /* 17520 */ 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073, 25597, 19091,\n' +
'  /* 17535 */ 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116, 19253, 19286,\n' +
'  /* 17550 */ 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220, 19543, 43264,\n' +
'  /* 17565 */ 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366, 19775, 19840,\n' +
'  /* 17580 */ 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966, 19995, 20011,\n' +
'  /* 17595 */ 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 20301, 20342, 20358, 51209,\n' +
'  /* 17610 */ 20383, 20247, 51203, 20399, 20415, 20431, 19759, 20459, 20443, 20489, 19751, 18278, 18712, 20515, 25070,\n' +
'  /* 17625 */ 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760, 20772, 25502,\n' +
'  /* 17640 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17655 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 21019, 25502, 25502, 25502, 25502, 26460,\n' +
'  /* 17670 */ 25502, 25502, 25502, 25502, 35938, 25502, 25502, 25502, 25502, 25502, 25502, 19843, 26092, 25502, 25502,\n' +
'  /* 17685 */ 25502, 26163, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 35843,\n' +
'  /* 17700 */ 30434, 29597, 45898, 22893, 25502, 25502, 25502, 25502, 25500, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17715 */ 25502, 25502, 22393, 28221, 28221, 28221, 22605, 30515, 30515, 30515, 22647, 29597, 29597, 29597, 29597,\n' +
'  /* 17730 */ 32310, 36039, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 37356, 28221,\n' +
'  /* 17745 */ 28221, 28221, 28221, 28221, 22606, 30515, 30515, 30515, 30515, 40826, 29597, 29597, 29597, 29597, 29597,\n' +
'  /* 17760 */ 48007, 35020, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 28220, 28221,\n' +
'  /* 17775 */ 28221, 28221, 28221, 22604, 30515, 30515, 30515, 30515, 35845, 29121, 29597, 29597, 29597, 29597, 22961,\n' +
'  /* 17790 */ 35014, 33327, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 27229, 28221, 28221, 28221, 28221, 22604,\n' +
'  /* 17805 */ 30515, 30515, 30515, 30515, 29114, 29597, 29597, 29597, 29597, 48005, 35018, 25502, 25502, 25502, 25502,\n' +
'  /* 17820 */ 25502, 25502, 28219, 28221, 28221, 28223, 30515, 30515, 30515, 38335, 29597, 29597, 29597, 30461, 33321,\n' +
'  /* 17835 */ 25502, 25502, 25502, 25502, 46214, 28221, 28221, 22605, 30515, 30515, 22820, 29597, 29597, 34694, 33327,\n' +
'  /* 17850 */ 25502, 25502, 25502, 28218, 28221, 22601, 30515, 30515, 22823, 29597, 28622, 31922, 49076, 25502, 28217,\n' +
'  /* 17865 */ 28222, 30515, 35063, 29597, 35994, 49079, 46215, 22603, 35062, 22777, 41265, 28219, 35844, 29598, 27227,\n' +
'  /* 17880 */ 28224, 35061, 35372, 46215, 22608, 22825, 46213, 22607, 35370, 28245, 27503, 32650, 31352, 33906, 33914,\n' +
'  /* 17895 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17910 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 17925 */ 25502, 25502, 25502, 30269, 25502, 25502, 26755, 51382, 51387, 51387, 51403, 50471, 51426, 51462, 25502,\n' +
'  /* 17940 */ 25502, 25502, 25502, 25502, 25502, 51469, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 50593, 18712,\n' +
'  /* 17955 */ 18277, 19262, 18712, 19414, 18295, 20314, 47265, 24983, 26882, 25502, 25502, 23391, 25502, 51178, 49187,\n' +
'  /* 17970 */ 18322, 29983, 25938, 51194, 45402, 18410, 18433, 21537, 19297, 18465, 24354, 20156, 18394, 45409, 18417,\n' +
'  /* 17985 */ 18440, 20367, 18481, 25502, 47774, 18517, 25502, 25502, 43229, 18537, 18558, 25502, 25009, 18606, 18671,\n' +
'  /* 18000 */ 18708, 20726, 18728, 18746, 18447, 25563, 24207, 18765, 20148, 18279, 18971, 18710, 20728, 18730, 18712,\n' +
'  /* 18015 */ 18449, 18749, 19097, 25502, 42885, 18791, 26502, 44910, 18840, 18864, 25502, 44519, 18916, 18938, 19932,\n' +
'  /* 18030 */ 20595, 19039, 19057, 19075, 20078, 18961, 24827, 19684, 19697, 18987, 19930, 20593, 19037, 19055, 19073,\n' +
'  /* 18045 */ 25597, 19091, 18306, 21289, 48824, 19113, 19137, 19174, 19198, 22906, 45389, 20529, 25625, 19235, 20116,\n' +
'  /* 18060 */ 19253, 19286, 19331, 20690, 19361, 19403, 20531, 25627, 19237, 20118, 19440, 19477, 43901, 19518, 48220,\n' +
'  /* 18075 */ 19543, 43264, 19566, 19604, 19626, 19648, 19670, 20186, 20624, 19725, 19741, 19610, 19632, 19654, 51366,\n' +
'  /* 18090 */ 19775, 19840, 19859, 19875, 44904, 19925, 19948, 20560, 47818, 19376, 25178, 25244, 19950, 20562, 19966,\n' +
'  /* 18105 */ 19995, 20011, 20027, 30197, 20064, 20102, 20473, 20134, 20172, 20202, 20102, 20216, 20232, 51490, 20342,\n' +
'  /* 18120 */ 20358, 51209, 20383, 20247, 51203, 20399, 51518, 20431, 19759, 20459, 20443, 24975, 19751, 18278, 18712,\n' +
'  /* 18135 */ 20515, 25070, 19387, 19270, 20547, 19451, 19424, 20578, 20611, 20640, 20677, 19979, 20714, 20744, 20760,\n' +
'  /* 18150 */ 20772, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502,\n' +
'  /* 18165 */ 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 25502, 94504, 94504, 90407, 90407,\n' +
'  /* 18180 */ 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504,\n' +
'  /* 18195 */ 94504, 1, 12290, 3, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 94504, 363, 94504, 90407,\n' +
'  /* 18211 */ 94504, 94504, 94504, 94504, 94504, 94504, 94504, 0, 90407, 94504, 94504, 94504, 94504, 94504, 94504,\n' +
'  /* 18226 */ 94504, 69632, 73728, 94504, 94504, 94504, 94504, 94504, 65536, 94504, 0, 0, 2183168, 0, 0, 0, 90407,\n' +
'  /* 18243 */ 94504, 297, 298, 0, 2134016, 301, 302, 0, 0, 0, 0, 0, 0, 302, 302, 302, 302, 0, 0, 0, 302, 0, 0, 0, 302,\n' +
'  /* 18268 */ 69632, 139680, 0, 0, 0, 0, 0, 65536, 0, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18284 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3125248,\n' +
'  /* 18295 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0,\n' +
'  /* 18308 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 2625536, 0, 2699264, 2715648, 0, 0,\n' +
'  /* 18331 */ 2772992, 2805760, 2830336, 0, 2863104, 2920448, 0, 0, 0, 0, 0, 1232, 0, 0, 1104, 0, 0, 0, 1238, 0, 1240,\n' +
'  /* 18352 */ 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 1275, 0, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3199, 0, 0,\n' +
'  /* 18383 */ 0, 0, 0, 0, 2732032, 0, 0, 852, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824,\n' +
'  /* 18399 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536,\n' +
'  /* 18410 */ 2125824, 2723840, 2125824, 2732032, 2772992, 2125824, 2125824, 2805760, 2125824, 2830336, 2125824,\n' +
'  /* 18421 */ 2125824, 2863104, 2125824, 2125824, 2125824, 2920448, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18432 */ 2125824, 2920448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18443 */ 2125824, 2125824, 3117056, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18454 */ 2125824, 2125824, 3125248, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18465 */ 2699264, 2179072, 2715648, 2179072, 2723840, 2179072, 2732032, 2772992, 2179072, 2179072, 2805760,\n' +
'  /* 18476 */ 2179072, 2830336, 2179072, 2179072, 2863104, 2125824, 2457600, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18487 */ 2457600, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 0, 0, 0, 0, 0, 0, 2045, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 18509 */ 0, 2765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 18541 */ 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 385, 0, 0, 2662400, 0, 2813952, 0, 0, 0, 0,\n' +
'  /* 18567 */ 2375680, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 18594 */ 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 2838528, 0, 0, 2838528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 18620 */ 2891776, 0, 0, 0, 0, 0, 1597, 1598, 0, 0, 0, 0, 0, 1604, 0, 0, 0, 0, 0, 0, 2094, 0, 0, 0, 0, 2098, 0, 0,\n' +
'  /* 18648 */ 0, 0, 0, 0, 0, 3173, 3174, 0, 0, 0, 0, 0, 0, 0, 0, 2999, 0, 0, 0, 3003, 0, 0, 0, 0, 0, 0, 0, 2392064,\n' +
'  /* 18676 */ 2412544, 0, 0, 2838528, 0, 0, 0, 0, 0, 2125824, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1190,\n' +
'  /* 18703 */ 0, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18718 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18729 */ 2125824, 2125824, 2662400, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18740 */ 2125824, 2125824, 2801664, 2813952, 2125824, 2838528, 2125824, 2838528, 2125824, 2125824, 2125824,\n' +
'  /* 18751 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 18762 */ 2179072, 2125824, 2125824, 2179072, 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18773 */ 2179072, 2662400, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18784 */ 2179072, 0, 24576, 989, 2125824, 2125824, 2125824, 0, 0, 2600960, 0, 2674688, 0, 2768896, 2777088,\n' +
'  /* 18799 */ 2781184, 0, 2822144, 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 2478, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 1699, 0,\n' +
'  /* 18825 */ 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 2850816, 2867200,\n' +
'  /* 18845 */ 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3055616, 0, 0, 0, 3133440, 0,\n' +
'  /* 18874 */ 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 458, 1147355, 1147355,\n' +
'  /* 18902 */ 1147355, 1147355, 1147355, 1147355, 1147355, 1147355, 1147355, 1147355, 1147355, 1147355, 1147355,\n' +
'  /* 18913 */ 1147355, 1147355, 1147355, 0, 3207168, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168,\n' +
'  /* 18934 */ 1159168, 1159168, 0, 1159168, 3014656, 3207168, 0, 2691072, 0, 0, 3215360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 18955 */ 2097, 0, 0, 0, 0, 0, 2179072, 2461696, 2465792, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18970 */ 2523136, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 18981 */ 2179072, 2179072, 0, 0, 2125824, 2125824, 3100672, 2179072, 2179072, 3133440, 2179072, 2179072, 2179072,\n' +
'  /* 18994 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3207168, 2179072, 0, 0, 0, 0, 0, 1627, 0, 0, 1630,\n' +
'  /* 19011 */ 0, 1632, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 2125824, 2125824,\n' +
'  /* 19039 */ 2641920, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2719744, 2125824, 2125824, 2125824,\n' +
'  /* 19050 */ 2125824, 2125824, 2768896, 2777088, 2797568, 2777088, 2797568, 2822144, 2125824, 2125824, 2125824,\n' +
'  /* 19061 */ 2883584, 2912256, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19072 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 3063808, 2125824, 2125824, 2125824,\n' +
'  /* 19083 */ 2125824, 3100672, 2125824, 2125824, 3133440, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19094 */ 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824,\n' +
'  /* 19105 */ 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 3072000, 2650112, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 19128 */ 0, 0, 796, 822, 0, 822, 817, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2686976, 2736128, 0, 0, 0,\n' +
'  /* 19155 */ 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 208896, 0, 0, 0, 0, 2531328, 2707456, 0, 3190784, 0,\n' +
'  /* 19180 */ 0, 2576384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2420736, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 19210 */ 2387968, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0, 0, 0, 2125824, 2736128,\n' +
'  /* 19237 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2887680, 2125824, 2924544, 2125824,\n' +
'  /* 19248 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3170304, 2125824, 2125824, 3190784,\n' +
'  /* 19259 */ 3194880, 2125824, 2387968, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 2125824,\n' +
'  /* 19271 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3010560, 2125824, 2125824, 2125824, 0, 0,\n' +
'  /* 19284 */ 0, 0, 2453504, 2179072, 2473984, 2482176, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2531328,\n' +
'  /* 19297 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2625536, 2179072,\n' +
'  /* 19308 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 987, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 19320 */ 2126812, 2126812, 2126812, 3011548, 2126812, 2126812, 2126675, 0, 0, 0, 0, 2179072, 2179072, 2605056,\n' +
'  /* 19334 */ 2179072, 2629632, 2179072, 2179072, 2650112, 2179072, 2179072, 2179072, 2707456, 2179072, 2736128,\n' +
'  /* 19345 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3178496, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 19356 */ 2126812, 2126812, 2126812, 2495452, 2126812, 2179072, 3035136, 2179072, 2179072, 3072000, 2179072,\n' +
'  /* 19367 */ 2179072, 3121152, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072, 3170304, 2179072, 2179072,\n' +
'  /* 19378 */ 2514944, 2179072, 2179072, 2179072, 2543616, 2547712, 2179072, 2179072, 2596864, 2179072, 2179072,\n' +
'  /* 19389 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3010560, 2179072, 2179072, 2125824,\n' +
'  /* 19400 */ 2125824, 2502656, 2125824, 2179072, 3190784, 3194880, 2179072, 0, 0, 0, 0, 0, 0, 2387968, 2125824,\n' +
'  /* 19415 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824,\n' +
'  /* 19428 */ 2125824, 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19439 */ 2449408, 3170304, 2125824, 2125824, 3190784, 3194880, 2125824, 2420736, 2125824, 2125824, 2420736,\n' +
'  /* 19450 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2592768,\n' +
'  /* 19461 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 19472 */ 2179072, 0, 0, 2126812, 2126812, 2125824, 2125824, 2125824, 3112960, 3219456, 2179072, 2179072, 3112960,\n' +
'  /* 19485 */ 3219456, 2125824, 2125824, 3112960, 3219456, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 363, 0, 0, 0, 1134592, 0, 0,\n' +
'  /* 19506 */ 0, 1134592, 1134592, 0, 0, 0, 0, 0, 1134592, 1134592, 1134592, 0, 3002368, 0, 0, 3022848, 0, 0, 3145728,\n' +
'  /* 19525 */ 0, 3203072, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 3033, 541, 541, 0, 3084288, 0, 0, 0, 0,\n' +
'  /* 19549 */ 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2165, 0, 0, 0, 0, 0, 0, 0, 0, 2637824, 0, 0, 0, 0, 2621440, 0,\n' +
'  /* 19576 */ 3182592, 2899968, 0, 2961408, 0, 0, 0, 0, 0, 0, 2489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936,\n' +
'  /* 19599 */ 167936, 167936, 167936, 167936, 167936, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312,\n' +
'  /* 19612 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19623 */ 2551808, 2125824, 2125824, 2125824, 2125824, 2125824, 2551808, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19634 */ 2125824, 2637824, 2125824, 2125824, 2125824, 2125824, 2727936, 2752512, 2125824, 2125824, 2125824,\n' +
'  /* 19645 */ 2842624, 2846720, 2125824, 2125824, 2125824, 2125824, 2842624, 2846720, 2125824, 2916352, 2125824,\n' +
'  /* 19656 */ 2125824, 2945024, 2125824, 2125824, 2994176, 2125824, 3002368, 2125824, 2125824, 3022848, 2125824,\n' +
'  /* 19667 */ 3067904, 3084288, 3096576, 2125824, 3022848, 2125824, 3067904, 3084288, 3096576, 2125824, 2125824,\n' +
'  /* 19678 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3223552, 2179072, 2179072, 2179072, 2179072, 2768896,\n' +
'  /* 19689 */ 2777088, 2797568, 2822144, 2179072, 2179072, 2179072, 2883584, 2912256, 2179072, 2179072, 2179072,\n' +
'  /* 19700 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3039232, 2179072, 3063808, 2179072, 2179072,\n' +
'  /* 19711 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3010560, 2179072, 2179072, 2126812,\n' +
'  /* 19722 */ 2126812, 2503644, 2126812, 2846720, 2179072, 2916352, 2179072, 2179072, 2945024, 2179072, 2179072,\n' +
'  /* 19733 */ 2994176, 2179072, 3002368, 2179072, 2179072, 3022848, 2179072, 3067904, 3084288, 3096576, 2179072,\n' +
'  /* 19744 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3223552, 0, 0, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19757 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3137536,\n' +
'  /* 19768 */ 2179072, 2179072, 2498560, 2179072, 2179072, 2179072, 2555904, 2416640, 2125824, 2125824, 2179072,\n' +
'  /* 19779 */ 2179072, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 2510848, 2514944, 0, 0, 0, 0, 0, 1672, 0, 1674, 0, 0, 0,\n' +
'  /* 19801 */ 1676, 0, 753, 0, 0, 0, 0, 0, 778, 779, 0, 0, 783, 784, 0, 680, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 0,\n' +
'  /* 19830 */ 0, 0, 0, 363, 0, 291, 0, 0, 0, 346, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12290,\n' +
'  /* 19858 */ 3, 3178496, 2670592, 0, 2744320, 0, 0, 0, 0, 0, 2928640, 0, 0, 0, 3059712, 0, 2543616, 2666496, 0,\n' +
'  /* 19877 */ 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2957312, 0, 0, 0, 0, 0, 1724, 0, 0, 0, 1728, 1729, 0, 0, 0, 0,\n' +
'  /* 19905 */ 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3211264, 0, 0, 0, 2125824,\n' +
'  /* 19934 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2461696, 2465792, 2125824,\n' +
'  /* 19945 */ 2125824, 2125824, 2125824, 2494464, 2125824, 2125824, 2514944, 2125824, 2125824, 2125824, 2543616,\n' +
'  /* 19956 */ 2547712, 2125824, 2125824, 2596864, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 19967 */ 2125824, 2125824, 2125824, 3178496, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2125824,\n' +
'  /* 19978 */ 2125824, 2179072, 2179072, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3092480, 0, 0,\n' +
'  /* 19991 */ 0, 0, 3026944, 2404352, 2125824, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2932736, 2965504, 0, 0, 3076096, 0,\n' +
'  /* 20012 */ 0, 2695168, 3174400, 2646016, 2613248, 2703360, 0, 0, 0, 0, 2977792, 0, 0, 3047424, 3129344, 0, 2981888,\n' +
'  /* 20029 */ 2396160, 0, 3153920, 0, 0, 0, 2740224, 0, 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 20055 */ 0, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 2396160, 2400256, 2125824, 2125824, 2441216, 2125824, 2469888,\n' +
'  /* 20074 */ 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3207168,\n' +
'  /* 20085 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0,\n' +
'  /* 20098 */ 988, 2125824, 2125824, 2125824, 2125824, 2125824, 2588672, 2125824, 2613248, 2646016, 2125824, 2125824,\n' +
'  /* 20110 */ 2695168, 2756608, 2125824, 2125824, 2125824, 2932736, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20121 */ 3035136, 2125824, 2125824, 3072000, 2125824, 2125824, 3121152, 2125824, 2125824, 3141632, 2125824,\n' +
'  /* 20132 */ 2125824, 2125824, 2179072, 2469888, 2179072, 2179072, 2179072, 2519040, 2179072, 2179072, 2179072,\n' +
'  /* 20143 */ 2179072, 2588672, 2179072, 2613248, 2646016, 2179072, 2179072, 2179072, 2179072, 2801664, 2813952,\n' +
'  /* 20154 */ 2179072, 2838528, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 20165 */ 2179072, 0, 0, 0, 2125824, 2125824, 2125824, 2695168, 2756608, 2179072, 2179072, 2179072, 2932736,\n' +
'  /* 20178 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3129344, 2179072, 2179072, 2179072,\n' +
'  /* 20189 */ 2445312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 20200 */ 2179072, 2551808, 3153920, 3166208, 3174400, 2396160, 2400256, 2125824, 2125824, 2441216, 2125824,\n' +
'  /* 20211 */ 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2125824, 2125824, 3129344,\n' +
'  /* 20222 */ 2125824, 2125824, 3153920, 3166208, 3174400, 2125824, 2125824, 2125824, 2506752, 2506752, 2506752,\n' +
'  /* 20233 */ 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 0, 2486272, 0, 0, 0, 0, 0, 2678784, 2854912,\n' +
'  /* 20248 */ 2969600, 2179072, 3006464, 2179072, 3018752, 2179072, 2179072, 2179072, 3149824, 2125824, 2428928,\n' +
'  /* 20259 */ 2437120, 2125824, 2486272, 2125824, 297, 0, 298, 0, 301, 0, 302, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0,\n' +
'  /* 20280 */ 0, 329, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 69632, 73728, 0, 417, 417, 0, 0, 65536, 417, 3006464, 0, 3108864,\n' +
'  /* 20304 */ 3198976, 0, 0, 3043328, 0, 3149824, 2936832, 0, 2760704, 3181, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024, 0,\n' +
'  /* 20324 */ 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 1720, 0, 0, 0, 1740, 1590, 1590, 1279, 0, 0, 2953216, 0, 0, 2826240,\n' +
'  /* 20347 */ 3158016, 2437120, 0, 2785280, 0, 0, 0, 2428928, 0, 3018752, 2764800, 2572288, 0, 0, 3051520, 2125824,\n' +
'  /* 20363 */ 2428928, 2437120, 2125824, 2486272, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0,\n' +
'  /* 20375 */ 2125824, 2125824, 2179072, 2125824, 2457600, 2125824, 2125824, 2125824, 2428928, 2437120, 2179072,\n' +
'  /* 20386 */ 2486272, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2654208, 2678784,\n' +
'  /* 20397 */ 2760704, 2764800, 3018752, 2125824, 2125824, 2125824, 3149824, 2785280, 2785280, 2125824, 2125824,\n' +
'  /* 20408 */ 3051520, 2179072, 3051520, 2125824, 3051520, 0, 2490368, 2498560, 0, 0, 0, 0, 2875392, 0, 0, 0, 3181, 0,\n' +
'  /* 20426 */ 0, 2834432, 0, 3227648, 2568192, 0, 0, 0, 0, 2564096, 0, 2940928, 2125824, 2125824, 2498560, 2125824,\n' +
'  /* 20442 */ 2125824, 2125824, 2555904, 2564096, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20453 */ 2125824, 2125824, 3137536, 2125824, 2940928, 2940928, 2564096, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 20464 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3137536, 2125824, 2125824, 2498560, 2125824, 2125824,\n' +
'  /* 20475 */ 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 3153920, 3166208, 3174400, 2396160, 2400256,\n' +
'  /* 20486 */ 2179072, 2179072, 2441216, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 20507 */ 1159168, 0, 1159168, 0, 0, 0, 0, 1159168, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 0, 0, 0, 0, 2990080,\n' +
'  /* 20529 */ 2125824, 2125824, 2125824, 2125824, 2453504, 2125824, 2473984, 2482176, 2125824, 2125824, 2125824,\n' +
'  /* 20540 */ 2125824, 2125824, 2125824, 2531328, 2125824, 2125824, 2125824, 0, 0, 0, 2592768, 0, 0, 0, 2125824,\n' +
'  /* 20555 */ 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20566 */ 2928640, 2125824, 2125824, 2125824, 2998272, 2125824, 2125824, 2125824, 2125824, 3059712, 2125824,\n' +
'  /* 20577 */ 2125824, 0, 2535424, 3031040, 0, 0, 0, 2859008, 0, 0, 2125824, 2449408, 2125824, 2535424, 2125824,\n' +
'  /* 20592 */ 2609152, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20603 */ 2125824, 2125824, 2125824, 2600960, 2125824, 2125824, 2125824, 2125824, 2859008, 2125824, 2125824,\n' +
'  /* 20614 */ 2125824, 3031040, 2179072, 2449408, 2179072, 2535424, 2179072, 2609152, 2179072, 2859008, 2179072,\n' +
'  /* 20625 */ 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072, 2179072, 2179072, 2727936, 2752512,\n' +
'  /* 20636 */ 2179072, 2179072, 2179072, 2842624, 3031040, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152,\n' +
'  /* 20647 */ 2125824, 2859008, 2125824, 2125824, 2125824, 3031040, 2125824, 2527232, 0, 0, 0, 0, 0, 2068, 0, 0, 0, 0,\n' +
'  /* 20665 */ 0, 0, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20687 */ 2125824, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2887680, 2179072, 2924544,\n' +
'  /* 20698 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0, 989,\n' +
'  /* 20711 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3026944, 2404352, 2179072, 2179072,\n' +
'  /* 20722 */ 2179072, 2179072, 3026944, 2404352, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2584576,\n' +
'  /* 20733 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2617344, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 20744 */ 3026944, 2539520, 0, 2949120, 0, 2125824, 2658304, 2973696, 2125824, 2179072, 2658304, 2973696, 2179072,\n' +
'  /* 20757 */ 2125824, 2658304, 2973696, 2125824, 2711552, 0, 2560000, 2125824, 2560000, 2179072, 2560000, 2125824, 0,\n' +
'  /* 20770 */ 2125824, 2179072, 2125824, 0, 2125824, 2179072, 2125824, 2985984, 2985984, 2985984, 2985984, 0, 0, 0, 0,\n' +
'  /* 20785 */ 0, 0, 0, 0, 541, 541, 541, 541, 3032, 541, 541, 541, 111051, 111051, 111051, 111051, 111051, 111051,\n' +
'  /* 20803 */ 111051, 111051, 111051, 111051, 111051, 111051, 111051, 111051, 111051, 111051, 459, 459, 111051, 459,\n' +
'  /* 20817 */ 459, 459, 459, 459, 459, 459, 459, 459, 459, 111051, 111051, 111051, 111051, 111051, 111051, 111051,\n' +
'  /* 20833 */ 111051, 111051, 459, 111051, 111051, 111051, 111051, 111051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 0,\n' +
'  /* 20855 */ 0, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 297, 298, 0, 2134016, 301, 302, 0, 0, 0, 0, 0, 0, 2503, 0, 0, 0, 0, 0,\n' +
'  /* 20883 */ 0, 0, 2510, 0, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 1064, 2125824, 2125824, 2125824,\n' +
'  /* 20897 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856,\n' +
'  /* 20920 */ 249856, 249856, 249856, 0, 301, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 332, 0, 0, 301, 0,\n' +
'  /* 20946 */ 0, 0, 301, 119196, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0,\n' +
'  /* 20975 */ 0, 371, 0, 0, 301, 0, 0, 0, 0, 0, 0, 301, 301, 301, 301, 0, 0, 0, 301, 0, 0, 0, 2424832, 2433024, 0, 0,\n' +
'  /* 21001 */ 2457600, 0, 0, 0, 0, 301, 301, 301, 301, 301, 301, 301, 301, 0, 0, 0, 301, 301, 1, 12290, 3, 0, 0, 0, 0,\n' +
'  /* 21026 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 321, 322, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 33408, 298, 0, 2134016, 49796, 302,\n' +
'  /* 21052 */ 0, 0, 0, 0, 0, 0, 2518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0,\n' +
'  /* 21083 */ 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2058, 0, 2059, 0, 0, 0, 0, 2125824,\n' +
'  /* 21112 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 297,\n' +
'  /* 21127 */ 2105630, 12290, 3, 0, 0, 292, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21156 */ 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880,\n' +
'  /* 21178 */ 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 301, 0, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880,\n' +
'  /* 21204 */ 122880, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 122880, 122880,\n' +
'  /* 21232 */ 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880,\n' +
'  /* 21251 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21271 */ 0, 0, 0, 0, 323, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 2605056, 0, 0, 0, 0,\n' +
'  /* 21301 */ 2887680, 0, 2924544, 0, 1085, 1089, 0, 0, 1093, 1097, 0, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0,\n' +
'  /* 21322 */ 0, 0, 2109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2392064, 2412544, 0, 0,\n' +
'  /* 21349 */ 2838528, 0, 0, 0, 0, 0, 2125824, 1742, 0, 131072, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 131072, 0,\n' +
'  /* 21371 */ 131072, 0, 131072, 0, 0, 0, 0, 0, 0, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0,\n' +
'  /* 21390 */ 0, 131072, 131072, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 135168, 135168, 0, 0, 0, 0, 0,\n' +
'  /* 21417 */ 0, 0, 0, 0, 0, 0, 0, 0, 337, 338, 339, 0, 0, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168,\n' +
'  /* 21439 */ 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 302, 0, 0, 0, 0, 135168, 135168, 135168,\n' +
'  /* 21465 */ 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 135168, 135168, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21487 */ 0, 0, 118784, 297, 0, 0, 2183168, 0, 0, 0, 0, 0, 641, 642, 0, 2134016, 645, 646, 0, 0, 0, 0, 0, 0, 2737,\n' +
'  /* 21512 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 396, 0, 0, 0, 322, 0, 2732032, 0, 0, 1280, 2125824, 2125824, 2125824,\n' +
'  /* 21535 */ 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072,\n' +
'  /* 21546 */ 2179072, 2424832, 2433024, 2179072, 2179072, 2179072, 2179072, 0, 302, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21565 */ 0, 0, 0, 0, 384, 336, 0, 302, 302, 302, 302, 302, 302, 302, 302, 0, 0, 0, 302, 302, 1, 12290, 3, 0, 0, 0,\n' +
'  /* 21591 */ 0, 0, 0, 0, 0, 0, 0, 0, 139264, 298, 0, 0, 2183168, 0, 0, 0, 0, 0, 297, 33411, 0, 2134016, 301, 49799, 0,\n' +
'  /* 21616 */ 0, 0, 0, 0, 0, 2762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0,\n' +
'  /* 21647 */ 0, 0, 0, 0, 0, 0, 61440, 0, 0, 298, 0, 0, 0, 302, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21673 */ 2122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3175, 0, 0, 0, 0, 0, 0, 299, 299, 143729, 299, 299, 299, 143729, 69632,\n' +
'  /* 21698 */ 73728, 299, 299, 143659, 299, 299, 65536, 299, 299, 0, 0, 299, 299, 143659, 299, 299, 299, 299, 299, 299,\n' +
'  /* 21718 */ 299, 299, 299, 364, 299, 0, 143659, 299, 299, 299, 299, 299, 299, 299, 143659, 143659, 143659, 143659,\n' +
'  /* 21736 */ 143659, 143659, 143659, 143659, 299, 299, 299, 143659, 369, 299, 299, 299, 299, 299, 299, 299, 299, 299,\n' +
'  /* 21754 */ 299, 299, 299, 299, 299, 299, 299, 143659, 299, 299, 143659, 299, 299, 143659, 143659, 143659, 143659,\n' +
'  /* 21771 */ 143659, 143659, 0, 0, 299, 299, 299, 299, 299, 299, 299, 299, 299, 143659, 299, 143659, 143659, 143659,\n' +
'  /* 21789 */ 143659, 299, 299, 299, 143659, 299, 143659, 143659, 143659, 143659, 143659, 143659, 143729, 143659,\n' +
'  /* 21803 */ 143659, 143659, 143729, 143659, 143659, 143659, 143659, 143659, 143659, 143659, 143659, 143659, 143659,\n' +
'  /* 21816 */ 143659, 143659, 143659, 143659, 143659, 143659, 299, 299, 143659, 299, 299, 299, 299, 299, 299, 299, 299,\n' +
'  /* 21833 */ 299, 299, 299, 143729, 299, 299, 299, 299, 143729, 143729, 143729, 143729, 143729, 143729, 143729, 143729,\n' +
'  /* 21849 */ 143659, 143659, 143659, 143659, 143659, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 90407, 90407, 90407, 90407, 0,\n' +
'  /* 21869 */ 94504, 2200257, 2200257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 307, 0, 0, 0, 155648, 155648, 0,\n' +
'  /* 21894 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,\n' +
'  /* 21907 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 21925 */ 155648, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2467, 0, 0,\n' +
'  /* 21954 */ 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 155648, 155648, 0, 155648, 0, 12290, 3, 0, 0, 2183168,\n' +
'  /* 21976 */ 126976, 0, 0, 0, 0, 297, 298, 0, 2134016, 301, 302, 0, 0, 0, 0, 0, 0, 2791, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 22003 */ 349, 350, 351, 0, 0, 0, 0, 0, 0, 0, 25160, 0, 0, 0, 0, 25160, 25160, 25160, 25160, 159744, 159744, 25160,\n' +
'  /* 22025 */ 159744, 163840, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 25160, 0, 0, 0, 159744, 159744,\n' +
'  /* 22042 */ 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744,\n' +
'  /* 22061 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744, 159744, 25160,\n' +
'  /* 22074 */ 25160, 25160, 25160, 25160, 25160, 25160, 25160, 159744, 159744, 159744, 25160, 25160, 1, 12290, 3, 0, 0,\n' +
'  /* 22091 */ 0, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 167936, 167936,\n' +
'  /* 22117 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,\n' +
'  /* 22130 */ 167936, 1, 12290, 3, 167936, 167936, 167936, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936,\n' +
'  /* 22151 */ 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2492, 0, 0, 0, 0, 0, 172032, 172032, 0,\n' +
'  /* 22174 */ 172032, 0, 0, 172032, 0, 172032, 0, 172032, 0, 0, 0, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 22198 */ 172032, 0, 0, 0, 0, 0, 0, 172032, 0, 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032,\n' +
'  /* 22216 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,\n' +
'  /* 22229 */ 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2507, 0, 0, 0, 0, 0, 1, 287, 3, 0, 0, 0,\n' +
'  /* 22255 */ 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2750, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128,\n' +
'  /* 22278 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 1, 0, 3, 176128, 176128,\n' +
'  /* 22293 */ 176128, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0,\n' +
'  /* 22313 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 78113, 78113, 291, 0, 639, 0, 0, 0, 297, 298, 0, 2134016,\n' +
'  /* 22340 */ 301, 302, 0, 0, 0, 0, 0, 0, 2973, 2974, 0, 0, 0, 0, 2979, 0, 0, 0, 0, 0, 0, 1673, 0, 0, 1675, 0, 0, 0, 0,\n' +
'  /* 22369 */ 1677, 1678, 1164, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 305, 0, 0, 0, 0, 0, 0, 0, 852, 541,\n' +
'  /* 22398 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 902, 541, 541, 541, 1691, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 22422 */ 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 2093, 0, 0,\n' +
'  /* 22453 */ 2095, 0, 0, 0, 0, 0, 0, 0, 0, 111051, 111051, 111051, 111051, 111051, 1, 12290, 3, 0, 541, 541, 541, 541,\n' +
'  /* 22475 */ 541, 2178, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 3411, 563, 563, 3413, 563, 563, 541, 541,\n' +
'  /* 22495 */ 2190, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 912, 541, 541, 0, 0, 0, 585, 585,\n' +
'  /* 22517 */ 585, 585, 585, 2336, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 2017, 585, 541, 563, 585, 541, 585,\n' +
'  /* 22538 */ 585, 585, 585, 2348, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3126, 585, 585, 585, 563,\n' +
'  /* 22559 */ 563, 2612, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2608, 563, 585, 585, 585,\n' +
'  /* 22580 */ 585, 2674, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3276, 585, 585, 585, 541, 2847,\n' +
'  /* 22600 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 22621 */ 563, 563, 563, 2969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 563, 563, 563, 563, 563, 3080,\n' +
'  /* 22647 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 989, 585, 585, 585, 585, 585, 585, 585, 3120, 585,\n' +
'  /* 22669 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1495, 585, 585, 585, 585, 0, 0, 3192, 0, 0, 0, 0, 0, 0,\n' +
'  /* 22693 */ 0, 0, 0, 0, 0, 0, 0, 692, 693, 0, 541, 541, 3216, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 22717 */ 541, 541, 1354, 541, 541, 3235, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3243, 563, 563, 563, 563,\n' +
'  /* 22737 */ 563, 563, 563, 2879, 2880, 563, 563, 563, 563, 2883, 563, 563, 563, 563, 563, 585, 3259, 585, 585, 585,\n' +
'  /* 22757 */ 3262, 585, 585, 585, 585, 585, 585, 585, 585, 1934, 585, 585, 585, 585, 1940, 585, 585, 585, 585, 3270,\n' +
'  /* 22777 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 563, 541, 3330, 541, 541, 541,\n' +
'  /* 22798 */ 3331, 3332, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 2593, 563, 563, 563, 563, 3349, 3350,\n' +
'  /* 22818 */ 563, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 22839 */ 541, 0, 0, 0, 3392, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 3400, 541, 541, 541, 541, 2589, 541, 541,\n' +
'  /* 22862 */ 541, 563, 563, 563, 563, 563, 563, 563, 563, 1411, 563, 563, 563, 563, 563, 563, 563, 585, 3430, 585, 585,\n' +
'  /* 22883 */ 585, 585, 585, 585, 3436, 585, 585, 585, 585, 3440, 541, 563, 563, 563, 563, 563, 0, 585, 585, 585, 585,\n' +
'  /* 22904 */ 585, 78113, 0, 0, 0, 0, 0, 0, 0, 3121152, 3141632, 0, 0, 0, 2924544, 0, 2682880, 0, 0, 0, 3455, 541, 541,\n' +
'  /* 22927 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1775, 541, 541, 541, 3470, 563, 563, 563, 563, 563,\n' +
'  /* 22948 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3258, 3485, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 22969 */ 585, 585, 585, 585, 585, 541, 541, 541, 563, 585, 585, 585, 585, 3590, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 22990 */ 585, 541, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0, 815, 816, 0, 0, 0, 0, 816, 0, 0,\n' +
'  /* 23019 */ 815, 0, 0, 0, 0, 0, 760, 0, 0, 824, 184936, 184936, 184936, 184936, 184936, 184936, 184936, 184936, 0, 0,\n' +
'  /* 23039 */ 0, 184936, 184936, 1, 12290, 3, 0, 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 2455, 0, 0, 0,\n' +
'  /* 23065 */ 0, 0, 0, 0, 0, 0, 2153, 0, 0, 0, 0, 0, 0, 78113, 78113, 291, 0, 0, 0, 0, 0, 297, 298, 0, 2134016, 301,\n' +
'  /* 23091 */ 302, 0, 0, 0, 0, 0, 0, 2986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 0, 0, 385, 0, 0, 0, 0, 2134761, 0,\n' +
'  /* 23121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 541, 541, 541, 541, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 23152 */ 0, 0, 0, 0, 0, 352, 353, 354, 355, 192972, 192972, 192972, 192972, 192972, 192972, 192972, 192972, 192972,\n' +
'  /* 23170 */ 192972, 192972, 192972, 192972, 192972, 192972, 192972, 0, 0, 1, 12290, 3, 192972, 192972, 192972, 0, 0,\n' +
'  /* 23187 */ 192972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 335, 0, 0, 0, 0, 192972, 0, 192972, 192972, 192972, 192972,\n' +
'  /* 23210 */ 192972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2779, 0, 0, 0, 2783, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 23241 */ 0, 0, 1179, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 0, 405, 405, 1, 12290, 3, 78113, 291, 0, 0, 0,\n' +
'  /* 23265 */ 0, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 0, 78113, 78113, 291, 0, 0, 0, 0, 0, 297, 298, 0, 300, 301, 302, 0,\n' +
'  /* 23293 */ 0, 0, 0, 0, 0, 3026, 0, 541, 541, 541, 541, 541, 541, 541, 541, 2181, 541, 541, 541, 541, 541, 541, 0, 0,\n' +
'  /* 23317 */ 0, 745, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 1570, 0, 0, 0, 1576, 0, 0, 0, 1582, 0, 0,\n' +
'  /* 23347 */ 0, 0, 0, 0, 0, 0, 541, 3029, 541, 541, 541, 541, 541, 541, 0, 0, 0, 1189, 1189, 0, 0, 0, 1193, 1675, 0, 0,\n' +
'  /* 23373 */ 0, 0, 0, 0, 0, 0, 2138112, 1188, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 363, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 0,\n' +
'  /* 23401 */ 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2447, 0, 1570, 2036, 0, 0, 0, 0,\n' +
'  /* 23432 */ 1576, 2038, 0, 0, 0, 0, 1582, 2040, 0, 0, 0, 0, 0, 2120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 1619,\n' +
'  /* 23460 */ 0, 0, 585, 2034, 0, 2036, 0, 2038, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 563, 563,\n' +
'  /* 23488 */ 563, 563, 2325, 2651, 0, 0, 0, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2341, 585, 2529,\n' +
'  /* 23510 */ 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2186, 0, 305, 0, 305, 0, 0, 0, 0,\n' +
'  /* 23534 */ 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 3182, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 0, 1607, 0, 0, 0, 0, 0, 0,\n' +
'  /* 23565 */ 1279, 0, 0, 0, 0, 204800, 204800, 0, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800,\n' +
'  /* 23581 */ 204800, 204800, 204800, 204800, 204800, 205105, 204800, 204800, 205104, 205105, 204800, 205104, 205104,\n' +
'  /* 23594 */ 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2977, 0, 0, 0, 0, 0, 0, 0, 2183806, 0, 0, 0, 0, 0, 297, 298,\n' +
'  /* 23622 */ 151552, 2134016, 301, 302, 0, 212992, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1195, 2126675,\n' +
'  /* 23646 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 2126812, 2126812, 2126812, 2126812, 2126812, 0, 0, 0, 0,\n' +
'  /* 23661 */ 0, 0, 0, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 2200258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307,\n' +
'  /* 23689 */ 306, 2732032, 0, 0, 852, 2126675, 2126675, 2126675, 2425683, 2433875, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 23703 */ 2126675, 2126675, 2126675, 2179072, 2179072, 2179072, 2424832, 2433024, 2179072, 2179072, 2179072,\n' +
'  /* 23714 */ 2179072, 2126675, 2724691, 2126675, 2732883, 2773843, 2126675, 2126675, 2806611, 2126675, 2831187,\n' +
'  /* 23725 */ 2126675, 2126675, 2863955, 2126675, 2126675, 2126675, 2126675, 2126675, 3035987, 2126675, 2126675,\n' +
'  /* 23736 */ 3072851, 2126675, 2126675, 3122003, 2126675, 2126675, 3142483, 2126675, 2921299, 2126675, 2126675,\n' +
'  /* 23747 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 3117907, 2126675,\n' +
'  /* 23758 */ 2126675, 2126675, 2126675, 2126675, 3130195, 2126675, 2126675, 3154771, 3167059, 3175251, 2396160,\n' +
'  /* 23769 */ 2400256, 2179072, 2179072, 2441216, 2425820, 2434012, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 23780 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2626524, 2806748, 2126812,\n' +
'  /* 23791 */ 2831324, 2126812, 2126812, 2864092, 2126812, 2126812, 2126812, 2921436, 2126812, 2126812, 2126812,\n' +
'  /* 23802 */ 2126812, 2126812, 2126812, 2126812, 2888668, 2126812, 2925532, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 23813 */ 2126812, 2126812, 2126812, 3126236, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 23824 */ 2126812, 2126675, 2126675, 2126675, 2126675, 2126812, 2126675, 2179072, 2126812, 2126675, 2126675,\n' +
'  /* 23835 */ 2457600, 2179072, 2179072, 2179072, 2179072, 2458588, 2126812, 2126812, 2126812, 2126812, 2183168, 0, 0,\n' +
'  /* 23848 */ 0, 0, 0, 0, 0, 2151, 0, 0, 0, 2151, 0, 0, 2156, 2157, 2126675, 2839379, 2126675, 2126675, 2126675,\n' +
'  /* 23867 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 23878 */ 2126675, 2126675, 2126812, 2409436, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 23889 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126675, 2126812,\n' +
'  /* 23900 */ 2663388, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 23911 */ 2802652, 2814940, 2126812, 2839516, 0, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 23923 */ 2126675, 2126675, 2462547, 2466643, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2626387,\n' +
'  /* 23934 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2700115, 2126675, 2716499, 2642771, 2126675,\n' +
'  /* 23945 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2720595, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 23956 */ 2769747, 2777939, 2798419, 2822995, 2126675, 2126675, 2126675, 2884435, 2913107, 2126675, 2126675,\n' +
'  /* 23967 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 3138387, 2179072, 2179072,\n' +
'  /* 23978 */ 2498560, 2179072, 2179072, 2179072, 2555904, 2126675, 2126675, 3040083, 2126675, 3064659, 2126675,\n' +
'  /* 23989 */ 2126675, 2126675, 2126675, 3101523, 2126675, 2126675, 3134291, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24000 */ 2454355, 2126675, 2474835, 2483027, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2532179,\n' +
'  /* 24011 */ 2126675, 0, 0, 0, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24024 */ 2462684, 2466780, 2126812, 2126812, 2126812, 2126812, 2606044, 2126812, 2630620, 2126812, 2126812,\n' +
'  /* 24035 */ 2651100, 2126812, 2126812, 2126812, 2708444, 2126812, 2737116, 2126812, 2126812, 2642908, 2126812,\n' +
'  /* 24046 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2720732, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24057 */ 2769884, 2778076, 2798556, 2823132, 2126812, 2126812, 2126812, 2884572, 2913244, 2126812, 2126812,\n' +
'  /* 24068 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2655196, 2679772, 2761692, 2765788, 2855900,\n' +
'  /* 24079 */ 2970588, 2126812, 3007452, 2126812, 2126675, 2736979, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24090 */ 2126675, 2126675, 2888531, 2126675, 2925395, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24101 */ 3179347, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2494464, 2126675,\n' +
'  /* 24112 */ 2126675, 3171155, 2126675, 2126675, 3191635, 3195731, 2126675, 2387968, 2179072, 2179072, 2179072,\n' +
'  /* 24123 */ 2179072, 2179072, 2179072, 2179072, 0, 2125824, 2126813, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 24135 */ 2125824, 2179072, 3190784, 3194880, 2179072, 0, 0, 0, 0, 0, 0, 2388956, 2126812, 2126812, 2126812,\n' +
'  /* 24150 */ 2126812, 2126812, 3118044, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24161 */ 2126812, 2126812, 3208156, 2126812, 2126812, 2126812, 2126812, 2126675, 2126675, 2126675, 2126812,\n' +
'  /* 24172 */ 2126812, 2454492, 2126812, 2474972, 2483164, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24183 */ 2532316, 2126812, 2126812, 2126812, 2126675, 2126675, 2126675, 2126675, 0, 2126812, 2126675, 2179072,\n' +
'  /* 24195 */ 2126812, 2458451, 2126675, 2126675, 2126675, 2126675, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24206 */ 2592768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24217 */ 2179072, 2179072, 2584576, 2179072, 2179072, 2179072, 3171292, 2126812, 2126812, 3191772, 3195868,\n' +
'  /* 24228 */ 2126812, 2421724, 2126812, 2126812, 2421587, 2126675, 2126675, 2126675, 2126812, 2126675, 2179072,\n' +
'  /* 24239 */ 2126812, 2126675, 2126675, 2126675, 2126675, 2179072, 2179072, 2179072, 2179072, 2126812, 2126812,\n' +
'  /* 24250 */ 2126812, 2126812, 0, 0, 0, 0, 0, 2126812, 2126675, 2126675, 3113811, 3220307, 2179072, 2179072, 3112960,\n' +
'  /* 24265 */ 3219456, 2126812, 2126812, 3113948, 3220444, 0, 0, 0, 0, 0, 0, 305, 0, 204800, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 24287 */ 655, 0, 0, 0, 0, 0, 0, 0, 0, 717, 0, 0, 0, 721, 0, 0, 724, 0, 0, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24310 */ 2126675, 2446163, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2179072,\n' +
'  /* 24321 */ 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24332 */ 2179072, 2179072, 2179072, 2179072, 0, 1920, 2125824, 2125824, 2126675, 3023699, 2126675, 3068755,\n' +
'  /* 24344 */ 3085139, 3097427, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 3224403, 2179072,\n' +
'  /* 24355 */ 2179072, 2179072, 2920448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24366 */ 2179072, 2179072, 2179072, 3117056, 3084288, 3096576, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24377 */ 2179072, 2179072, 3223552, 0, 0, 2126812, 2126812, 2126812, 2126812, 2126812, 3130332, 2126812, 2126812,\n' +
'  /* 24390 */ 3154908, 3167196, 3175388, 2126812, 2126675, 2126675, 2507740, 2507603, 2126812, 2446300, 2126812,\n' +
'  /* 24401 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2552796,\n' +
'  /* 24412 */ 2126812, 2126812, 2126812, 2126812, 2929628, 2126812, 2126812, 2126812, 2999260, 2126812, 2126812,\n' +
'  /* 24423 */ 2126812, 2126812, 3060700, 2126812, 2126812, 2126812, 2126812, 3040220, 2126812, 3064796, 2126812,\n' +
'  /* 24434 */ 2126812, 2126812, 2126812, 3101660, 2126812, 2126812, 3134428, 2126812, 2917340, 2126812, 2126812,\n' +
'  /* 24445 */ 2946012, 2126812, 2126812, 2995164, 2126812, 3003356, 2126812, 2126812, 3023836, 2126812, 3068892,\n' +
'  /* 24456 */ 3085276, 3097564, 2417628, 2126675, 2126675, 2179072, 2179072, 2126812, 2126812, 0, 0, 0, 0, 0, 0,\n' +
'  /* 24471 */ 2510848, 2514944, 0, 0, 0, 0, 0, 2136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 380, 382, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 24499 */ 3211264, 0, 0, 0, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24512 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2495315, 2126675, 2126675, 2515795, 2126675, 2126675,\n' +
'  /* 24523 */ 2126675, 2544467, 2548563, 2126675, 2126675, 2597715, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24534 */ 2126675, 3208019, 2126675, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24545 */ 2179072, 2179072, 0, 0, 989, 2126812, 2126812, 2126812, 2126812, 2515932, 2126812, 2126812, 2126812,\n' +
'  /* 24558 */ 2544604, 2548700, 2126812, 2126812, 2597852, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24569 */ 2126812, 3224540, 2126812, 2896860, 2126675, 2896723, 2126675, 2126812, 2126675, 2179072, 2126812,\n' +
'  /* 24580 */ 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2932736, 2965504, 0, 0, 3076096, 0, 0, 0, 2397011, 2401107, 2126675,\n' +
'  /* 24601 */ 2126675, 2442067, 2126675, 2470739, 2126675, 2126675, 2126675, 2519891, 2126675, 2126675, 2126675,\n' +
'  /* 24612 */ 2552659, 2126675, 2126675, 2126675, 2126675, 2126675, 2638675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24623 */ 2728787, 2753363, 2126675, 2126675, 2589523, 2126675, 2614099, 2646867, 2126675, 2126675, 2696019,\n' +
'  /* 24634 */ 2757459, 2126675, 2126675, 2126675, 2933587, 2126675, 2126675, 2126675, 2663251, 2126675, 2126675,\n' +
'  /* 24645 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2802515, 2814803, 3153920,\n' +
'  /* 24656 */ 3166208, 3174400, 2397148, 2401244, 2126812, 2126812, 2442204, 2126812, 2470876, 2126812, 2126812,\n' +
'  /* 24667 */ 2126812, 2520028, 2126812, 2126812, 2126812, 2126812, 3179484, 2126812, 2126675, 2126675, 2126812,\n' +
'  /* 24678 */ 2126675, 2179072, 2126675, 2126675, 2179072, 2179072, 2126812, 2528220, 2126812, 2126812, 2126812,\n' +
'  /* 24689 */ 2126812, 2126812, 3093331, 0, 0, 0, 0, 3026944, 2405203, 2126812, 2126812, 2589660, 2126812, 2614236,\n' +
'  /* 24703 */ 2647004, 2126812, 2126812, 2696156, 2757596, 2126812, 2126812, 2126812, 2933724, 2126812, 2126812,\n' +
'  /* 24714 */ 2126812, 2638812, 2126812, 2126812, 2126812, 2126812, 2728924, 2753500, 2126812, 2126812, 2126812,\n' +
'  /* 24725 */ 2843612, 2847708, 2126812, 2506752, 2126675, 2126675, 2179072, 2179072, 2126812, 2126812, 0, 2486272, 0,\n' +
'  /* 24738 */ 0, 0, 0, 0, 2678784, 2854912, 2969600, 2179072, 3006464, 2179072, 3018752, 2179072, 2179072, 2179072,\n' +
'  /* 24752 */ 3149824, 2126812, 2429916, 2438108, 2126812, 2487260, 2126812, 2126675, 2126675, 2126675, 2126675, 0, 0,\n' +
'  /* 24765 */ 0, 2126812, 2126675, 2179072, 2126812, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2605907,\n' +
'  /* 24777 */ 2126675, 2630483, 2126675, 2126675, 2650963, 2126675, 2126675, 2126675, 2708307, 2572288, 0, 0, 3051520,\n' +
'  /* 24790 */ 2126675, 2429779, 2437971, 2126675, 2487123, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 24801 */ 2126675, 2585427, 2126675, 2126675, 2126675, 2126675, 2126675, 2618195, 2126675, 2126675, 2126675,\n' +
'  /* 24812 */ 2126675, 2655059, 2679635, 2761555, 2765651, 2855763, 2970451, 2126675, 3007315, 2126675, 3019603,\n' +
'  /* 24823 */ 2126675, 2126675, 2126675, 3150675, 2179072, 2179072, 2600960, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24834 */ 2641920, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2719744, 2179072, 2126812, 2126812,\n' +
'  /* 24845 */ 2126812, 2126812, 2126812, 2593756, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24856 */ 2126675, 2449408, 3019740, 2126812, 2126812, 2126812, 3150812, 2786268, 2786131, 2126675, 2126675,\n' +
'  /* 24867 */ 3052371, 2179072, 3051520, 2126812, 3052508, 0, 2490368, 0, 0, 0, 0, 2564096, 0, 2940928, 2126675,\n' +
'  /* 24882 */ 2126675, 2499411, 2126675, 2126675, 2126675, 2556755, 2564947, 2126675, 2126675, 2179072, 2179072,\n' +
'  /* 24893 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24904 */ 2179072, 2179072, 2564096, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 24915 */ 2179072, 3137536, 2126812, 2126812, 2499548, 2126812, 2126812, 2126812, 3036124, 2126812, 2126812,\n' +
'  /* 24926 */ 3072988, 2126812, 2126812, 3122140, 2126812, 2126812, 3142620, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24937 */ 2585564, 2126812, 2126812, 2126812, 2126812, 2126812, 2618332, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24948 */ 2126812, 2126812, 2700252, 2126812, 2716636, 2126812, 2724828, 2126812, 2733020, 2773980, 2126812,\n' +
'  /* 24959 */ 2126812, 2126812, 2556892, 2565084, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812, 2126812,\n' +
'  /* 24970 */ 2126812, 2126812, 3138524, 2126675, 2941779, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 0, 0, 0, 0, 0,\n' +
'  /* 24989 */ 0, 0, 0, 2904064, 2908160, 0, 0, 0, 0, 0, 2941916, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 3181, 0, 0, 0, 0,\n' +
'  /* 25013 */ 0, 0, 0, 0, 2408448, 0, 0, 2584576, 0, 0, 0, 0, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25038 */ 2990080, 2126675, 2126675, 2126675, 2843475, 2847571, 2126675, 2917203, 2126675, 2126675, 2945875,\n' +
'  /* 25049 */ 2126675, 2126675, 2995027, 2126675, 3003219, 2126675, 2503507, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 25060 */ 2126675, 2126675, 2126675, 2126675, 2126675, 3011411, 2126675, 2126675, 2179072, 2179072, 2502656,\n' +
'  /* 25071 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3010560, 2125824,\n' +
'  /* 25082 */ 2125824, 2179072, 2179072, 2502656, 0, 0, 0, 2592768, 0, 0, 0, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 25097 */ 2126675, 2593619, 2126675, 2126675, 2126675, 2409299, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 25108 */ 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 3126099, 2126675, 2126675, 2126675,\n' +
'  /* 25119 */ 2126675, 2126675, 2126675, 0, 2535424, 3031040, 0, 0, 0, 2859008, 0, 0, 2126675, 2450259, 2126675,\n' +
'  /* 25134 */ 2536275, 2126675, 2610003, 2126675, 2126675, 2523987, 2126675, 2126675, 2126675, 2126675, 2126675,\n' +
'  /* 25145 */ 2126675, 2126675, 2126675, 2601811, 2126675, 2126675, 2126675, 2126675, 2126675, 2126675, 2929491,\n' +
'  /* 25156 */ 2126675, 2126675, 2126675, 2999123, 2126675, 2126675, 2126675, 2126675, 3060563, 2859859, 2126675,\n' +
'  /* 25167 */ 2126675, 2126675, 3031891, 2179072, 2449408, 2179072, 2535424, 2179072, 2609152, 2179072, 2859008,\n' +
'  /* 25178 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2928640, 2179072, 2179072, 2179072, 2998272, 2179072,\n' +
'  /* 25189 */ 2179072, 2179072, 2179072, 3059712, 2179072, 3031040, 2126812, 2450396, 2126812, 2536412, 2126812,\n' +
'  /* 25200 */ 2610140, 2126812, 2859996, 2126812, 2126812, 2126812, 3032028, 2126675, 2527232, 0, 0, 0, 0, 0, 2161, 0,\n' +
'  /* 25216 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2126675, 2528083, 2126675, 2126675, 2126675,\n' +
'  /* 25240 */ 2126675, 2126675, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 3178496, 2125824,\n' +
'  /* 25251 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 3027932, 2539520, 0,\n' +
'  /* 25263 */ 2949120, 0, 2126675, 2659155, 2974547, 2126675, 2179072, 2658304, 2973696, 2179072, 2126812, 2659292,\n' +
'  /* 25275 */ 2974684, 2126812, 2711552, 0, 2560851, 2126675, 2560000, 2179072, 2560988, 2126812, 0, 2126675, 2179072,\n' +
'  /* 25288 */ 2126812, 0, 2126675, 2179072, 2126812, 2985984, 2986835, 2985984, 2986972, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0,\n' +
'  /* 25307 */ 0, 0, 0, 0, 0, 0, 0, 745, 1189, 0, 0, 0, 0, 1193, 0, 0, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184,\n' +
'  /* 25335 */ 221184, 0, 0, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 221184, 221184, 221184, 221184,\n' +
'  /* 25355 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,\n' +
'  /* 25368 */ 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3001, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25392 */ 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 0, 306, 441, 449, 463, 463, 463, 463, 463,\n' +
'  /* 25417 */ 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 2125824, 2125824, 2125824, 2179072, 2179072,\n' +
'  /* 25433 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 297, 0, 0, 0, 297, 0, 298, 0, 0, 0, 298, 0, 301, 0,\n' +
'  /* 25453 */ 0, 0, 301, 0, 302, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25482 */ 3055616, 0, 0, 0, 3133440, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 702, 703, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25509 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 2179072, 3190784, 3194880, 2179072, 989, 0, 0, 0, 989, 0, 2387968,\n' +
'  /* 25530 */ 2125824, 2125824, 2125824, 2125824, 2125824, 1064, 0, 0, 2125824, 2125824, 2179072, 2125824, 2125824,\n' +
'  /* 25543 */ 2125824, 2125824, 2125824, 0, 1142784, 0, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 25556 */ 2125824, 245760, 0, 0, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 25569 */ 2179072, 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 25580 */ 2179072, 2179072, 2179072, 0, 0, 1454, 2125824, 2125824, 2125824, 852, 0, 2125824, 2125824, 2125824,\n' +
'  /* 25594 */ 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 25605 */ 3207168, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3084288, 3096576, 2179072,\n' +
'  /* 25616 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3223552, 989, 0, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 25629 */ 2125824, 2125824, 2605056, 2125824, 2629632, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824,\n' +
'  /* 25640 */ 2707456, 2125824, 2736128, 225741, 225741, 225741, 225741, 225741, 225741, 225741, 225741, 225741, 225741,\n' +
'  /* 25653 */ 225741, 225741, 225741, 225741, 225741, 225741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3015, 0, 0, 0, 0, 0, 225894,\n' +
'  /* 25676 */ 225894, 225894, 225894, 225894, 225894, 225894, 225894, 225741, 225741, 225741, 225911, 225911, 1, 12290,\n' +
'  /* 25690 */ 3, 78114, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 844, 541, 541, 541, 541, 2125824, 2179072, 2179072,\n' +
'  /* 25712 */ 2179072, 2179072, 2179072, 237568, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2162,\n' +
'  /* 25729 */ 0, 0, 0, 0, 0, 0, 0, 2171, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,\n' +
'  /* 25747 */ 249856, 249856, 249856, 249856, 249856, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3176, 0, 0, 0, 0, 0, 217088,\n' +
'  /* 25770 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,\n' +
'  /* 25792 */ 241664, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2479, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25815 */ 2047, 0, 0, 2050, 2051, 0, 0, 254414, 254414, 254414, 254414, 254414, 254414, 254414, 254414, 254414,\n' +
'  /* 25831 */ 254414, 254414, 254414, 254414, 254414, 254414, 254414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3305, 0, 3181, 3307,\n' +
'  /* 25852 */ 0, 0, 0, 0, 2183168, 0, 0, 270336, 0, 0, 297, 298, 0, 2134016, 301, 302, 200704, 0, 0, 0, 0, 0, 2440, 0,\n' +
'  /* 25876 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 804, 0, 804, 0, 0, 0, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 0,\n' +
'  /* 25898 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 180224, 0, 0, 0, 0, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25921 */ 0, 405, 0, 0, 0, 0, 0, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25946 */ 2920448, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 332, 332, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 25976 */ 0, 0, 0, 329, 0, 0, 0, 266240, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 1, 12290, 2113824, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26003 */ 294, 0, 0, 0, 294, 0, 0, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 245760, 2125824, 2125824,\n' +
'  /* 26019 */ 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2740, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26046 */ 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 0, 0, 0, 274432, 274432, 1, 12290, 3, 563,\n' +
'  /* 26063 */ 563, 563, 585, 541, 541, 541, 541, 585, 585, 585, 585, 541, 563, 585, 541, 541, 541, 901, 0, 0, 0, 999,\n' +
'  /* 26085 */ 862, 929, 585, 858, 1070, 901, 541, 78113, 78113, 291, 0, 0, 0, 0, 0, 297, 298, 0, 0, 301, 302, 0, 0, 0,\n' +
'  /* 26109 */ 0, 0, 0, 3196, 0, 0, 0, 0, 0, 0, 3200, 3201, 0, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 26134 */ 541, 541, 541, 541, 907, 541, 541, 541, 0, 0, 2036, 0, 0, 0, 0, 0, 2038, 0, 0, 0, 0, 0, 2040, 0, 0, 0, 0,\n' +
'  /* 26161 */ 0, 2488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 2118, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26192 */ 0, 0, 0, 541, 541, 2532, 541, 78113, 78461, 291, 0, 0, 0, 0, 0, 297, 298, 0, 0, 301, 302, 0, 0, 0, 0, 0,\n' +
'  /* 26218 */ 0, 3505, 0, 3507, 0, 0, 0, 0, 0, 541, 541, 541, 3207, 541, 541, 541, 541, 541, 541, 541, 3212, 541, 563,\n' +
'  /* 26241 */ 563, 563, 586, 542, 542, 542, 542, 586, 586, 586, 586, 542, 563, 586, 542, 586, 586, 586, 586, 586, 586,\n' +
'  /* 26262 */ 586, 586, 542, 563, 542, 586, 586, 1, 12290, 3, 282624, 282624, 282624, 282624, 282624, 282624, 282624,\n' +
'  /* 26279 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 1, 12290, 3, 282624, 282624,\n' +
'  /* 26293 */ 282624, 0, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 363, 363, 0, 708, 0, 0, 0, 0, 0, 282624, 282624,\n' +
'  /* 26319 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 282624, 282624, 282624, 282624, 282624, 0, 0,\n' +
'  /* 26334 */ 0, 0, 0, 0, 0, 0, 0, 0, 3315, 0, 0, 3317, 0, 0, 0, 2981888, 2396160, 0, 3153920, 3181, 0, 0, 2740224, 0,\n' +
'  /* 26358 */ 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 2502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2511, 0, 0, 0, 286720, 286720, 0,\n' +
'  /* 26385 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,\n' +
'  /* 26398 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26417 */ 0, 3509, 0, 0, 0, 541, 541, 0, 0, 0, 286720, 0, 0, 0, 0, 286720, 286720, 286720, 0, 286720, 1, 12290, 3,\n' +
'  /* 26440 */ 3006464, 0, 3108864, 3198976, 0, 0, 3043328, 0, 3149824, 2936832, 0, 2760704, 3306, 0, 0, 0, 0, 0, 0, 346,\n' +
'  /* 26460 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 2498560, 0, 0, 0, 0, 2875392, 0, 0, 0, 3386, 0, 0,\n' +
'  /* 26488 */ 2834432, 0, 3227648, 2568192, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 3386, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26510 */ 3080192, 3100672, 3104768, 0, 0, 0, 0, 3186688, 0, 0, 0, 307, 0, 0, 0, 0, 0, 306, 0, 306, 307, 0, 306,\n' +
'  /* 26533 */ 306, 0, 0, 0, 306, 306, 307, 307, 0, 0, 0, 0, 0, 0, 306, 406, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26563 */ 0, 0, 1226, 0, 0, 0, 307, 411, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2517, 0, 0, 0, 0,\n' +
'  /* 26591 */ 2520, 0, 0, 0, 0, 0, 0, 0, 1234, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 345, 0, 403, 0, 0, 0, 0, 0, 403, 463, 463,\n' +
'  /* 26620 */ 463, 489, 489, 463, 489, 489, 489, 489, 489, 489, 489, 514, 489, 489, 489, 489, 489, 489, 489, 489, 489,\n' +
'  /* 26641 */ 489, 489, 489, 489, 534, 489, 489, 489, 489, 489, 543, 543, 543, 564, 587, 543, 564, 543, 543, 564, 564,\n' +
'  /* 26662 */ 564, 607, 610, 610, 610, 543, 607, 607, 607, 587, 543, 564, 620, 543, 620, 620, 620, 620, 620, 620, 620,\n' +
'  /* 26683 */ 620, 543, 564, 543, 607, 607, 1, 12290, 3, 0, 0, 0, 650, 0, 0, 653, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601,\n' +
'  /* 26710 */ 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 741, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 26743 */ 0, 0, 752, 0, 0, 0, 0, 0, 0, 346, 347, 348, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 106496, 0, 0, 0, 0, 106496,\n' +
'  /* 26771 */ 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 3561, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 26799 */ 541, 541, 1817, 1818, 541, 541, 541, 541, 541, 541, 541, 541, 2565, 541, 541, 541, 2568, 541, 541, 541,\n' +
'  /* 26819 */ 2573, 0, 0, 773, 0, 0, 777, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363,\n' +
'  /* 26850 */ 0, 0, 0, 0, 131072, 131072, 0, 0, 793, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 741, 0, 801, 0, 0,\n' +
'  /* 26879 */ 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 3117056, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 0, 0, 0, 0, 0, 825, 0,\n' +
'  /* 26909 */ 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1118, 0, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 0, 842, 797, 0, 0,\n' +
'  /* 26941 */ 0, 0, 0, 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 0, 0, 0, 0, 0, 0, 846, 847, 797, 797, 0, 0, 0, 0,\n' +
'  /* 26971 */ 797, 741, 797, 0, 541, 541, 541, 858, 862, 541, 541, 541, 541, 541, 887, 541, 892, 541, 898, 541, 901,\n' +
'  /* 26992 */ 541, 541, 915, 541, 541, 563, 563, 925, 929, 563, 563, 563, 563, 563, 954, 563, 959, 563, 965, 563, 968,\n' +
'  /* 27013 */ 563, 563, 982, 563, 563, 0, 585, 585, 585, 995, 999, 585, 585, 585, 541, 541, 541, 541, 0, 1469, 1295,\n' +
'  /* 27034 */ 1381, 585, 541, 541, 541, 1554, 585, 585, 1024, 585, 1029, 585, 1035, 585, 1038, 585, 585, 1052, 585, 585,\n' +
'  /* 27054 */ 585, 585, 585, 585, 585, 3136, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2664, 585, 585, 585, 585, 585,\n' +
'  /* 27075 */ 585, 541, 925, 1075, 968, 563, 563, 0, 995, 1080, 1038, 585, 585, 78113, 1084, 0, 0, 0, 0, 0, 0, 266240,\n' +
'  /* 27097 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 1086, 1090, 0, 0, 1094, 1098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27126 */ 363, 363, 363, 707, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 1239, 1279,\n' +
'  /* 27155 */ 852, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1318, 541, 541, 541, 585, 585, 1523, 585,\n' +
'  /* 27176 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1988, 585, 1622, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27200 */ 0, 0, 0, 0, 0, 0, 0, 1250, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1266, 0, 1721, 0, 0, 0, 0,\n' +
'  /* 27231 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 0, 0, 0, 1736, 0, 0, 1737, 0, 0, 1738, 0, 0, 0, 0, 1279,\n' +
'  /* 27260 */ 1743, 1891, 563, 563, 1894, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1906, 563, 541, 541, 563,\n' +
'  /* 27280 */ 563, 585, 585, 0, 0, 0, 0, 3298, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 344, 343, 65536, 342, 563,\n' +
'  /* 27305 */ 563, 563, 563, 1911, 563, 563, 563, 563, 563, 563, 563, 26029, 1921, 585, 585, 585, 585, 585, 2012, 585,\n' +
'  /* 27325 */ 541, 2015, 541, 541, 585, 541, 563, 585, 541, 541, 541, 902, 0, 0, 0, 585, 541, 563, 585, 541, 541, 902,\n' +
'  /* 27347 */ 541, 585, 1945, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2397, 585, 585,\n' +
'  /* 27368 */ 585, 585, 2011, 585, 585, 2014, 541, 541, 541, 585, 541, 563, 585, 2022, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27392 */ 1675, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2125824, 2126676, 2125824, 2125824, 0,\n' +
'  /* 27418 */ 0, 2147, 2148, 0, 0, 2150, 0, 0, 0, 2148, 0, 0, 2155, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27444 */ 1134592, 0, 0, 0, 0, 541, 541, 2244, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 948,\n' +
'  /* 27466 */ 563, 563, 563, 563, 563, 563, 563, 2258, 563, 563, 2261, 563, 563, 563, 563, 563, 563, 2269, 563, 563,\n' +
'  /* 27486 */ 563, 563, 563, 563, 1897, 563, 563, 563, 1902, 563, 563, 563, 563, 563, 563, 563, 3354, 563, 563, 585,\n' +
'  /* 27506 */ 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 541, 563, 563, 2288, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 27529 */ 563, 563, 563, 563, 563, 563, 563, 2884, 563, 563, 563, 563, 2301, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 27550 */ 563, 563, 563, 563, 563, 2607, 563, 563, 2343, 585, 585, 585, 585, 585, 585, 2351, 585, 585, 585, 585,\n' +
'  /* 27570 */ 585, 585, 585, 585, 585, 1049, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2402, 585, 585, 585, 585,\n' +
'  /* 27591 */ 585, 585, 585, 585, 541, 541, 541, 541, 1939, 1761, 1848, 585, 541, 541, 2414, 2415, 2416, 585, 541, 541,\n' +
'  /* 27611 */ 541, 541, 563, 563, 563, 563, 585, 585, 585, 585, 0, 0, 2730, 585, 2034, 0, 2036, 0, 2038, 0, 2040, 0, 0,\n' +
'  /* 27634 */ 2431, 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27666 */ 0, 1131, 0, 0, 0, 1135, 0, 0, 0, 0, 2452, 0, 0, 0, 0, 0, 2456, 0, 0, 0, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27697 */ 0, 0, 0, 3508, 0, 0, 0, 0, 541, 541, 2498, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2508, 0, 0, 0, 0, 0, 0, 0, 2529,\n' +
'  /* 27727 */ 0, 0, 0, 0, 541, 541, 541, 541, 541, 3322, 541, 541, 541, 3326, 541, 541, 541, 2587, 541, 541, 541, 541,\n' +
'  /* 27749 */ 541, 541, 563, 563, 563, 563, 563, 563, 563, 2597, 2638, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 27770 */ 563, 563, 2647, 563, 563, 563, 563, 563, 563, 2900, 563, 563, 563, 0, 0, 585, 585, 585, 585, 585, 585,\n' +
'  /* 27791 */ 1980, 1981, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1952, 585, 585, 585, 585, 585, 585, 585, 2659,\n' +
'  /* 27811 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2667, 585, 585, 585, 585, 585, 2363, 585, 585, 585,\n' +
'  /* 27832 */ 585, 585, 585, 585, 585, 585, 585, 585, 3286, 3287, 541, 585, 541, 585, 585, 2700, 585, 585, 585, 585,\n' +
'  /* 27852 */ 585, 585, 585, 585, 585, 585, 585, 585, 2709, 0, 2732, 0, 0, 0, 2736, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0, 0,\n' +
'  /* 27878 */ 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 155648, 0, 0, 0, 2787, 2788, 0, 0, 0, 0, 2793, 0,\n' +
'  /* 27907 */ 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 27940 */ 0, 0, 0, 0, 2529, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2818, 541, 541, 2822, 563, 2885,\n' +
'  /* 27962 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1403, 563, 585, 585, 585, 585, 2925,\n' +
'  /* 27983 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2932, 585, 2956, 541, 2958, 563, 2960, 585, 0, 0, 0, 0,\n' +
'  /* 28005 */ 0, 0, 0, 0, 0, 0, 0, 0, 2432, 0, 0, 585, 3441, 0, 3443, 0, 0, 0, 0, 0, 3181, 3447, 0, 3449, 0, 0, 0, 0, 0,\n' +
'  /* 28034 */ 0, 685, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 0, 541,\n' +
'  /* 28056 */ 3456, 541, 3458, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1788, 541, 541, 1792, 541, 541, 541,\n' +
'  /* 28076 */ 563, 3471, 563, 3473, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2634, 563, 563, 563,\n' +
'  /* 28096 */ 585, 3486, 585, 3488, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 2952, 585, 541,\n' +
'  /* 28116 */ 563, 0, 0, 0, 3503, 0, 0, 0, 3506, 0, 0, 0, 0, 0, 0, 541, 541, 541, 3634, 3635, 541, 541, 563, 563, 563,\n' +
'  /* 28141 */ 3640, 3641, 541, 541, 3515, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563,\n' +
'  /* 28161 */ 2254, 563, 563, 563, 3528, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 3112,\n' +
'  /* 28181 */ 585, 585, 585, 585, 3116, 3541, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28204 */ 0, 2529, 0, 0, 0, 0, 541, 541, 541, 2533, 3556, 0, 3558, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 28228 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 0, 0, 0, 0, 3601, 0, 0, 0, 0, 541, 541, 541,\n' +
'  /* 28252 */ 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 1374, 563, 563, 308, 309, 310, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28276 */ 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 419, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 1727, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28308 */ 0, 0, 2046, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 841, 0, 0, 0, 0, 0, 0, 816, 0, 0, 0, 450,\n' +
'  /* 28340 */ 450, 419, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 533, 450, 533, 533, 533, 450, 533,\n' +
'  /* 28361 */ 533, 533, 533, 450, 544, 544, 544, 565, 588, 544, 565, 544, 544, 565, 565, 565, 588, 544, 544, 544, 544,\n' +
'  /* 28382 */ 588, 588, 588, 588, 544, 565, 588, 544, 588, 588, 588, 588, 588, 588, 588, 588, 621, 626, 621, 588, 632,\n' +
'  /* 28403 */ 1, 12290, 3, 1059, 541, 541, 1062, 541, 0, 0, 0, 585, 541, 563, 585, 541, 541, 541, 541, 0, 0, 188416,\n' +
'  /* 28425 */ 585, 541, 563, 585, 541, 541, 541, 541, 0, 0, 0, 585, 541, 563, 585, 541, 541, 541, 1072, 1907, 563, 563,\n' +
'  /* 28447 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 26029, 0, 585, 585, 585, 585, 585, 2375, 2376, 585, 585, 585,\n' +
'  /* 28468 */ 585, 585, 585, 585, 585, 585, 585, 2379, 585, 585, 585, 585, 585, 585, 585, 1992, 585, 585, 585, 585, 585,\n' +
'  /* 28489 */ 1998, 585, 585, 585, 585, 585, 585, 585, 585, 1951, 585, 585, 585, 585, 1955, 585, 585, 0, 0, 0, 0, 2501,\n' +
'  /* 28511 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1146, 0, 1148, 0, 0, 0, 0, 2514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28543 */ 735, 0, 0, 0, 0, 0, 2534, 541, 541, 541, 541, 2538, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 28565 */ 1804, 541, 541, 1807, 541, 541, 541, 541, 541, 2588, 541, 541, 541, 541, 563, 563, 563, 563, 2594, 563,\n' +
'  /* 28585 */ 563, 563, 563, 563, 563, 2262, 563, 2264, 563, 563, 563, 563, 563, 563, 2272, 563, 2598, 563, 563, 563,\n' +
'  /* 28605 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1417, 563, 585, 585, 585, 2660, 585, 585, 585, 585,\n' +
'  /* 28626 */ 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 585, 541, 585, 2710, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 28647 */ 541, 541, 541, 541, 585, 541, 563, 585, 2418, 541, 541, 541, 2422, 563, 563, 563, 2426, 585, 585, 563,\n' +
'  /* 28667 */ 563, 563, 563, 563, 3532, 563, 3534, 563, 563, 3536, 563, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 28687 */ 585, 585, 585, 541, 0, 3627, 585, 585, 585, 585, 3545, 585, 3547, 585, 585, 3549, 585, 541, 0, 0, 0, 0, 0,\n' +
'  /* 28710 */ 0, 0, 2763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225741, 225741, 225741, 225741, 225741, 225741, 225741, 0, 0, 0,\n' +
'  /* 28732 */ 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365,\n' +
'  /* 28759 */ 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 678, 0, 0, 314, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28792 */ 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 421, 429, 420, 429, 0, 311, 429, 442, 451, 464, 464, 464, 464, 464, 464,\n' +
'  /* 28817 */ 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 485, 490, 490, 501, 490, 490, 490, 490, 490,\n' +
'  /* 28838 */ 490, 490, 490, 516, 516, 529, 529, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 516, 530, 530, 530,\n' +
'  /* 28859 */ 530, 530, 545, 545, 545, 566, 589, 545, 566, 545, 545, 566, 566, 566, 589, 545, 545, 545, 545, 589, 589,\n' +
'  /* 28880 */ 589, 617, 618, 619, 589, 618, 589, 589, 589, 589, 589, 589, 589, 589, 618, 619, 618, 617, 617, 1, 12290,\n' +
'  /* 28901 */ 3, 0, 0, 707, 0, 0, 0, 0, 0, 707, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3211, 541, 541,\n' +
'  /* 28926 */ 541, 563, 969, 563, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1935, 585, 585,\n' +
'  /* 28947 */ 585, 585, 585, 585, 541, 563, 563, 969, 563, 563, 0, 585, 585, 1039, 585, 585, 78113, 1084, 0, 0, 0, 0, 0,\n' +
'  /* 28970 */ 0, 1146880, 0, 1146880, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 28999 */ 0, 781, 0, 0, 0, 0, 0, 788, 0, 363, 363, 0, 0, 0, 0, 1155, 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1701, 0, 0, 0,\n' +
'  /* 29029 */ 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 1279, 852, 541, 541,\n' +
'  /* 29059 */ 1283, 1285, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 2251, 563, 563, 563, 563, 563, 1299, 541,\n' +
'  /* 29079 */ 1304, 541, 541, 1308, 541, 541, 1311, 541, 541, 541, 541, 541, 541, 541, 563, 563, 3070, 563, 563, 563,\n' +
'  /* 29099 */ 563, 563, 563, 563, 563, 563, 1385, 563, 1390, 563, 563, 1394, 563, 563, 1397, 563, 563, 563, 563, 0, 0,\n' +
'  /* 29120 */ 0, 0, 0, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1971, 585, 1459, 585,\n' +
'  /* 29142 */ 585, 585, 585, 585, 585, 585, 585, 1473, 585, 1478, 585, 585, 1482, 585, 0, 0, 0, 0, 0, 3164, 0, 0, 0, 0,\n' +
'  /* 29166 */ 0, 0, 0, 3170, 0, 0, 0, 0, 0, 2747, 0, 2748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192972, 192972, 192972, 192972,\n' +
'  /* 29191 */ 192972, 192972, 192972, 192972, 192972, 0, 192972, 192972, 585, 1485, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 29208 */ 585, 585, 585, 585, 585, 585, 585, 585, 2669, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1591,\n' +
'  /* 29234 */ 1692, 0, 1694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 0, 1159168, 415, 415, 0, 0, 0, 0, 0,\n' +
'  /* 29262 */ 415, 0, 0, 0, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1104, 0, 0, 563, 1844, 563, 563, 563, 563, 563,\n' +
'  /* 29290 */ 563, 563, 563, 563, 1856, 563, 563, 563, 563, 0, 0, 0, 0, 0, 0, 585, 585, 585, 585, 585, 2657, 585, 585,\n' +
'  /* 29313 */ 585, 1947, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 3288, 585, 541, 585, 585, 585,\n' +
'  /* 29334 */ 1960, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3127, 585, 3129, 2075, 0, 0, 0, 0,\n' +
'  /* 29356 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1596, 2413, 585, 541, 563, 585, 541, 541, 541, 541, 563, 563, 563, 563,\n' +
'  /* 29381 */ 585, 585, 585, 585, 0, 2034, 0, 0, 0, 585, 2034, 0, 2036, 0, 2038, 0, 2040, 0, 0, 0, 0, 0, 0, 2433, 0, 0,\n' +
'  /* 29407 */ 0, 0, 0, 2761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 2499, 2500, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 29438 */ 0, 0, 0, 0, 0, 1120, 0, 0, 2574, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 29461 */ 541, 1761, 0, 0, 0, 0, 2801, 0, 0, 2804, 0, 0, 0, 0, 0, 0, 0, 2808, 2835, 541, 541, 541, 541, 541, 541,\n' +
'  /* 29486 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 1826, 0, 0, 0, 0, 2971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 29512 */ 1208, 0, 0, 0, 0, 0, 3022, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 29537 */ 3213, 541, 541, 3037, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2200, 541, 541,\n' +
'  /* 29557 */ 563, 3077, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1438, 563, 563, 563, 563,\n' +
'  /* 29578 */ 3092, 3093, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2882, 563, 563, 563, 3117, 585,\n' +
'  /* 29598 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 585, 585, 3132, 3133, 585,\n' +
'  /* 29619 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1054, 585, 585, 585, 3501, 0, 3502, 0, 0, 0, 0, 0,\n' +
'  /* 29642 */ 0, 0, 0, 0, 0, 0, 541, 3513, 541, 3514, 541, 541, 541, 3518, 541, 541, 541, 541, 541, 541, 541, 563, 3526,\n' +
'  /* 29665 */ 563, 541, 541, 563, 563, 585, 585, 0, 0, 0, 3297, 0, 0, 0, 0, 0, 0, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 29693 */ 2481, 0, 0, 0, 0, 0, 0, 3527, 563, 563, 563, 3531, 563, 563, 563, 563, 563, 563, 563, 585, 3539, 585,\n' +
'  /* 29715 */ 3540, 585, 585, 585, 3544, 585, 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 0, 0, 2776, 0, 0, 0, 0,\n' +
'  /* 29740 */ 0, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 3673, 0, 0, 541, 541, 563, 563, 585, 585, 0, 541, 563, 585, 0, 541,\n' +
'  /* 29767 */ 563, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 78113, 1084, 0, 0, 0, 0, 0, 0, 3383, 3384, 0, 3181,\n' +
'  /* 29790 */ 0, 3388, 0, 0, 0, 0, 0, 0, 0, 3197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2466, 0, 0, 0, 0, 0, 0, 322, 322, 372, 0,\n' +
'  /* 29820 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 372, 0, 431, 437, 0, 443, 452, 465, 465, 465, 465,\n' +
'  /* 29848 */ 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 491, 491, 502, 491, 491, 491,\n' +
'  /* 29869 */ 491, 491, 491, 491, 491, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517,\n' +
'  /* 29890 */ 546, 546, 546, 567, 590, 546, 567, 546, 546, 567, 567, 567, 590, 546, 546, 546, 546, 590, 590, 590, 590,\n' +
'  /* 29911 */ 546, 567, 590, 546, 590, 590, 590, 590, 590, 590, 590, 590, 546, 567, 546, 590, 590, 1, 12290, 3, 585,\n' +
'  /* 29932 */ 1018, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2921, 0, 0, 1199, 1201,\n' +
'  /* 29953 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 1252, 0, 1199, 0, 1118, 0, 1258, 0, 0, 0, 0, 0, 1133,\n' +
'  /* 29983 */ 0, 0, 0, 0, 0, 0, 2805760, 2920448, 0, 0, 0, 0, 0, 2920448, 0, 0, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 2469,\n' +
'  /* 30010 */ 0, 2471, 2472, 0, 0, 0, 1241, 0, 0, 0, 1273, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 2171, 0, 0, 0, 541, 541, 541,\n' +
'  /* 30037 */ 541, 541, 541, 541, 3209, 3210, 541, 541, 541, 541, 0, 0, 1279, 852, 541, 541, 1284, 541, 541, 541, 541,\n' +
'  /* 30058 */ 541, 541, 541, 541, 541, 1349, 541, 541, 541, 541, 541, 541, 1335, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 30079 */ 541, 541, 541, 541, 541, 541, 541, 2202, 541, 1359, 541, 541, 541, 541, 541, 563, 563, 1370, 563, 563,\n' +
'  /* 30099 */ 563, 563, 563, 563, 563, 1915, 563, 563, 563, 563, 26029, 0, 585, 585, 1418, 563, 563, 1421, 563, 563,\n' +
'  /* 30119 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2871, 563, 563, 563, 563, 563, 563, 1445, 563, 563,\n' +
'  /* 30140 */ 563, 563, 563, 26029, 1279, 989, 585, 585, 1458, 585, 585, 585, 1504, 585, 585, 1506, 585, 585, 1509, 585,\n' +
'  /* 30160 */ 585, 585, 585, 585, 585, 541, 541, 541, 541, 563, 563, 585, 585, 3378, 0, 0, 0, 1735, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30185 */ 0, 0, 0, 0, 1279, 0, 0, 0, 0, 0, 2802, 2803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2469888, 2506752, 2756608, 0,\n' +
'  /* 30211 */ 0, 2580480, 541, 541, 1812, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2239, 541,\n' +
'  /* 30231 */ 541, 1990, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1501, 541, 541,\n' +
'  /* 30251 */ 2025, 563, 563, 563, 2029, 585, 585, 585, 2033, 0, 2034, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30278 */ 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 2159,\n' +
'  /* 30309 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 2180, 541, 541,\n' +
'  /* 30336 */ 541, 541, 2184, 541, 541, 541, 541, 3038, 541, 541, 541, 541, 541, 541, 541, 3044, 541, 541, 541, 541,\n' +
'  /* 30356 */ 1768, 541, 541, 541, 541, 1772, 541, 541, 541, 541, 1776, 541, 2242, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 30376 */ 563, 563, 563, 563, 563, 563, 563, 2256, 563, 563, 563, 563, 2260, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 30397 */ 563, 563, 563, 563, 3085, 563, 563, 563, 563, 563, 563, 563, 2276, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 30418 */ 563, 563, 563, 563, 3256, 563, 563, 563, 563, 563, 563, 563, 563, 2316, 563, 2318, 563, 563, 563, 563,\n' +
'  /* 30438 */ 563, 563, 563, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3274, 585, 585, 585, 585, 585, 2398,\n' +
'  /* 30459 */ 585, 2400, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 585, 541, 563, 2721, 541, 541,\n' +
'  /* 30480 */ 541, 541, 563, 563, 563, 563, 585, 585, 585, 585, 0, 0, 0, 2035, 0, 0, 0, 2745, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30507 */ 0, 0, 0, 0, 1239, 0, 0, 2873, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 30530 */ 563, 2297, 563, 563, 563, 2886, 563, 563, 563, 563, 563, 563, 563, 2892, 563, 563, 563, 563, 0, 0, 0, 0,\n' +
'  /* 30552 */ 0, 0, 585, 585, 2654, 585, 585, 585, 585, 2933, 585, 585, 585, 585, 585, 585, 585, 2939, 585, 585, 585,\n' +
'  /* 30573 */ 585, 585, 585, 541, 541, 3151, 3152, 3153, 541, 541, 563, 563, 585, 324, 325, 326, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30597 */ 0, 0, 0, 0, 0, 1589, 0, 0, 0, 0, 0, 323, 371, 326, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200257, 2200257,\n' +
'  /* 30624 */ 2200257, 0, 0, 0, 323, 0, 0, 370, 370, 400, 0, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30653 */ 0, 0, 325, 0, 0, 0, 323, 453, 466, 466, 466, 466, 466, 466, 466, 479, 466, 466, 466, 466, 466, 466, 466,\n' +
'  /* 30676 */ 466, 466, 466, 466, 492, 492, 466, 492, 492, 507, 509, 492, 492, 507, 492, 518, 518, 518, 518, 518, 518,\n' +
'  /* 30697 */ 518, 518, 518, 518, 518, 518, 518, 535, 518, 518, 518, 518, 518, 547, 547, 547, 568, 591, 547, 568, 547,\n' +
'  /* 30718 */ 547, 568, 568, 568, 591, 547, 547, 547, 547, 591, 591, 591, 591, 547, 568, 591, 547, 591, 591, 591, 591,\n' +
'  /* 30739 */ 591, 591, 591, 591, 547, 568, 547, 591, 591, 1, 12290, 3, 663, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675,\n' +
'  /* 30764 */ 676, 0, 0, 0, 0, 0, 326, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 712, 713, 0, 0, 0, 0, 0, 719,\n' +
'  /* 30792 */ 0, 0, 0, 723, 0, 0, 0, 0, 0, 2972, 0, 0, 0, 2976, 0, 0, 0, 0, 0, 2982, 725, 0, 0, 0, 0, 0, 0, 732, 0, 0,\n' +
'  /* 30822 */ 0, 736, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 0, 0, 0, 0, 0, 0, 0, 0, 774, 775, 0,\n' +
'  /* 30853 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 792, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0,\n' +
'  /* 30886 */ 0, 0, 0, 0, 806, 0, 811, 0, 814, 0, 0, 0, 0, 811, 814, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 770,\n' +
'  /* 30917 */ 814, 814, 811, 0, 0, 0, 0, 0, 0, 0, 794, 0, 806, 0, 823, 0, 0, 0, 0, 0, 2996, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 30947 */ 0, 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 814, 0, 712, 0, 0, 831, 0, 0, 0, 0, 0, 831, 831, 834, 0, 0, 0, 794, 0,\n' +
'  /* 30977 */ 0, 0, 0, 0, 843, 0, 0, 0, 0, 0, 0, 0, 830, 0, 824, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 843, 823,\n' +
'  /* 31008 */ 843, 0, 541, 541, 541, 859, 541, 865, 541, 541, 878, 541, 888, 541, 893, 541, 541, 900, 903, 908, 541,\n' +
'  /* 31029 */ 916, 541, 541, 563, 563, 926, 563, 932, 563, 563, 945, 563, 955, 563, 960, 563, 563, 563, 563, 563, 563,\n' +
'  /* 31050 */ 3094, 563, 563, 563, 563, 563, 563, 563, 563, 3102, 967, 970, 975, 563, 983, 563, 563, 0, 585, 585, 585,\n' +
'  /* 31071 */ 996, 585, 1002, 585, 585, 585, 585, 585, 2389, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 31091 */ 2918, 585, 585, 585, 585, 1015, 585, 1025, 585, 1030, 585, 585, 1037, 1040, 1045, 585, 1053, 585, 585,\n' +
'  /* 31110 */ 585, 585, 585, 585, 585, 3285, 585, 585, 585, 585, 541, 541, 585, 541, 541, 926, 563, 1076, 975, 563, 0,\n' +
'  /* 31131 */ 996, 585, 1081, 1045, 585, 78113, 1084, 0, 0, 0, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 0,\n' +
'  /* 31159 */ 0, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 1139, 0, 0, 1142, 1143, 0, 0, 0, 0,\n' +
'  /* 31189 */ 1147, 0, 0, 0, 0, 0, 0, 804, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 2815, 541, 541, 541, 541,\n' +
'  /* 31214 */ 541, 541, 1327, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1346, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 31235 */ 541, 2554, 541, 541, 541, 2557, 541, 541, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541, 1290,\n' +
'  /* 31256 */ 541, 541, 541, 541, 1363, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 1376, 541, 541, 1337, 541,\n' +
'  /* 31276 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 1353, 541, 541, 541, 541, 3052, 3053, 541, 541, 541, 541,\n' +
'  /* 31296 */ 541, 541, 541, 541, 541, 541, 2831, 541, 541, 541, 541, 541, 1439, 563, 563, 563, 563, 563, 563, 1449,\n' +
'  /* 31316 */ 563, 563, 26029, 1279, 989, 585, 585, 585, 541, 541, 541, 541, 0, 1548, 1549, 1550, 585, 541, 541, 1553,\n' +
'  /* 31336 */ 541, 1484, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1499, 585, 0, 0, 0, 0, 541,\n' +
'  /* 31358 */ 541, 541, 541, 563, 563, 563, 563, 585, 585, 585, 585, 0, 0, 1568, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 1613,\n' +
'  /* 31382 */ 1614, 1615, 0, 1617, 1618, 0, 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 541, 541, 541,\n' +
'  /* 31409 */ 541, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 1639, 0, 0, 0, 0, 0, 1645, 0, 0, 1648,\n' +
'  /* 31439 */ 0, 1650, 0, 0, 0, 0, 0, 0, 848, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 3461, 541, 541, 541, 541,\n' +
'  /* 31464 */ 541, 541, 541, 1347, 541, 541, 1351, 541, 541, 541, 541, 541, 0, 0, 1656, 1657, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 31488 */ 1666, 1667, 0, 0, 0, 0, 0, 329, 330, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 31518 */ 1696, 1697, 0, 0, 0, 0, 0, 1703, 1704, 0, 1706, 1707, 1708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1717, 0, 0,\n' +
'  /* 31545 */ 1720, 1746, 541, 1748, 541, 1749, 541, 1751, 541, 541, 541, 1755, 541, 541, 541, 541, 541, 541, 3408, 541,\n' +
'  /* 31565 */ 541, 3410, 563, 563, 563, 563, 3414, 563, 1778, 541, 541, 541, 541, 541, 541, 541, 541, 1786, 1787, 1789,\n' +
'  /* 31585 */ 541, 541, 541, 541, 541, 1365, 541, 1367, 563, 563, 563, 1372, 563, 563, 563, 563, 0, 0, 0, 0, 0, 0, 585,\n' +
'  /* 31608 */ 2653, 585, 585, 585, 585, 585, 585, 585, 3366, 585, 585, 585, 3367, 3368, 585, 585, 585, 541, 541, 1796,\n' +
'  /* 31628 */ 1797, 541, 541, 1800, 1801, 541, 541, 541, 541, 541, 541, 541, 1809, 1842, 563, 563, 563, 563, 563, 563,\n' +
'  /* 31648 */ 563, 563, 563, 1855, 563, 563, 563, 563, 1859, 563, 563, 563, 563, 1863, 563, 1865, 563, 563, 563, 563,\n' +
'  /* 31668 */ 563, 563, 563, 563, 1873, 1874, 1876, 563, 563, 563, 563, 563, 563, 1883, 1884, 563, 563, 1887, 1888, 563,\n' +
'  /* 31688 */ 563, 563, 563, 563, 563, 3239, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3254, 563, 563, 563, 563,\n' +
'  /* 31709 */ 563, 563, 1908, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1919, 26029, 0, 1924, 585, 0, 0, 0, 0, 3668,\n' +
'  /* 31731 */ 541, 541, 541, 3670, 563, 563, 563, 3672, 585, 585, 585, 585, 585, 2702, 585, 585, 585, 585, 585, 585,\n' +
'  /* 31751 */ 585, 2707, 585, 585, 585, 585, 585, 2687, 585, 585, 585, 2690, 585, 585, 585, 2695, 585, 585, 585, 585,\n' +
'  /* 31771 */ 585, 2675, 585, 585, 585, 585, 585, 585, 2680, 585, 585, 585, 585, 585, 585, 2913, 585, 2915, 585, 585,\n' +
'  /* 31791 */ 585, 585, 585, 585, 585, 585, 3493, 585, 3495, 3496, 585, 3498, 585, 3500, 1926, 585, 1927, 585, 1929,\n' +
'  /* 31810 */ 585, 585, 585, 1933, 585, 585, 585, 585, 585, 585, 585, 585, 1966, 585, 585, 1970, 585, 585, 585, 585,\n' +
'  /* 31830 */ 585, 585, 1946, 585, 585, 585, 585, 1950, 585, 585, 585, 585, 1954, 585, 1956, 585, 0, 0, 0, 3162, 0, 0,\n' +
'  /* 31852 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 1974, 1975, 585, 585, 1978, 1979, 585, 585, 585, 585, 585,\n' +
'  /* 31877 */ 585, 585, 1987, 585, 585, 585, 585, 585, 2403, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 541,\n' +
'  /* 31897 */ 2018, 2019, 2020, 585, 541, 585, 1991, 585, 585, 585, 585, 585, 585, 585, 1999, 585, 585, 585, 585, 585,\n' +
'  /* 31917 */ 585, 541, 3150, 585, 541, 563, 541, 541, 563, 563, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 31943 */ 2434, 585, 585, 585, 2010, 585, 585, 2013, 541, 541, 2016, 541, 585, 541, 563, 2021, 1801, 541, 2024, 541,\n' +
'  /* 31963 */ 1888, 563, 2028, 563, 1979, 585, 2032, 585, 0, 2034, 0, 0, 0, 0, 0, 0, 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 31990 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 32013 */ 769, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 2117, 0, 0, 0, 0, 0, 0,\n' +
'  /* 32044 */ 2124, 0, 2126, 0, 0, 0, 0, 0, 0, 0, 3183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 1145, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 32074 */ 2134, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 2144, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,\n' +
'  /* 32105 */ 0, 0, 541, 2188, 541, 541, 541, 541, 541, 541, 2196, 541, 2198, 541, 541, 541, 541, 541, 541, 3519, 541,\n' +
'  /* 32126 */ 3521, 541, 541, 3523, 541, 563, 563, 563, 541, 2230, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 32146 */ 541, 541, 541, 541, 1319, 541, 541, 2243, 541, 541, 2246, 2247, 541, 541, 563, 563, 563, 563, 563, 563,\n' +
'  /* 32166 */ 563, 563, 3478, 563, 3480, 3481, 563, 3483, 563, 563, 2274, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 32186 */ 563, 563, 563, 563, 563, 1889, 1890, 2298, 2299, 563, 563, 563, 563, 563, 563, 2306, 563, 563, 563, 563,\n' +
'  /* 32206 */ 563, 563, 563, 563, 2865, 563, 563, 2869, 563, 563, 563, 563, 585, 2344, 585, 2346, 585, 585, 585, 585,\n' +
'  /* 32226 */ 585, 585, 2354, 585, 2356, 585, 585, 585, 541, 541, 541, 1349, 0, 585, 541, 563, 585, 541, 541, 541, 541,\n' +
'  /* 32247 */ 0, 0, 0, 1000, 863, 930, 585, 541, 541, 541, 541, 0, 0, 745, 585, 541, 563, 585, 541, 541, 541, 541, 0, 0,\n' +
'  /* 32271 */ 0, 585, 541, 563, 585, 1069, 541, 541, 912, 585, 585, 585, 2388, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 32292 */ 585, 585, 585, 585, 1055, 585, 585, 585, 585, 585, 585, 2401, 585, 585, 2404, 2405, 585, 585, 585, 585,\n' +
'  /* 32312 */ 585, 541, 541, 541, 541, 0, 585, 541, 563, 585, 541, 541, 541, 541, 541, 2346, 2188, 2264, 585, 541, 2419,\n' +
'  /* 32333 */ 541, 541, 563, 2423, 563, 563, 585, 2427, 585, 0, 0, 0, 3444, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 395,\n' +
'  /* 32359 */ 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 2487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 1106, 0, 0, 0, 0, 2526,\n' +
'  /* 32390 */ 0, 0, 0, 0, 2529, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2817, 541, 2820, 541, 541, 541,\n' +
'  /* 32414 */ 541, 2536, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2571, 541, 541, 541, 541,\n' +
'  /* 32434 */ 2548, 541, 2550, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1331, 541, 541, 541, 541, 2610,\n' +
'  /* 32454 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2325, 563, 563, 563, 2625, 563,\n' +
'  /* 32475 */ 563, 563, 2628, 563, 563, 563, 2633, 563, 563, 563, 563, 0, 0, 2329, 0, 0, 0, 585, 585, 585, 585, 585,\n' +
'  /* 32497 */ 585, 585, 585, 2339, 585, 585, 585, 585, 563, 563, 563, 2640, 563, 563, 563, 563, 563, 563, 563, 2645,\n' +
'  /* 32517 */ 563, 563, 563, 563, 0, 2651, 0, 0, 0, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2340, 585, 585,\n' +
'  /* 32540 */ 2658, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1540, 2670, 585, 2672,\n' +
'  /* 32560 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2357, 585, 0, 2757, 0, 0, 0, 0, 0,\n' +
'  /* 32583 */ 0, 0, 0, 0, 0, 2768, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 541, 2824,\n' +
'  /* 32614 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1333, 541, 541, 541, 2837, 541, 541,\n' +
'  /* 32635 */ 541, 541, 541, 541, 541, 541, 541, 541, 2843, 541, 541, 541, 541, 3229, 541, 541, 541, 541, 541, 541, 563,\n' +
'  /* 32656 */ 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 3113, 585, 585, 585, 585, 0, 2993, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 32680 */ 0, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 3007, 0, 0, 0, 0, 0, 3012, 0, 0, 2993, 0, 0, 3018, 3019, 0, 0, 0, 0, 0,\n' +
'  /* 32709 */ 3195, 0, 0, 3198, 0, 0, 0, 0, 0, 0, 0, 0, 3028, 541, 541, 541, 541, 541, 541, 541, 1770, 541, 541, 541,\n' +
'  /* 32733 */ 541, 541, 541, 541, 541, 1784, 541, 541, 541, 541, 541, 541, 541, 541, 2220, 541, 541, 541, 541, 541,\n' +
'  /* 32753 */ 2226, 541, 541, 3021, 0, 0, 3024, 0, 0, 0, 3027, 541, 541, 541, 541, 541, 541, 3034, 541, 541, 541, 1324,\n' +
'  /* 32775 */ 541, 541, 541, 1328, 541, 541, 541, 541, 541, 541, 541, 1334, 541, 541, 3050, 541, 541, 541, 541, 541,\n' +
'  /* 32795 */ 541, 541, 541, 541, 541, 3059, 3061, 541, 541, 541, 1339, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 32815 */ 541, 541, 541, 3058, 541, 3060, 541, 541, 541, 3064, 541, 3066, 3067, 541, 563, 563, 563, 563, 563, 563,\n' +
'  /* 32835 */ 3074, 563, 563, 563, 563, 563, 563, 3250, 563, 3252, 563, 563, 563, 563, 563, 563, 563, 563, 3081, 563,\n' +
'  /* 32855 */ 563, 563, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 585, 1010, 585, 563, 563, 563, 3078, 563, 563,\n' +
'  /* 32876 */ 563, 563, 563, 563, 563, 3084, 563, 563, 563, 563, 0, 2651, 0, 0, 0, 0, 585, 585, 585, 585, 2656, 585,\n' +
'  /* 32898 */ 563, 3090, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3099, 3101, 563, 563, 563, 563, 563, 563,\n' +
'  /* 32918 */ 3353, 563, 563, 563, 585, 585, 585, 585, 585, 3358, 563, 3104, 563, 3106, 3107, 563, 585, 585, 585, 585,\n' +
'  /* 32938 */ 585, 585, 3114, 585, 585, 585, 585, 585, 585, 1997, 585, 585, 585, 585, 585, 2002, 585, 585, 585, 541,\n' +
'  /* 32958 */ 541, 541, 541, 0, 1471, 1297, 1383, 1551, 541, 541, 541, 541, 541, 3039, 541, 541, 541, 541, 541, 541,\n' +
'  /* 32978 */ 541, 541, 541, 541, 3041, 541, 541, 541, 541, 541, 541, 585, 585, 3118, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 32999 */ 3124, 585, 585, 585, 585, 585, 585, 585, 2713, 585, 541, 2715, 541, 541, 2718, 2719, 2720, 3130, 585, 585,\n' +
'  /* 33019 */ 585, 585, 585, 585, 585, 585, 585, 585, 3139, 3141, 585, 585, 585, 585, 585, 585, 2350, 585, 585, 585,\n' +
'  /* 33039 */ 585, 2355, 585, 585, 585, 585, 585, 585, 1527, 585, 585, 585, 585, 585, 585, 1537, 585, 585, 3144, 585,\n' +
'  /* 33059 */ 3146, 3147, 585, 3148, 3149, 541, 585, 541, 563, 541, 3155, 563, 3157, 585, 0, 0, 0, 3667, 541, 541, 541,\n' +
'  /* 33080 */ 3669, 563, 563, 563, 3671, 585, 585, 585, 541, 541, 541, 541, 0, 1472, 1298, 1384, 585, 541, 541, 541,\n' +
'  /* 33100 */ 541, 879, 541, 541, 541, 541, 897, 899, 541, 541, 910, 541, 541, 3159, 0, 0, 0, 0, 0, 0, 3165, 0, 0, 3168,\n' +
'  /* 33124 */ 0, 0, 0, 0, 0, 0, 0, 1171, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 0, 0, 0, 2152, 0, 0, 0, 0,\n' +
'  /* 33155 */ 0, 0, 0, 0, 2163, 0, 0, 2166, 0, 0, 0, 0, 3190, 3191, 0, 0, 3194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,\n' +
'  /* 33184 */ 0, 0, 0, 0, 563, 563, 563, 563, 3249, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3348,\n' +
'  /* 33206 */ 563, 563, 563, 3310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1637, 585, 585, 3372, 585, 585, 585,\n' +
'  /* 33232 */ 541, 541, 541, 541, 563, 563, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 3448, 0, 0, 0, 0, 0, 0, 0, 69632,\n' +
'  /* 33259 */ 73728, 0, 368, 368, 0, 0, 65536, 368, 3402, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563,\n' +
'  /* 33280 */ 563, 563, 563, 3075, 563, 563, 563, 3417, 563, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585,\n' +
'  /* 33301 */ 585, 585, 3263, 3264, 585, 585, 585, 585, 585, 585, 585, 585, 3432, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 33321 */ 585, 541, 541, 563, 563, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1121, 3469, 563, 563, 563,\n' +
'  /* 33348 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3484, 563, 563, 563, 3530, 563, 563, 563, 563, 563,\n' +
'  /* 33369 */ 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3596, 585, 541, 0, 585, 585, 3543,\n' +
'  /* 33390 */ 585, 585, 585, 585, 585, 585, 585, 585, 541, 3552, 3553, 0, 0, 0, 0, 0, 354, 0, 352, 0, 473, 473, 473,\n' +
'  /* 33413 */ 473, 473, 473, 473, 478, 473, 473, 473, 473, 473, 473, 473, 473, 473, 478, 473, 0, 0, 0, 0, 3559, 0, 0,\n' +
'  /* 33436 */ 3562, 3563, 3564, 541, 541, 541, 3567, 541, 3569, 563, 3586, 3587, 3588, 585, 585, 585, 3591, 585, 3593,\n' +
'  /* 33455 */ 585, 585, 585, 585, 3598, 0, 0, 0, 0, 0, 3303, 0, 3304, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 2137, 0, 0, 0,\n' +
'  /* 33483 */ 0, 0, 0, 0, 0, 0, 363, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 3631, 541, 541, 3633, 541, 541, 541, 3637, 563,\n' +
'  /* 33508 */ 563, 3639, 563, 563, 563, 563, 563, 563, 3421, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 33529 */ 585, 3265, 585, 585, 585, 563, 3643, 585, 585, 3645, 585, 585, 585, 3649, 541, 0, 0, 0, 0, 0, 541, 541,\n' +
'  /* 33551 */ 3206, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2210, 541, 541, 541, 541, 541, 541, 0, 0, 0, 327,\n' +
'  /* 33573 */ 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1237, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 33606 */ 1134, 0, 0, 0, 0, 367, 0, 0, 0, 375, 377, 0, 0, 0, 0, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 0, 0, 0, 0, 2480, 0,\n' +
'  /* 33636 */ 0, 0, 0, 0, 0, 0, 0, 1103, 1235, 0, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 410, 69632, 73728, 0, 367, 367, 0,\n' +
'  /* 33664 */ 422, 65536, 367, 0, 0, 367, 422, 499, 503, 499, 499, 508, 499, 499, 499, 508, 499, 422, 422, 328, 422, 0,\n' +
'  /* 33686 */ 0, 422, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 2505, 0, 0, 0, 0, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 1115,\n' +
'  /* 33717 */ 0, 0, 0, 0, 0, 0, 0, 0, 1248, 0, 0, 0, 0, 0, 0, 0, 0, 1259, 0, 0, 0, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 0, 0,\n' +
'  /* 33749 */ 0, 0, 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 33782 */ 0, 0, 0, 0, 1690, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 548,\n' +
'  /* 33804 */ 548, 548, 569, 592, 548, 569, 548, 548, 569, 569, 569, 592, 548, 548, 548, 548, 592, 592, 592, 592, 548,\n' +
'  /* 33825 */ 569, 592, 548, 592, 592, 592, 592, 592, 592, 592, 592, 548, 569, 548, 592, 592, 1, 12290, 3, 0, 0, 0, 682,\n' +
'  /* 33848 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1112, 0, 0, 0, 541, 541, 563, 920, 563, 563, 563, 563, 563, 563, 949,\n' +
'  /* 33875 */ 563, 563, 563, 563, 563, 563, 563, 2901, 563, 563, 0, 0, 585, 585, 585, 585, 585, 1019, 585, 585, 585,\n' +
'  /* 33896 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 990, 585, 0, 0, 541, 541, 563, 563, 585, 585, 0, 541, 563,\n' +
'  /* 33918 */ 585, 0, 541, 563, 585, 0, 0, 0, 0, 0, 0, 0, 0, 2430, 0, 0, 0, 0, 0, 0, 585, 853, 541, 541, 541, 0, 0, 0,\n' +
'  /* 33946 */ 585, 541, 563, 990, 541, 541, 541, 541, 541, 1769, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2541,\n' +
'  /* 33967 */ 541, 541, 541, 541, 541, 363, 363, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2443, 0, 0, 0, 0, 0, 0,\n' +
'  /* 33996 */ 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1718, 0, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34028 */ 0, 0, 0, 1276, 0, 0, 0, 0, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 1288, 541, 541, 541, 541, 541,\n' +
'  /* 34052 */ 881, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2853, 541, 541, 541, 563, 563, 1300, 541, 541, 541,\n' +
'  /* 34073 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3047, 563, 563, 563, 1386, 563, 563, 563, 563,\n' +
'  /* 34094 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2894, 563, 563, 585, 585, 585, 1462, 585, 585, 585, 585, 585,\n' +
'  /* 34115 */ 1474, 585, 585, 585, 585, 585, 585, 541, 3374, 541, 541, 563, 563, 585, 585, 0, 0, 541, 1811, 541, 541,\n' +
'  /* 34136 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1760, 541, 541, 2215, 541, 541, 541, 541, 541,\n' +
'  /* 34157 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 2240, 541, 585, 585, 585, 2373, 585, 585, 585, 585, 585, 585,\n' +
'  /* 34178 */ 585, 585, 585, 585, 585, 585, 1496, 585, 585, 585, 0, 2513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34204 */ 1149, 0, 541, 541, 541, 2577, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1791, 541, 541,\n' +
'  /* 34225 */ 541, 585, 2699, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1483, 585, 0, 0, 0,\n' +
'  /* 34247 */ 0, 3632, 541, 541, 541, 541, 541, 541, 3638, 563, 563, 563, 563, 0, 2651, 0, 0, 0, 0, 585, 585, 585, 2655,\n' +
'  /* 34270 */ 585, 585, 563, 563, 3644, 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 541, 3205, 541, 541, 541,\n' +
'  /* 34292 */ 3208, 541, 541, 541, 541, 541, 541, 541, 563, 563, 1369, 1371, 563, 563, 563, 563, 563, 423, 423, 0, 423,\n' +
'  /* 34313 */ 432, 0, 423, 0, 423, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,\n' +
'  /* 34335 */ 467, 467, 493, 493, 467, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493,\n' +
'  /* 34356 */ 493, 493, 493, 493, 493, 493, 493, 549, 549, 549, 570, 593, 549, 570, 549, 549, 570, 570, 570, 593, 549,\n' +
'  /* 34377 */ 549, 549, 549, 593, 593, 593, 593, 549, 570, 593, 549, 593, 593, 593, 593, 593, 593, 593, 593, 549, 570,\n' +
'  /* 34398 */ 549, 593, 593, 1, 12290, 3, 1087, 1091, 0, 0, 1095, 1099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0,\n' +
'  /* 34425 */ 0, 1212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 0, 0, 0, 1695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34457 */ 0, 0, 1119, 0, 0, 0, 1733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1279, 1744, 563, 563, 563, 2289, 563,\n' +
'  /* 34484 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3086, 563, 563, 0, 2786, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34508 */ 0, 0, 0, 0, 0, 0, 0, 1178, 0, 541, 541, 2848, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563,\n' +
'  /* 34532 */ 563, 563, 3234, 563, 0, 0, 0, 0, 2995, 0, 2997, 0, 0, 3000, 0, 0, 0, 0, 0, 3005, 3062, 541, 541, 3065,\n' +
'  /* 34556 */ 541, 541, 541, 3068, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2890, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 34577 */ 563, 3105, 563, 563, 563, 3108, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1936, 1937, 585, 585,\n' +
'  /* 34597 */ 585, 585, 585, 3145, 585, 585, 585, 585, 541, 541, 585, 541, 563, 541, 541, 563, 563, 585, 585, 0, 0, 0,\n' +
'  /* 34619 */ 0, 0, 0, 3300, 0, 0, 3225, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 3233, 563, 563,\n' +
'  /* 34641 */ 563, 563, 563, 563, 3533, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 34662 */ 585, 3626, 0, 0, 563, 563, 563, 585, 585, 3260, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 34683 */ 2706, 585, 585, 585, 585, 3279, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 585, 541,\n' +
'  /* 34704 */ 563, 541, 541, 563, 563, 585, 563, 563, 3351, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585,\n' +
'  /* 34725 */ 585, 585, 3115, 585, 585, 585, 585, 585, 585, 3363, 585, 585, 585, 585, 585, 585, 585, 585, 3369, 585,\n' +
'  /* 34745 */ 585, 585, 585, 585, 2712, 585, 585, 585, 541, 541, 541, 541, 585, 541, 563, 563, 563, 563, 563, 563, 3476,\n' +
'  /* 34766 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2631, 563, 563, 563, 563, 563, 563, 541, 3655, 3656, 541,\n' +
'  /* 34786 */ 541, 563, 563, 3659, 3660, 563, 563, 585, 585, 3663, 3664, 585, 0, 0, 541, 541, 563, 563, 585, 585, 0,\n' +
'  /* 34807 */ 541, 563, 585, 3682, 3683, 3684, 695, 696, 0, 0, 0, 0, 701, 0, 0, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34833 */ 0, 0, 0, 0, 0, 0, 1163, 0, 763, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 763, 763, 0, 0, 837, 0, 0, 0, 0, 0,\n' +
'  /* 34864 */ 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 0, 0, 863, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 34889 */ 541, 541, 541, 3338, 917, 541, 563, 563, 563, 930, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 34910 */ 3098, 563, 3100, 563, 563, 917, 563, 563, 563, 563, 984, 0, 585, 585, 585, 585, 1054, 78113, 1084, 0, 0,\n' +
'  /* 34931 */ 0, 0, 0, 374, 0, 0, 0, 0, 366, 0, 383, 0, 349, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1732,\n' +
'  /* 34962 */ 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2073, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,\n' +
'  /* 34994 */ 0, 0, 0, 0, 0, 1603, 0, 0, 0, 0, 585, 585, 2009, 585, 585, 585, 585, 541, 541, 541, 541, 585, 541, 563,\n' +
'  /* 35018 */ 585, 541, 541, 541, 541, 563, 563, 563, 563, 585, 585, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2160, 0, 0, 0,\n' +
'  /* 35044 */ 0, 0, 0, 0, 0, 0, 0, 0, 1633, 1634, 1635, 0, 0, 563, 563, 563, 2259, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 35068 */ 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 0, 3203, 0, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 35090 */ 541, 541, 541, 541, 541, 2584, 541, 541, 563, 3289, 541, 3291, 563, 3293, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 35114 */ 0, 0, 0, 3169, 0, 0, 0, 3318, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1822, 541,\n' +
'  /* 35138 */ 541, 541, 585, 585, 585, 3373, 585, 585, 541, 541, 541, 541, 563, 563, 585, 585, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 35161 */ 3166, 0, 0, 0, 0, 0, 0, 0, 0, 2777, 0, 0, 0, 0, 2782, 0, 0, 468, 468, 486, 494, 494, 486, 494, 494, 494,\n' +
'  /* 35187 */ 494, 494, 494, 494, 494, 519, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 536, 527,\n' +
'  /* 35208 */ 527, 527, 527, 527, 550, 550, 550, 571, 594, 550, 571, 550, 550, 571, 571, 571, 594, 550, 550, 550, 550,\n' +
'  /* 35229 */ 594, 594, 594, 594, 550, 571, 594, 550, 594, 594, 594, 594, 594, 594, 594, 594, 550, 571, 550, 594, 594,\n' +
'  /* 35250 */ 1, 12290, 3, 0, 772, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 0,\n' +
'  /* 35281 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 826, 0, 0, 0, 803, 0, 0, 826, 0, 0, 0, 0, 0, 826, 826, 0, 0, 0, 0,\n' +
'  /* 35311 */ 803, 0, 0, 0, 0, 0, 0, 844, 799, 0, 0, 844, 541, 866, 541, 874, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 35335 */ 541, 541, 541, 541, 2199, 541, 2201, 541, 918, 541, 563, 563, 563, 563, 933, 563, 941, 563, 563, 563, 563,\n' +
'  /* 35356 */ 563, 563, 563, 563, 3096, 563, 563, 563, 563, 563, 563, 563, 563, 3355, 563, 585, 585, 585, 585, 585, 585,\n' +
'  /* 35377 */ 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 918, 563, 563, 563, 1077, 985, 0, 585, 585, 585, 1082,\n' +
'  /* 35399 */ 1055, 78113, 1084, 0, 0, 0, 0, 0, 384, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 1251, 0, 0, 0, 0, 0, 0,\n' +
'  /* 35425 */ 0, 0, 0, 0, 0, 0, 0, 1265, 0, 0, 0, 0, 0, 3394, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 35451 */ 2183, 541, 541, 541, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1293, 541, 541,\n' +
'  /* 35472 */ 541, 1340, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1356, 1320, 541, 541, 541, 541, 541,\n' +
'  /* 35492 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3046, 541, 1357, 541, 541, 541, 1364, 541, 541, 563,\n' +
'  /* 35512 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 3356, 585, 585, 585, 585, 585, 563, 1379, 563, 563, 563, 563,\n' +
'  /* 35533 */ 563, 563, 563, 563, 563, 1398, 563, 563, 563, 563, 563, 563, 1409, 563, 563, 1412, 563, 563, 563, 563,\n' +
'  /* 35553 */ 563, 563, 563, 2864, 563, 2867, 563, 563, 563, 563, 2872, 563, 563, 563, 563, 1406, 563, 563, 563, 563,\n' +
'  /* 35573 */ 563, 563, 563, 563, 563, 563, 563, 563, 1400, 1402, 563, 563, 563, 563, 563, 1443, 563, 563, 563, 1450,\n' +
'  /* 35593 */ 563, 563, 26029, 1279, 989, 585, 585, 585, 585, 585, 585, 2688, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 35613 */ 585, 585, 2000, 585, 585, 585, 585, 585, 585, 1486, 585, 585, 585, 585, 585, 585, 585, 1494, 585, 585,\n' +
'  /* 35633 */ 585, 585, 585, 585, 585, 1467, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2378, 585, 585, 585, 585, 585,\n' +
'  /* 35654 */ 2384, 1521, 585, 585, 1525, 585, 585, 585, 585, 585, 1531, 585, 585, 585, 1538, 585, 585, 585, 585, 585,\n' +
'  /* 35674 */ 2911, 585, 2914, 585, 585, 585, 585, 2919, 585, 585, 585, 585, 585, 1948, 585, 585, 585, 585, 585, 585,\n' +
'  /* 35694 */ 585, 585, 585, 585, 1510, 585, 585, 585, 585, 585, 1638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 0, 0,\n' +
'  /* 35720 */ 0, 0, 0, 3313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3184, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 35752 */ 0, 0, 0, 0, 1210, 0, 0, 0, 0, 1711, 0, 1713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 666, 0, 0, 0, 541, 541,\n' +
'  /* 35782 */ 1765, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2834, 541, 541, 541, 1794, 541,\n' +
'  /* 35802 */ 541, 541, 1799, 541, 541, 541, 541, 541, 541, 541, 541, 1808, 541, 541, 541, 1341, 1343, 541, 541, 541,\n' +
'  /* 35822 */ 541, 541, 541, 541, 541, 541, 541, 541, 2553, 541, 541, 541, 541, 541, 541, 2558, 541, 1827, 541, 541,\n' +
'  /* 35842 */ 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 563, 563,\n' +
'  /* 35863 */ 563, 563, 1895, 563, 563, 563, 563, 563, 563, 1903, 563, 563, 563, 563, 563, 563, 1410, 563, 563, 563,\n' +
'  /* 35883 */ 1414, 563, 563, 563, 563, 563, 563, 986, 0, 585, 585, 585, 585, 585, 585, 1008, 585, 563, 563, 563, 563,\n' +
'  /* 35904 */ 563, 1912, 1914, 563, 563, 563, 563, 563, 26029, 0, 585, 585, 585, 585, 585, 2926, 2927, 585, 585, 585,\n' +
'  /* 35924 */ 585, 2930, 585, 585, 585, 585, 585, 585, 585, 3548, 585, 585, 3550, 541, 0, 0, 0, 0, 0, 0, 0, 69632,\n' +
'  /* 35946 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 1943, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 35968 */ 585, 585, 1957, 585, 585, 585, 1977, 585, 585, 585, 585, 585, 585, 585, 585, 1986, 585, 585, 585, 585,\n' +
'  /* 35988 */ 585, 585, 2912, 585, 585, 2916, 585, 585, 585, 585, 585, 585, 541, 541, 541, 541, 563, 563, 585, 585, 0,\n' +
'  /* 36009 */ 0, 585, 585, 585, 1994, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2003, 2005, 585, 0, 0, 541, 541, 563,\n' +
'  /* 36031 */ 563, 585, 585, 3678, 3679, 3680, 3681, 0, 541, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 1084, 0,\n' +
'  /* 36052 */ 0, 0, 0, 0, 0, 0, 2138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1715, 1716, 0, 0, 0, 1719, 0, 0, 0, 2092, 0, 0, 0, 0,\n' +
'  /* 36082 */ 0, 0, 0, 0, 0, 0, 2100, 0, 0, 0, 0, 0, 440, 0, 0, 0, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474,\n' +
'  /* 36108 */ 474, 474, 474, 474, 474, 474, 559, 559, 559, 580, 603, 559, 580, 559, 559, 0, 0, 2133, 0, 0, 0, 0, 0, 0,\n' +
'  /* 36132 */ 0, 0, 0, 0, 0, 0, 0, 2112, 0, 0, 0, 0, 0, 541, 541, 541, 541, 2177, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 36157 */ 541, 541, 541, 2540, 541, 541, 2543, 2544, 541, 541, 541, 2189, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 36177 */ 541, 541, 541, 541, 541, 541, 3045, 541, 541, 0, 0, 0, 585, 585, 585, 585, 2335, 585, 585, 585, 585, 585,\n' +
'  /* 36199 */ 585, 585, 585, 585, 2392, 2393, 585, 585, 585, 585, 585, 585, 585, 585, 2347, 585, 585, 585, 585, 585,\n' +
'  /* 36219 */ 585, 585, 585, 585, 585, 585, 585, 1497, 585, 585, 1500, 541, 2347, 2189, 2265, 585, 541, 541, 541, 541,\n' +
'  /* 36239 */ 563, 563, 563, 563, 585, 585, 585, 585, 1564, 2034, 0, 0, 0, 2448, 0, 0, 2451, 0, 2453, 0, 0, 0, 0, 0, 0,\n' +
'  /* 36264 */ 0, 0, 2458, 0, 0, 0, 0, 0, 3504, 0, 0, 0, 0, 0, 3510, 0, 0, 541, 541, 541, 541, 541, 3460, 541, 541, 541,\n' +
'  /* 36290 */ 3464, 541, 541, 541, 541, 541, 2232, 541, 541, 541, 541, 541, 2237, 541, 541, 541, 541, 541, 1816, 541,\n' +
'  /* 36310 */ 541, 541, 541, 541, 541, 541, 541, 541, 1825, 0, 2461, 0, 0, 0, 0, 0, 0, 2465, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 36336 */ 2975, 0, 0, 0, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0, 1711, 0, 0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,\n' +
'  /* 36366 */ 2476, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200258, 151552,\n' +
'  /* 36394 */ 2200258, 0, 0, 0, 2486, 0, 0, 0, 0, 0, 0, 0, 2490, 2491, 0, 0, 2494, 0, 0, 2497, 0, 0, 0, 2515, 0, 0, 0,\n' +
'  /* 36421 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 2525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 2531, 541, 541, 541,\n' +
'  /* 36451 */ 541, 3406, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 3415, 541, 541, 2576, 541, 541, 541, 541,\n' +
'  /* 36471 */ 541, 541, 541, 541, 541, 2583, 541, 541, 541, 541, 1781, 541, 541, 541, 1785, 541, 541, 1790, 541, 541,\n' +
'  /* 36491 */ 541, 541, 541, 2827, 541, 541, 2830, 541, 541, 541, 541, 541, 541, 541, 2234, 2235, 541, 541, 541, 541,\n' +
'  /* 36511 */ 541, 541, 541, 563, 3069, 563, 563, 563, 563, 563, 563, 563, 0, 585, 585, 990, 585, 585, 585, 585, 585,\n' +
'  /* 36532 */ 2586, 541, 541, 541, 541, 541, 541, 541, 563, 2591, 563, 563, 563, 563, 563, 563, 563, 2602, 563, 563,\n' +
'  /* 36552 */ 563, 563, 563, 563, 563, 563, 2630, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2613, 563, 563, 563,\n' +
'  /* 36573 */ 563, 563, 563, 2618, 563, 563, 563, 563, 563, 563, 563, 3240, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 36594 */ 2881, 563, 563, 563, 563, 563, 563, 2698, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2705, 585, 585,\n' +
'  /* 36614 */ 585, 2708, 585, 0, 0, 3161, 0, 3163, 0, 0, 0, 3167, 0, 0, 0, 0, 0, 0, 0, 413, 413, 0, 0, 0, 0, 0, 413, 0,\n' +
'  /* 36642 */ 0, 2744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 2758, 2759, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 36673 */ 0, 0, 0, 1247, 1277, 1278, 0, 0, 0, 0, 0, 2774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2784, 2798, 0, 0, 0, 0, 0,\n' +
'  /* 36702 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2102, 0, 0, 541, 541, 2811, 541, 541, 541, 541, 541, 2816, 541, 541, 541,\n' +
'  /* 36727 */ 541, 541, 882, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1754, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 36748 */ 2836, 541, 541, 541, 541, 541, 541, 541, 541, 2841, 541, 541, 541, 2844, 541, 541, 541, 1342, 541, 541,\n' +
'  /* 36768 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2233, 541, 541, 541, 2236, 541, 541, 541, 541, 2241,\n' +
'  /* 36788 */ 2846, 541, 541, 541, 541, 541, 541, 2850, 541, 541, 541, 541, 541, 541, 563, 563, 3613, 563, 3614, 563,\n' +
'  /* 36808 */ 563, 563, 563, 563, 563, 2858, 563, 563, 563, 563, 563, 2863, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 36829 */ 563, 26029, 1279, 989, 585, 585, 585, 563, 563, 563, 2897, 563, 563, 563, 563, 563, 563, 0, 0, 585, 585,\n' +
'  /* 36850 */ 2905, 585, 0, 3160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 515, 522, 522, 585, 585, 585, 585, 2910, 585,\n' +
'  /* 36876 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1511, 585, 585, 585, 585, 585, 585, 585, 585, 2935, 585,\n' +
'  /* 36897 */ 585, 585, 2938, 585, 2940, 585, 585, 585, 585, 585, 585, 585, 2928, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 36917 */ 585, 1041, 585, 585, 585, 585, 585, 991, 585, 585, 2944, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541,\n' +
'  /* 36938 */ 541, 585, 541, 563, 2417, 541, 541, 541, 541, 563, 563, 563, 563, 585, 585, 585, 3261, 585, 585, 585, 585,\n' +
'  /* 36959 */ 585, 585, 585, 3266, 585, 3006, 0, 0, 0, 0, 0, 0, 0, 0, 3014, 0, 0, 3017, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,\n' +
'  /* 36987 */ 0, 0, 0, 0, 0, 0, 363, 0, 291, 0, 0, 0, 0, 541, 3036, 541, 541, 541, 541, 541, 541, 541, 3042, 541, 541,\n' +
'  /* 37012 */ 541, 541, 541, 541, 563, 1834, 563, 563, 563, 563, 563, 1839, 563, 563, 3076, 563, 563, 563, 563, 563,\n' +
'  /* 37032 */ 563, 563, 3082, 563, 563, 563, 563, 563, 563, 563, 563, 3423, 563, 563, 3425, 585, 585, 585, 585, 0, 3301,\n' +
'  /* 37053 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 1233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0,\n' +
'  /* 37085 */ 0, 0, 563, 563, 563, 563, 563, 3341, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3347, 563,\n' +
'  /* 37106 */ 563, 563, 563, 563, 563, 563, 563, 3352, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 37127 */ 585, 585, 585, 585, 3267, 3359, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 37147 */ 3370, 3453, 0, 541, 541, 541, 541, 541, 541, 541, 541, 3463, 541, 3465, 3466, 541, 3468, 541, 3609, 541,\n' +
'  /* 37167 */ 541, 541, 563, 563, 563, 563, 563, 563, 3615, 563, 3616, 563, 563, 563, 563, 563, 984, 563, 0, 585, 585,\n' +
'  /* 37188 */ 585, 585, 1000, 585, 585, 585, 585, 585, 585, 2661, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 37208 */ 2678, 585, 585, 585, 585, 585, 563, 585, 585, 585, 585, 585, 585, 3622, 585, 3623, 585, 585, 585, 541, 0,\n' +
'  /* 37229 */ 0, 0, 0, 0, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 2049, 0, 0, 0, 0, 563, 563, 563, 608, 611, 611, 611,\n' +
'  /* 37257 */ 541, 608, 608, 608, 585, 541, 563, 608, 541, 541, 541, 1767, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37278 */ 541, 541, 541, 1758, 1759, 541, 541, 608, 608, 608, 608, 608, 608, 608, 608, 541, 563, 541, 608, 608, 1,\n' +
'  /* 37299 */ 12290, 3, 0, 0, 1229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2128, 0, 2130, 585, 585, 1543, 541, 541,\n' +
'  /* 37325 */ 1546, 541, 0, 585, 541, 563, 585, 541, 541, 541, 541, 541, 1782, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37346 */ 541, 541, 2582, 541, 541, 541, 541, 541, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1279, 0, 2257,\n' +
'  /* 37373 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2326, 401, 0, 0, 0, 0, 379, 0,\n' +
'  /* 37396 */ 69632, 73728, 0, 0, 0, 0, 424, 65536, 0, 0, 0, 0, 0, 3560, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37420 */ 541, 2182, 541, 541, 2185, 541, 424, 424, 0, 424, 0, 438, 424, 0, 424, 469, 469, 469, 476, 469, 469, 469,\n' +
'  /* 37442 */ 469, 469, 469, 469, 469, 476, 469, 469, 469, 469, 469, 469, 469, 469, 483, 469, 495, 495, 469, 495, 495,\n' +
'  /* 37463 */ 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 538,\n' +
'  /* 37484 */ 551, 551, 551, 572, 595, 551, 572, 551, 551, 572, 572, 572, 595, 551, 551, 551, 551, 595, 595, 595, 595,\n' +
'  /* 37505 */ 551, 572, 595, 551, 595, 595, 595, 595, 595, 595, 595, 595, 551, 572, 551, 595, 595, 1, 12290, 3, 0, 0,\n' +
'  /* 37527 */ 665, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1249, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 37559 */ 0, 0, 1730, 0, 0, 0, 0, 0, 835, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667, 0, 667, 0, 0, 0, 0, 0, 0,\n' +
'  /* 37591 */ 734, 0, 747, 666, 0, 0, 0, 0, 0, 541, 541, 854, 541, 541, 541, 1813, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37614 */ 1821, 541, 541, 541, 541, 541, 1750, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1348, 541, 541,\n' +
'  /* 37634 */ 541, 541, 541, 1355, 541, 541, 541, 868, 541, 541, 541, 541, 541, 541, 541, 541, 541, 904, 541, 541, 541,\n' +
'  /* 37655 */ 541, 1798, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3218, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37676 */ 3223, 541, 541, 541, 563, 921, 563, 563, 563, 935, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3083, 563,\n' +
'  /* 37697 */ 563, 563, 563, 563, 563, 563, 971, 563, 563, 563, 563, 563, 0, 585, 585, 991, 585, 585, 585, 1005, 585, 0,\n' +
'  /* 37719 */ 3442, 0, 0, 3445, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 3566, 541, 541, 541, 541, 585,\n' +
'  /* 37744 */ 854, 541, 541, 904, 0, 0, 0, 585, 541, 563, 991, 541, 541, 904, 541, 541, 541, 1830, 541, 541, 563, 563,\n' +
'  /* 37766 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 963, 563, 541, 563, 563, 971, 563, 563, 0, 585, 585,\n' +
'  /* 37787 */ 1041, 585, 585, 289, 1084, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1087, 1091, 0, 0, 1095,\n' +
'  /* 37814 */ 1099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 37845 */ 0, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 1268, 1269, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 805, 0, 0,\n' +
'  /* 37875 */ 0, 0, 0, 1279, 852, 541, 1282, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1294, 1301, 541, 541, 541,\n' +
'  /* 37896 */ 541, 541, 541, 541, 541, 541, 1315, 541, 541, 541, 541, 541, 885, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 37917 */ 541, 541, 1771, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1360, 541, 541, 541, 541, 563, 1368, 563,\n' +
'  /* 37937 */ 563, 563, 563, 563, 563, 563, 563, 3535, 563, 563, 3537, 585, 585, 585, 585, 563, 563, 1380, 1387, 563,\n' +
'  /* 37957 */ 563, 563, 563, 563, 563, 563, 563, 563, 1401, 563, 563, 563, 563, 563, 985, 563, 0, 585, 585, 585, 585,\n' +
'  /* 37978 */ 585, 1003, 585, 1011, 563, 1419, 563, 563, 563, 563, 563, 563, 563, 1432, 563, 563, 563, 563, 563, 563,\n' +
'  /* 37998 */ 563, 2629, 563, 563, 563, 563, 563, 563, 2636, 563, 585, 585, 585, 1489, 585, 585, 585, 585, 585, 585,\n' +
'  /* 38018 */ 585, 585, 585, 585, 585, 585, 1513, 585, 585, 585, 541, 563, 563, 1432, 563, 563, 585, 585, 1520, 585,\n' +
'  /* 38038 */ 585, 1084, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 348, 346, 65536, 0, 0, 1593, 1594, 0, 0, 0, 0, 0,\n' +
'  /* 38064 */ 0, 0, 0, 0, 0, 0, 0, 0, 2167, 0, 0, 541, 541, 1766, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 38089 */ 541, 541, 3337, 541, 563, 541, 541, 1780, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 38110 */ 3525, 563, 563, 563, 563, 1845, 1846, 563, 563, 563, 563, 1853, 563, 563, 563, 563, 563, 563, 563, 1851,\n' +
'  /* 38130 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 3424, 563, 585, 585, 585, 585, 585, 563, 1892, 563, 563, 563,\n' +
'  /* 38151 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2310, 2311, 1944, 585, 585, 585, 585, 585, 585,\n' +
'  /* 38171 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 1972, 1958, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 38192 */ 585, 585, 585, 585, 585, 1989, 585, 2008, 585, 585, 585, 585, 585, 541, 541, 541, 541, 585, 541, 563, 585,\n' +
'  /* 38213 */ 541, 541, 2420, 2421, 563, 563, 2424, 2425, 585, 585, 2428, 0, 2116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 38238 */ 0, 0, 1279, 1744, 541, 541, 2216, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2227, 541, 541,\n' +
'  /* 38259 */ 541, 2026, 563, 563, 563, 2030, 585, 585, 585, 0, 2034, 0, 0, 0, 0, 0, 0, 684, 756, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 38285 */ 0, 0, 3605, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 2303, 563, 563, 563, 563, 563, 563,\n' +
'  /* 38306 */ 2308, 563, 563, 563, 563, 563, 563, 2642, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3346, 563,\n' +
'  /* 38326 */ 563, 563, 563, 563, 563, 563, 2313, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 585,\n' +
'  /* 38348 */ 585, 585, 585, 585, 585, 585, 585, 2374, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1534, 585,\n' +
'  /* 38369 */ 585, 585, 585, 2385, 585, 585, 585, 585, 585, 585, 2390, 585, 585, 585, 585, 585, 2395, 585, 585, 585,\n' +
'  /* 38389 */ 585, 585, 2936, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3551, 0, 0, 3554, 3555, 541, 2547,\n' +
'  /* 38410 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2225, 541, 541, 541, 0, 2799, 0, 0,\n' +
'  /* 38432 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1279, 1745, 2823, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 38457 */ 541, 541, 541, 541, 541, 2238, 541, 541, 541, 563, 563, 563, 563, 563, 2862, 563, 563, 563, 563, 563, 563,\n' +
'  /* 38478 */ 2870, 563, 563, 563, 563, 563, 563, 2878, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2651, 0, 585,\n' +
'  /* 38499 */ 585, 585, 585, 585, 585, 585, 2909, 585, 585, 585, 585, 585, 585, 2917, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 38520 */ 2937, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1983, 585, 585, 585, 585, 585, 585, 3179, 0, 0, 0, 0,\n' +
'  /* 38542 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2743, 585, 585, 585, 585, 3283, 585, 585, 585, 585, 585, 585, 585, 541,\n' +
'  /* 38567 */ 541, 585, 541, 563, 3154, 541, 3156, 563, 3158, 3570, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 38587 */ 3580, 563, 3582, 563, 563, 563, 563, 563, 1407, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1885,\n' +
'  /* 38607 */ 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 3592, 585, 3594, 585, 585, 585, 541, 0,\n' +
'  /* 38628 */ 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 563, 3619, 585, 585, 585, 585, 585,\n' +
'  /* 38656 */ 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 668, 0, 0, 671, 672, 0, 0, 0, 0, 0, 0, 0, 405, 405, 405,\n' +
'  /* 38683 */ 405, 0, 0, 0, 405, 0, 3654, 541, 541, 541, 541, 563, 3658, 563, 563, 563, 563, 585, 3662, 585, 585, 585,\n' +
'  /* 38705 */ 585, 585, 585, 3135, 585, 585, 3137, 585, 585, 585, 585, 585, 585, 585, 1493, 585, 585, 585, 585, 585,\n' +
'  /* 38725 */ 585, 585, 585, 1039, 585, 585, 585, 585, 585, 585, 585, 470, 470, 470, 454, 454, 470, 454, 454, 454, 454,\n' +
'  /* 38746 */ 454, 454, 454, 454, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 552,\n' +
'  /* 38767 */ 552, 552, 573, 596, 552, 573, 552, 552, 573, 573, 573, 596, 552, 552, 552, 552, 596, 596, 596, 596, 552,\n' +
'  /* 38788 */ 573, 596, 552, 596, 596, 596, 596, 596, 596, 596, 596, 552, 573, 552, 596, 596, 1, 12290, 3, 541, 541,\n' +
'  /* 38809 */ 869, 541, 541, 883, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2581, 541, 541, 541, 541, 541, 541,\n' +
'  /* 38830 */ 585, 1020, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1518, 585, 0, 1228, 0, 0,\n' +
'  /* 38852 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 38879 */ 541, 541, 1295, 563, 563, 1381, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 38899 */ 2895, 563, 563, 1441, 563, 563, 563, 563, 563, 563, 563, 563, 26029, 1279, 989, 585, 585, 585, 585, 585,\n' +
'  /* 38919 */ 585, 3272, 585, 585, 585, 585, 585, 585, 585, 3277, 585, 585, 1522, 585, 585, 585, 585, 585, 1529, 585,\n' +
'  /* 38939 */ 585, 585, 585, 585, 585, 585, 585, 585, 2691, 585, 585, 585, 585, 585, 585, 541, 563, 563, 563, 1558, 563,\n' +
'  /* 38960 */ 585, 585, 585, 1562, 585, 1084, 0, 1566, 0, 0, 0, 0, 0, 700, 0, 0, 0, 0, 363, 363, 363, 0, 0, 709, 0,\n' +
'  /* 38985 */ 1572, 0, 0, 0, 1578, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1608, 0,\n' +
'  /* 39016 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 1624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2168,\n' +
'  /* 39048 */ 0, 0, 563, 563, 563, 563, 1847, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1858, 563, 541, 541, 563,\n' +
'  /* 39069 */ 563, 585, 585, 0, 0, 3296, 0, 0, 0, 0, 0, 0, 0, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2749, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39099 */ 563, 563, 1878, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3087, 563, 0, 0,\n' +
'  /* 39120 */ 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2470, 0, 0, 0, 0, 0, 0, 2119, 0, 0, 0, 0, 0, 2125, 0, 0, 0,\n' +
'  /* 39151 */ 0, 0, 0, 0, 1187, 746, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0, 2135, 0, 0, 0, 0, 2140, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39181 */ 376, 0, 379, 0, 0, 0, 379, 0, 0, 2229, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 39204 */ 541, 541, 2556, 541, 541, 541, 2273, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 39225 */ 563, 2637, 563, 563, 2300, 563, 563, 563, 563, 2305, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3345,\n' +
'  /* 39245 */ 563, 563, 563, 563, 563, 563, 2327, 0, 0, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 39267 */ 585, 2371, 585, 585, 585, 2387, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 39287 */ 2383, 585, 563, 563, 563, 563, 3079, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3538,\n' +
'  /* 39307 */ 585, 585, 585, 585, 585, 585, 3119, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1514, 585,\n' +
'  /* 39328 */ 585, 585, 0, 0, 0, 3193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1588, 0, 1590, 0, 0, 0, 541, 541, 541, 541,\n' +
'  /* 39356 */ 3459, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3056, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563,\n' +
'  /* 39377 */ 563, 3474, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1433, 563, 563, 1437, 563, 563, 585, 585,\n' +
'  /* 39397 */ 585, 585, 3489, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 1816, 585, 541, 563, 585,\n' +
'  /* 39418 */ 541, 386, 388, 338, 0, 0, 0, 0, 0, 0, 337, 0, 0, 338, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39448 */ 363, 0, 303, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 131072,\n' +
'  /* 39476 */ 0, 131072, 131072, 131072, 131072, 0, 0, 0, 131072, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0,\n' +
'  /* 39499 */ 337, 0, 0, 439, 0, 445, 0, 471, 471, 471, 471, 471, 471, 471, 553, 553, 553, 574, 597, 553, 574, 553, 553,\n' +
'  /* 39522 */ 481, 471, 471, 471, 500, 477, 500, 500, 500, 500, 500, 500, 500, 500, 471, 471, 477, 471, 471, 471, 471,\n' +
'  /* 39543 */ 471, 471, 471, 471, 471, 471, 481, 471, 482, 481, 471, 471, 471, 471, 574, 574, 574, 597, 553, 553, 553,\n' +
'  /* 39564 */ 553, 597, 597, 597, 597, 553, 574, 597, 553, 597, 597, 597, 597, 597, 597, 597, 597, 553, 574, 553, 597,\n' +
'  /* 39585 */ 597, 1, 12290, 3, 0, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 0, 0, 0, 0, 698, 0, 0,\n' +
'  /* 39616 */ 0, 0, 0, 0, 363, 363, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1161, 0, 0, 755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39648 */ 0, 0, 0, 0, 0, 2755, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 0, 0, 0, 668, 0, 796, 0,\n' +
'  /* 39679 */ 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0,\n' +
'  /* 39710 */ 0, 0, 809, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 720, 0, 722, 0, 0, 0, 836, 0, 0,\n' +
'  /* 39741 */ 0, 668, 839, 0, 796, 0, 0, 0, 0, 0, 845, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39769 */ 1101, 0, 0, 1103, 0, 0, 0, 541, 541, 870, 541, 541, 884, 541, 541, 541, 895, 541, 541, 541, 541, 913, 541,\n' +
'  /* 39792 */ 541, 541, 2205, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1757, 541, 541, 541, 541, 541,\n' +
'  /* 39813 */ 541, 563, 922, 563, 563, 563, 937, 563, 563, 951, 563, 563, 563, 962, 563, 541, 3290, 563, 3292, 585,\n' +
'  /* 39833 */ 3294, 3295, 0, 0, 0, 0, 3299, 0, 0, 0, 0, 0, 0, 2081, 0, 0, 0, 0, 0, 0, 0, 0, 2089, 563, 563, 563, 980,\n' +
'  /* 39860 */ 563, 563, 563, 0, 585, 585, 992, 585, 585, 585, 1007, 585, 0, 3674, 541, 3675, 563, 3676, 585, 3677, 0,\n' +
'  /* 39881 */ 541, 563, 585, 0, 541, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 1084, 1565, 0, 0, 0, 0, 0, 0,\n' +
'  /* 39904 */ 2167, 2529, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 3323, 541, 541, 541, 541, 541, 585, 1021, 585, 585,\n' +
'  /* 39926 */ 585, 1032, 585, 585, 585, 585, 1050, 585, 585, 585, 992, 585, 541, 2957, 563, 2959, 585, 2961, 0, 0, 0, 0,\n' +
'  /* 39948 */ 0, 2967, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 1032, 855, 541, 895,\n' +
'  /* 39977 */ 541, 0, 0, 0, 585, 541, 563, 992, 541, 541, 541, 541, 541, 1832, 1833, 563, 1835, 563, 1836, 563, 1838,\n' +
'  /* 39998 */ 563, 563, 563, 0, 1108, 1109, 1110, 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142, 0, 0, 0, 0, 363, 363, 0,\n' +
'  /* 40025 */ 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0,\n' +
'  /* 40056 */ 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 372, 0, 65536, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 1111, 0, 0,\n' +
'  /* 40085 */ 0, 0, 0, 0, 1642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 40117 */ 0, 3013, 0, 0, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 2086, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 40148 */ 0, 0, 0, 2074, 0, 0, 0, 1253, 0, 0, 0, 0, 0, 0, 1149, 0, 0, 1264, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0,\n' +
'  /* 40178 */ 0, 0, 1652, 1653, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1296, 563, 563,\n' +
'  /* 40200 */ 1382, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1404, 541, 563, 563, 1557, 563, 563,\n' +
'  /* 40220 */ 585, 585, 1561, 585, 585, 1084, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 419, 0, 65536, 0, 0, 0, 1609,\n' +
'  /* 40245 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2495, 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 40277 */ 2101, 0, 541, 1764, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3222, 541, 541,\n' +
'  /* 40298 */ 541, 2090, 2091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2129, 0, 0, 541, 541, 541, 2176, 541, 541, 541,\n' +
'  /* 40325 */ 541, 541, 541, 541, 541, 541, 541, 541, 1352, 541, 541, 541, 541, 563, 563, 563, 563, 2315, 563, 563, 563,\n' +
'  /* 40346 */ 563, 563, 563, 563, 563, 563, 563, 0, 0, 585, 585, 585, 2906, 0, 0, 0, 585, 585, 585, 2334, 585, 585, 585,\n' +
'  /* 40369 */ 585, 585, 585, 585, 585, 585, 585, 1984, 585, 585, 585, 585, 585, 0, 2436, 0, 2438, 0, 0, 2441, 0, 0, 0,\n' +
'  /* 40392 */ 0, 0, 0, 2446, 0, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1262, 0, 0, 0, 0, 0, 0, 2449, 2450, 0, 0,\n' +
'  /* 40423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2509, 0, 0, 2460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0,\n' +
'  /* 40455 */ 2474, 0, 2475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2060, 0, 2061, 0, 0, 0, 0, 0, 2528, 0, 0, 0, 0, 0, 0,\n' +
'  /* 40485 */ 0, 541, 541, 541, 541, 541, 541, 541, 3568, 541, 541, 541, 541, 2549, 541, 2551, 541, 541, 541, 541, 2555,\n' +
'  /* 40506 */ 541, 541, 541, 541, 541, 1309, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3043, 541, 541, 541, 541,\n' +
'  /* 40527 */ 541, 541, 541, 541, 2561, 541, 541, 541, 541, 541, 541, 2567, 541, 541, 541, 541, 541, 1325, 541, 541,\n' +
'  /* 40547 */ 541, 541, 541, 541, 541, 541, 541, 541, 3220, 541, 541, 541, 541, 541, 541, 2575, 541, 541, 541, 541,\n' +
'  /* 40567 */ 2579, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3334, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563,\n' +
'  /* 40588 */ 563, 2600, 563, 563, 2603, 2604, 563, 563, 563, 563, 563, 2609, 563, 2611, 563, 563, 563, 563, 2615, 563,\n' +
'  /* 40608 */ 563, 563, 563, 563, 563, 563, 563, 2621, 563, 563, 2639, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 40629 */ 563, 563, 563, 563, 3245, 563, 585, 2671, 585, 2673, 585, 585, 585, 585, 2677, 585, 585, 585, 585, 585,\n' +
'  /* 40649 */ 585, 585, 585, 2352, 585, 585, 585, 585, 585, 585, 585, 585, 2377, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 40670 */ 2391, 585, 585, 585, 2394, 585, 585, 585, 585, 2683, 585, 585, 585, 585, 585, 585, 2689, 585, 585, 585,\n' +
'  /* 40690 */ 585, 585, 585, 2697, 585, 585, 585, 585, 2701, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 40710 */ 2368, 585, 585, 585, 585, 0, 0, 0, 0, 2746, 0, 0, 0, 0, 0, 0, 0, 2752, 2753, 2754, 0, 0, 0, 0, 0, 1159168,\n' +
'  /* 40736 */ 1159168, 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1, 12290, 3, 0, 0, 0, 2773, 0, 2775, 0, 0, 0,\n' +
'  /* 40755 */ 2778, 0, 0, 2781, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 298, 0, 0, 0, 0, 0, 0, 0, 2800,\n' +
'  /* 40785 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2522, 0, 0, 0, 0, 2809, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 40812 */ 541, 541, 541, 541, 541, 3336, 541, 541, 563, 563, 2874, 563, 563, 2877, 563, 563, 563, 563, 563, 563,\n' +
'  /* 40832 */ 563, 563, 563, 563, 563, 563, 26029, 0, 585, 585, 563, 563, 563, 563, 2887, 563, 563, 563, 563, 563, 563,\n' +
'  /* 40853 */ 563, 563, 563, 563, 563, 563, 26029, 1922, 585, 585, 563, 563, 2896, 563, 563, 2899, 563, 563, 2902, 563,\n' +
'  /* 40873 */ 0, 0, 2903, 585, 585, 585, 585, 585, 585, 3284, 585, 585, 585, 585, 585, 541, 541, 585, 541, 585, 585,\n' +
'  /* 40894 */ 2924, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2696, 585, 585, 585, 2934,\n' +
'  /* 40914 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2920, 585, 2943, 585, 585, 2946,\n' +
'  /* 40934 */ 585, 585, 2949, 585, 585, 585, 541, 541, 541, 2953, 2954, 2955, 0, 0, 3023, 0, 0, 3025, 0, 0, 541, 541,\n' +
'  /* 40956 */ 3030, 541, 541, 541, 541, 541, 1344, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2222, 2223, 541,\n' +
'  /* 40976 */ 541, 541, 541, 541, 541, 3049, 541, 541, 541, 541, 541, 541, 3055, 541, 541, 3057, 541, 541, 541, 541,\n' +
'  /* 40996 */ 541, 2193, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1756, 541, 541, 541, 541, 1762, 3089, 563,\n' +
'  /* 41016 */ 563, 563, 563, 563, 563, 3095, 563, 563, 3097, 563, 563, 563, 563, 563, 563, 563, 3251, 563, 563, 563,\n' +
'  /* 41036 */ 563, 563, 563, 563, 563, 1395, 563, 563, 563, 563, 563, 563, 563, 3214, 3215, 541, 541, 541, 541, 541,\n' +
'  /* 41056 */ 3219, 541, 541, 541, 541, 541, 541, 541, 3224, 563, 563, 3236, 3237, 563, 563, 563, 563, 3241, 3242, 563,\n' +
'  /* 41076 */ 563, 563, 563, 563, 3246, 3268, 3269, 585, 585, 585, 585, 585, 3273, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 41096 */ 3278, 0, 3391, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3328, 541, 541, 3404,\n' +
'  /* 41119 */ 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 1840, 563, 563, 563, 563, 563, 3419,\n' +
'  /* 41140 */ 563, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 3653, 0, 541, 0, 0, 541,\n' +
'  /* 41163 */ 541, 3457, 541, 541, 541, 541, 3462, 541, 541, 541, 541, 3467, 541, 541, 541, 2217, 2218, 541, 541, 541,\n' +
'  /* 41183 */ 541, 541, 541, 541, 541, 541, 541, 2228, 541, 563, 563, 3472, 563, 563, 563, 563, 3477, 563, 563, 563,\n' +
'  /* 41203 */ 563, 3482, 563, 563, 563, 563, 563, 1423, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 2329, 585,\n' +
'  /* 41224 */ 585, 585, 585, 585, 585, 3487, 585, 585, 585, 585, 3492, 585, 585, 585, 585, 3497, 585, 585, 541, 541,\n' +
'  /* 41244 */ 541, 903, 0, 0, 0, 585, 541, 563, 585, 859, 541, 1071, 908, 585, 3686, 3687, 3688, 3689, 0, 541, 563, 585,\n' +
'  /* 41266 */ 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 340, 341, 342, 343, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 41297 */ 2445, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2072, 0, 0, 0, 343, 343, 344, 343, 0,\n' +
'  /* 41327 */ 342, 343, 446, 455, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472,\n' +
'  /* 41348 */ 472, 487, 496, 496, 504, 496, 506, 496, 496, 506, 506, 496, 506, 521, 521, 521, 521, 521, 521, 521, 521,\n' +
'  /* 41369 */ 521, 521, 521, 521, 521, 521, 521, 521, 554, 554, 554, 575, 598, 554, 575, 554, 554, 575, 575, 575, 609,\n' +
'  /* 41390 */ 612, 612, 612, 554, 609, 609, 609, 598, 554, 575, 609, 554, 609, 609, 609, 609, 609, 609, 609, 609, 554,\n' +
'  /* 41411 */ 575, 554, 609, 609, 1, 12290, 3, 0, 0, 0, 0, 651, 0, 0, 0, 0, 656, 657, 658, 659, 660, 661, 662, 0, 680,\n' +
'  /* 41436 */ 681, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 0, 0, 0, 3385, 3181, 0, 0, 0, 0, 0, 0, 0, 726, 0, 728, 0, 0, 0, 0,\n' +
'  /* 41467 */ 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 821, 0, 0, 0, 0, 0, 0, 0, 651, 757,\n' +
'  /* 41499 */ 758, 759, 0, 0, 0, 0, 0, 765, 766, 0, 0, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0,\n' +
'  /* 41530 */ 795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 680, 728, 0, 697, 819, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 541,\n' +
'  /* 41559 */ 541, 541, 563, 585, 541, 563, 541, 541, 0, 0, 759, 828, 829, 0, 0, 0, 0, 0, 0, 759, 0, 0, 833, 704, 0, 0,\n' +
'  /* 41585 */ 0, 838, 0, 0, 0, 840, 0, 0, 0, 697, 704, 0, 0, 697, 0, 0, 0, 0, 0, 0, 704, 363, 363, 363, 0, 0, 0, 0, 0,\n' +
'  /* 41614 */ 0, 0, 0, 0, 1159, 0, 0, 0, 0, 838, 838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 541, 541, 541, 860, 864, 867, 541,\n' +
'  /* 41642 */ 875, 541, 541, 889, 891, 894, 541, 541, 541, 905, 909, 541, 541, 541, 541, 3517, 541, 541, 541, 541, 541,\n' +
'  /* 41663 */ 541, 541, 541, 563, 563, 563, 563, 563, 2595, 563, 563, 541, 541, 563, 563, 927, 931, 934, 563, 942, 563,\n' +
'  /* 41684 */ 563, 956, 958, 961, 563, 563, 563, 563, 563, 1424, 563, 563, 1431, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 41704 */ 1881, 563, 563, 563, 1886, 563, 563, 563, 563, 563, 972, 976, 563, 563, 563, 563, 0, 585, 585, 585, 997,\n' +
'  /* 41725 */ 1001, 1004, 585, 1012, 585, 585, 1026, 1028, 1031, 585, 585, 585, 1042, 1046, 585, 585, 585, 585, 585,\n' +
'  /* 41744 */ 585, 585, 1507, 585, 585, 585, 585, 585, 585, 585, 1520, 1073, 927, 563, 972, 976, 1078, 0, 997, 585,\n' +
'  /* 41764 */ 1042, 1046, 1083, 78113, 1084, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 747, 0, 753, 0, 0, 0, 0, 0, 0, 1612, 0, 0,\n' +
'  /* 41791 */ 0, 0, 0, 0, 0, 1620, 1621, 0, 1123, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 0,\n' +
'  /* 41821 */ 0, 0, 1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 363, 363, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 41852 */ 0, 0, 0, 0, 2980, 0, 0, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2145, 0, 1227, 0, 0, 1230, 0,\n' +
'  /* 41882 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2099, 0, 0, 0, 541, 541, 1338, 541, 541, 1345, 541, 541, 541, 541, 541,\n' +
'  /* 41908 */ 541, 541, 541, 541, 541, 3522, 541, 541, 3524, 563, 563, 563, 1358, 541, 541, 541, 541, 541, 541, 563,\n' +
'  /* 41928 */ 563, 563, 563, 563, 563, 563, 563, 563, 1841, 563, 1405, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 41948 */ 1415, 563, 563, 563, 563, 563, 563, 1425, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26029, 1279,\n' +
'  /* 41968 */ 989, 585, 585, 1457, 563, 563, 563, 1444, 563, 563, 563, 563, 563, 563, 26029, 1279, 989, 585, 585, 585,\n' +
'  /* 41988 */ 585, 585, 585, 3365, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2929, 585, 585, 585, 585, 585, 585,\n' +
'  /* 42009 */ 1503, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1512, 585, 585, 1519, 585, 585, 585, 585, 585, 3433,\n' +
'  /* 42029 */ 585, 3435, 585, 585, 585, 585, 585, 541, 541, 563, 563, 585, 585, 2962, 0, 0, 2965, 2966, 0, 0, 0, 0, 0,\n' +
'  /* 42052 */ 0, 0, 69632, 73728, 0, 0, 0, 0, 423, 65536, 0, 585, 1542, 585, 541, 1545, 541, 541, 0, 585, 541, 563, 585,\n' +
'  /* 42075 */ 541, 541, 541, 541, 541, 2563, 541, 541, 541, 541, 541, 541, 541, 541, 2572, 541, 1607, 0, 0, 0, 0, 0, 0,\n' +
'  /* 42098 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3004, 0, 0, 0, 1693,\n' +
'  /* 42129 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2169, 0, 0, 1709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 42161 */ 2170, 0, 0, 0, 1722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3178, 0, 0, 541, 1747, 541, 541, 541, 541,\n' +
'  /* 42188 */ 541, 1752, 541, 541, 541, 541, 541, 541, 541, 541, 1312, 541, 541, 541, 541, 541, 541, 541, 563, 1861,\n' +
'  /* 42208 */ 563, 563, 563, 563, 563, 563, 563, 563, 1868, 563, 563, 563, 1872, 563, 563, 563, 563, 563, 1446, 563,\n' +
'  /* 42228 */ 563, 563, 563, 26029, 1279, 989, 585, 1456, 585, 0, 3666, 0, 0, 541, 541, 541, 541, 563, 563, 563, 563,\n' +
'  /* 42249 */ 585, 585, 585, 3646, 3647, 585, 585, 541, 0, 0, 0, 0, 0, 541, 563, 1877, 563, 563, 563, 563, 563, 563,\n' +
'  /* 42271 */ 563, 563, 563, 563, 563, 563, 563, 563, 2324, 0, 563, 563, 1909, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 42292 */ 563, 26029, 0, 585, 1925, 585, 585, 1959, 585, 585, 585, 1963, 585, 585, 1968, 585, 585, 585, 585, 585,\n' +
'  /* 42312 */ 585, 585, 1932, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1048, 585, 585, 585, 585, 585, 585, 1087, 0,\n' +
'  /* 42333 */ 0, 0, 2037, 0, 1091, 0, 0, 0, 2039, 0, 1095, 0, 0, 0, 0, 0, 0, 1698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688,\n' +
'  /* 42362 */ 0, 241664, 258048, 0, 0, 2041, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3188, 0, 0, 0, 2076, 0, 0,\n' +
'  /* 42390 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2496, 0, 0, 2158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2742, 0,\n' +
'  /* 42422 */ 0, 0, 2462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 2649, 563, 563, 563, 0, 0, 0, 2652, 0,\n' +
'  /* 42450 */ 1922, 585, 585, 585, 585, 585, 585, 585, 1964, 1965, 1967, 585, 585, 585, 585, 585, 585, 541, 541, 3375,\n' +
'  /* 42470 */ 541, 3376, 563, 3377, 585, 0, 0, 585, 585, 2711, 585, 585, 585, 585, 585, 585, 541, 541, 541, 541, 585,\n' +
'  /* 42491 */ 541, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 1084, 0, 0, 1568, 0, 0, 0, 541, 2810, 541, 541,\n' +
'  /* 42513 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1774, 541, 541, 541, 541, 0, 0, 0, 2970, 0, 0, 0, 0, 0,\n' +
'  /* 42537 */ 0, 0, 0, 0, 0, 0, 0, 2111, 0, 0, 0, 3048, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 42562 */ 541, 541, 1805, 541, 541, 541, 541, 0, 0, 0, 0, 3320, 541, 541, 541, 541, 541, 541, 541, 3325, 541, 541,\n' +
'  /* 42584 */ 541, 541, 1814, 541, 541, 541, 541, 541, 1820, 541, 541, 541, 541, 541, 541, 3230, 541, 541, 541, 541,\n' +
'  /* 42604 */ 563, 563, 563, 563, 563, 563, 944, 563, 563, 563, 563, 563, 563, 563, 0, 585, 585, 993, 585, 585, 585,\n' +
'  /* 42625 */ 585, 585, 585, 585, 3361, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3128, 585,\n' +
'  /* 42646 */ 0, 3379, 0, 0, 3382, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 541, 3396, 541, 541, 3398, 541, 541, 541, 541,\n' +
'  /* 42672 */ 3390, 0, 0, 0, 0, 0, 0, 541, 541, 541, 3397, 541, 541, 541, 541, 3401, 563, 3416, 563, 563, 563, 563, 563,\n' +
'  /* 42695 */ 3422, 563, 563, 563, 585, 585, 585, 3427, 585, 585, 585, 585, 585, 3490, 585, 585, 585, 3494, 585, 585,\n' +
'  /* 42715 */ 585, 585, 585, 541, 541, 541, 541, 0, 1468, 1294, 1380, 585, 541, 541, 1346, 541, 585, 585, 585, 3431,\n' +
'  /* 42735 */ 585, 585, 585, 585, 585, 3437, 585, 585, 585, 541, 541, 563, 563, 585, 585, 0, 0, 2964, 0, 0, 0, 0, 0, 0,\n' +
'  /* 42759 */ 0, 541, 541, 541, 3565, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 3475, 563, 563, 563, 3479,\n' +
'  /* 42780 */ 563, 563, 563, 563, 563, 563, 563, 3343, 563, 563, 563, 563, 563, 563, 563, 563, 1430, 563, 563, 563, 563,\n' +
'  /* 42801 */ 563, 563, 563, 0, 3629, 0, 0, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 1373, 563, 563,\n' +
'  /* 42823 */ 563, 3685, 0, 541, 563, 585, 0, 541, 563, 585, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 3452, 387, 0,\n' +
'  /* 42850 */ 0, 0, 391, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1174, 0, 1176, 0, 0, 0, 0, 0, 0, 403, 0, 345, 0, 69632,\n' +
'  /* 42878 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147355, 1147355,\n' +
'  /* 42904 */ 1147355, 0, 1147355, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 555,\n' +
'  /* 42927 */ 555, 555, 576, 599, 555, 576, 555, 555, 576, 576, 576, 599, 555, 555, 555, 555, 599, 599, 599, 599, 555,\n' +
'  /* 42948 */ 576, 599, 555, 599, 599, 599, 599, 599, 599, 599, 599, 622, 627, 622, 599, 633, 1, 12290, 3, 0, 756, 0, 0,\n' +
'  /* 42971 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0, 563, 563, 563, 981, 563, 563, 563, 0, 585, 585, 585, 585,\n' +
'  /* 42997 */ 585, 585, 585, 585, 1044, 585, 585, 585, 585, 585, 585, 585, 1033, 541, 541, 896, 541, 0, 0, 0, 585, 541,\n' +
'  /* 43019 */ 563, 1068, 541, 541, 541, 541, 541, 2838, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1773, 541,\n' +
'  /* 43039 */ 541, 541, 541, 1777, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1191, 0, 0, 0, 1196, 0, 0, 0, 0, 1112, 0, 0, 0,\n' +
'  /* 43067 */ 0, 0, 0, 0, 0, 0, 0, 0, 2493, 0, 0, 0, 0, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 43093 */ 541, 541, 1297, 541, 541, 1321, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2224,\n' +
'  /* 43113 */ 541, 541, 541, 541, 563, 563, 1383, 563, 563, 563, 563, 1393, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 43133 */ 1451, 563, 26029, 1279, 989, 1455, 585, 585, 563, 563, 1442, 563, 563, 563, 563, 563, 563, 563, 26029,\n' +
'  /* 43152 */ 1279, 989, 585, 585, 585, 585, 585, 585, 3434, 585, 585, 585, 585, 585, 585, 541, 541, 563, 563, 585, 585,\n' +
'  /* 43173 */ 0, 0, 0, 0, 0, 0, 0, 0, 2968, 0, 1573, 0, 0, 0, 1579, 0, 0, 0, 1585, 0, 0, 0, 0, 0, 0, 0, 542, 542, 542,\n' +
'  /* 43202 */ 563, 586, 542, 563, 542, 542, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2127, 0, 0, 0, 1654, 0,\n' +
'  /* 43230 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0,\n' +
'  /* 43261 */ 0, 0, 1599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 2445312, 0, 2842624, 1793, 541, 541, 541, 541,\n' +
'  /* 43285 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2542, 541, 541, 541, 541, 0, 0, 0, 1574, 0, 0, 0,\n' +
'  /* 43308 */ 0, 0, 1580, 0, 0, 0, 0, 0, 1586, 2115, 0, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0,\n' +
'  /* 43339 */ 359, 0, 0, 0, 0, 2149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2521, 2471, 0, 0, 0, 2328, 0, 0, 585, 585, 585,\n' +
'  /* 43367 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3499, 541, 585, 2360, 585, 585, 585, 585, 2364,\n' +
'  /* 43387 */ 585, 2366, 585, 585, 585, 585, 585, 585, 585, 585, 2704, 585, 585, 585, 585, 585, 585, 585, 585, 1982,\n' +
'  /* 43407 */ 585, 585, 1985, 585, 585, 585, 585, 563, 563, 563, 563, 2626, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 43428 */ 563, 563, 563, 26029, 1923, 585, 585, 0, 0, 3380, 0, 0, 0, 0, 0, 0, 3181, 3387, 0, 0, 3389, 0, 0, 0, 0, 0,\n' +
'  /* 43454 */ 791, 0, 810, 0, 0, 0, 0, 541, 541, 856, 541, 0, 3454, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 43477 */ 541, 541, 541, 541, 2569, 541, 541, 541, 541, 541, 541, 871, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 43498 */ 541, 541, 541, 541, 2832, 2833, 541, 541, 541, 541, 919, 563, 563, 563, 563, 563, 938, 563, 563, 563, 563,\n' +
'  /* 43519 */ 563, 563, 563, 563, 1852, 563, 563, 563, 563, 563, 563, 563, 1088, 1092, 0, 0, 1096, 1100, 0, 0, 0, 0, 0,\n' +
'  /* 43542 */ 0, 0, 0, 0, 0, 1236, 0, 0, 0, 0, 1241, 541, 541, 541, 3217, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 43566 */ 541, 541, 541, 2842, 541, 541, 541, 541, 585, 585, 585, 3271, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 43587 */ 585, 585, 585, 1516, 585, 585, 585, 346, 346, 348, 346, 0, 0, 346, 0, 346, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0,\n' +
'  /* 43613 */ 800, 668, 849, 0, 0, 0, 0, 541, 541, 855, 541, 0, 0, 0, 346, 346, 348, 346, 346, 346, 346, 346, 346, 513,\n' +
'  /* 43637 */ 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 556, 556, 556, 577, 600,\n' +
'  /* 43658 */ 556, 577, 556, 556, 577, 577, 577, 600, 556, 556, 556, 556, 600, 600, 600, 600, 556, 577, 600, 556, 600,\n' +
'  /* 43679 */ 600, 600, 600, 600, 600, 600, 600, 556, 577, 556, 600, 600, 1, 12290, 3, 0, 0, 727, 0, 729, 0, 0, 0, 0, 0,\n' +
'  /* 43704 */ 0, 0, 0, 0, 0, 0, 2751, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 541,\n' +
'  /* 43735 */ 541, 563, 563, 928, 563, 563, 563, 563, 946, 563, 563, 563, 563, 964, 966, 563, 563, 977, 563, 563, 563,\n' +
'  /* 43756 */ 563, 0, 585, 585, 585, 998, 585, 585, 585, 585, 585, 585, 1528, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 43777 */ 585, 585, 3138, 585, 3140, 585, 585, 585, 1016, 585, 585, 585, 585, 1034, 1036, 585, 585, 1047, 585, 585,\n' +
'  /* 43797 */ 585, 585, 1057, 585, 585, 585, 585, 585, 3546, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 0, 0, 2987,\n' +
'  /* 43820 */ 2988, 0, 2989, 0, 2991, 0, 0, 0, 1034, 1060, 541, 897, 541, 0, 0, 0, 585, 541, 563, 1057, 861, 899, 541,\n' +
'  /* 43843 */ 910, 541, 928, 966, 563, 977, 563, 0, 998, 1036, 585, 1047, 585, 78113, 1084, 0, 0, 0, 0, 0, 804, 0, 0, 0,\n' +
'  /* 43867 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 804, 0, 0, 0, 0, 363, 363, 0, 0, 1153, 0, 0, 0, 1156, 0, 1158, 0, 1160, 0, 0,\n' +
'  /* 43896 */ 0, 0, 0, 0, 1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 2846720, 0, 2916352, 0, 0, 0, 1181, 0, 0, 0, 0,\n' +
'  /* 43923 */ 1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 122880, 122880, 0, 0, 1267, 0, 0, 0, 1271, 0, 0, 0, 0, 1274,\n' +
'  /* 43950 */ 0, 0, 0, 0, 0, 0, 0, 560, 560, 560, 581, 604, 560, 581, 560, 560, 0, 1186, 1279, 852, 541, 541, 541, 541,\n' +
'  /* 43974 */ 541, 541, 541, 541, 541, 541, 541, 541, 2854, 541, 541, 563, 563, 541, 1336, 541, 541, 541, 541, 541, 541,\n' +
'  /* 43995 */ 541, 1350, 541, 541, 541, 541, 541, 541, 1783, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3231, 541,\n' +
'  /* 44015 */ 541, 541, 563, 563, 563, 563, 563, 936, 563, 563, 950, 563, 563, 563, 563, 563, 541, 541, 1361, 1362, 541,\n' +
'  /* 44036 */ 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1854, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 44057 */ 563, 1422, 563, 563, 563, 563, 563, 563, 563, 1436, 563, 563, 563, 563, 563, 563, 2888, 563, 563, 563,\n' +
'  /* 44077 */ 2891, 563, 2893, 563, 563, 563, 563, 563, 563, 2601, 563, 563, 563, 563, 563, 2606, 563, 563, 563, 563,\n' +
'  /* 44097 */ 563, 563, 2627, 563, 563, 563, 563, 563, 563, 2635, 563, 563, 585, 585, 1488, 1490, 585, 585, 585, 585,\n' +
'  /* 44117 */ 585, 585, 585, 585, 585, 585, 585, 585, 1938, 585, 585, 585, 585, 585, 1524, 585, 585, 585, 585, 585, 585,\n' +
'  /* 44138 */ 585, 585, 1535, 1536, 585, 585, 585, 585, 585, 1033, 585, 585, 585, 585, 1051, 585, 585, 585, 585, 585,\n' +
'  /* 44158 */ 585, 585, 3121, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1532, 585, 585, 585, 585, 585, 585, 1541,\n' +
'  /* 44178 */ 585, 585, 1544, 541, 541, 1547, 0, 585, 541, 563, 585, 541, 1552, 541, 541, 541, 541, 3574, 3575, 3576,\n' +
'  /* 44198 */ 563, 563, 563, 3579, 563, 3581, 563, 563, 563, 563, 563, 563, 2278, 563, 563, 563, 563, 2282, 563, 2284,\n' +
'  /* 44218 */ 563, 563, 1555, 563, 1556, 563, 563, 1559, 585, 1560, 585, 585, 1563, 1084, 0, 0, 0, 0, 0, 0, 0, 69632,\n' +
'  /* 44240 */ 73728, 0, 418, 418, 0, 0, 65536, 418, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2767, 0, 0, 0, 0,\n' +
'  /* 44269 */ 1810, 541, 541, 541, 1815, 541, 541, 541, 541, 541, 541, 541, 541, 1823, 541, 541, 541, 876, 880, 886,\n' +
'  /* 44289 */ 890, 541, 541, 541, 541, 541, 906, 541, 541, 541, 541, 2206, 541, 2208, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 44310 */ 541, 541, 1329, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1829, 541, 541, 541, 563, 563, 563, 563, 563,\n' +
'  /* 44331 */ 1837, 563, 563, 563, 563, 563, 563, 1426, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1413, 563, 563,\n' +
'  /* 44351 */ 563, 563, 563, 563, 563, 563, 563, 1862, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1435,\n' +
'  /* 44372 */ 563, 563, 563, 563, 563, 563, 1910, 563, 563, 563, 563, 1916, 563, 563, 563, 26029, 0, 585, 585, 585, 585,\n' +
'  /* 44393 */ 585, 2948, 585, 585, 585, 585, 541, 541, 541, 585, 541, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585,\n' +
'  /* 44414 */ 1084, 0, 0, 0, 1569, 585, 585, 585, 1928, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 44435 */ 2409, 541, 541, 2412, 585, 585, 1993, 585, 585, 585, 585, 585, 585, 585, 585, 2001, 585, 585, 585, 585,\n' +
'  /* 44455 */ 585, 585, 1931, 585, 585, 585, 585, 585, 585, 585, 585, 1942, 2007, 585, 585, 585, 585, 585, 585, 541,\n' +
'  /* 44475 */ 541, 541, 541, 585, 541, 563, 585, 541, 541, 541, 905, 0, 0, 0, 1065, 1066, 1067, 585, 860, 541, 905, 909,\n' +
'  /* 44497 */ 2063, 2064, 0, 2066, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2780, 0, 0, 0, 0, 2103, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 44526 */ 0, 0, 0, 0, 0, 0, 0, 0, 2912256, 2131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2141, 0, 2143, 0, 0, 0, 0, 0, 0, 2069,\n' +
'  /* 44555 */ 2070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2805, 0, 0, 0, 0, 0, 0, 0, 2173, 541, 541, 541, 541, 541, 2179, 541, 541,\n' +
'  /* 44582 */ 541, 541, 541, 541, 541, 541, 1753, 541, 541, 541, 541, 541, 541, 541, 541, 2203, 541, 541, 541, 541, 541,\n' +
'  /* 44603 */ 541, 2209, 541, 2211, 541, 2214, 541, 541, 541, 541, 1831, 541, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 44623 */ 563, 563, 563, 3244, 563, 563, 563, 563, 563, 2287, 563, 2290, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 44643 */ 563, 563, 2296, 563, 563, 563, 563, 563, 1447, 1448, 563, 563, 563, 26029, 1279, 989, 585, 585, 585, 585,\n' +
'  /* 44663 */ 585, 585, 3491, 585, 585, 585, 585, 585, 585, 585, 585, 541, 563, 541, 585, 585, 1, 12290, 3, 563, 563,\n' +
'  /* 44684 */ 563, 563, 2302, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 585, 3426, 585, 585, 3428, 0, 0, 0,\n' +
'  /* 44706 */ 2331, 585, 585, 585, 585, 585, 2337, 585, 585, 585, 585, 585, 585, 585, 2662, 585, 585, 2665, 2666, 585,\n' +
'  /* 44726 */ 585, 585, 585, 585, 585, 585, 2361, 585, 585, 585, 585, 585, 585, 2367, 585, 2369, 585, 2372, 585, 585,\n' +
'  /* 44746 */ 585, 585, 1463, 585, 585, 585, 1472, 585, 585, 585, 585, 585, 585, 585, 585, 3123, 585, 585, 585, 585,\n' +
'  /* 44766 */ 585, 585, 585, 585, 2714, 541, 541, 2716, 2717, 585, 541, 563, 2435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 44791 */ 0, 0, 0, 2797, 0, 2473, 0, 0, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 2527, 0, 0, 0, 0, 0,\n' +
'  /* 44821 */ 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 3035, 2546, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 44843 */ 541, 541, 541, 541, 541, 3221, 541, 541, 541, 541, 2622, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 44864 */ 563, 563, 563, 563, 563, 2648, 585, 585, 2684, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 44885 */ 585, 1056, 585, 585, 585, 2722, 541, 541, 541, 2724, 563, 563, 563, 2726, 585, 585, 585, 2728, 2729, 0, 0,\n' +
'  /* 44906 */ 0, 0, 0, 2494464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797568, 0, 0, 0, 0, 563, 563, 2860, 563, 2861, 563,\n' +
'  /* 44932 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1434, 563, 563, 563, 563, 563, 563, 563, 563, 2898, 563,\n' +
'  /* 44953 */ 563, 563, 563, 563, 0, 0, 585, 585, 585, 585, 585, 585, 1949, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 44975 */ 585, 1969, 585, 585, 585, 585, 585, 2907, 585, 2908, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 44995 */ 585, 585, 585, 1939, 585, 585, 585, 585, 2945, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 585, 541,\n' +
'  /* 45016 */ 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 1084, 0, 1567, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0,\n' +
'  /* 45041 */ 541, 541, 853, 541, 0, 0, 0, 0, 2984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2795, 0, 0, 0, 0, 0, 0, 0, 3381, 0,\n' +
'  /* 45071 */ 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 562, 562, 562, 583, 606, 562, 583, 562, 562, 0, 0, 0, 3393, 0, 0,\n' +
'  /* 45098 */ 0, 3395, 541, 541, 541, 541, 3399, 541, 541, 541, 541, 2192, 541, 541, 541, 541, 2197, 541, 541, 541, 541,\n' +
'  /* 45119 */ 541, 541, 1366, 563, 563, 563, 563, 563, 563, 563, 1375, 563, 3429, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 45139 */ 585, 585, 3438, 585, 585, 541, 541, 563, 563, 585, 585, 0, 2963, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 274432,\n' +
'  /* 45162 */ 274432, 0, 0, 0, 274432, 0, 541, 541, 541, 3516, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563,\n' +
'  /* 45183 */ 563, 2252, 563, 563, 563, 563, 563, 563, 3529, 563, 563, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585,\n' +
'  /* 45204 */ 585, 585, 585, 585, 585, 585, 585, 3595, 585, 585, 541, 0, 585, 3542, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 45225 */ 585, 585, 541, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0, 65536, 135168, 0, 3557, 0, 0,\n' +
'  /* 45248 */ 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3327, 541, 0, 0, 3630, 0, 541, 541, 541, 541,\n' +
'  /* 45271 */ 541, 3636, 541, 563, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 289, 1084, 0, 0, 3642, 563, 585, 585,\n' +
'  /* 45293 */ 585, 585, 585, 3648, 585, 541, 3650, 0, 3652, 0, 0, 541, 541, 541, 541, 2813, 541, 2814, 541, 541, 541,\n' +
'  /* 45314 */ 541, 541, 541, 541, 2248, 2249, 563, 563, 563, 563, 563, 2255, 563, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 45339 */ 0, 0, 0, 0, 2807, 0, 399, 0, 0, 0, 0, 0, 366, 374, 402, 0, 0, 0, 0, 0, 366, 0, 0, 394, 0, 0, 0, 0, 349, 0,\n' +
'  /* 45369 */ 0, 366, 0, 394, 0, 407, 409, 0, 0, 366, 374, 0, 69632, 73728, 0, 0, 0, 0, 425, 65536, 0, 0, 0, 0, 0,\n' +
'  /* 45394 */ 3112960, 0, 0, 0, 0, 0, 0, 2387968, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536,\n' +
'  /* 45409 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2699264, 2125824, 2715648, 2125824, 2723840,\n' +
'  /* 45420 */ 2125824, 2732032, 2772992, 2125824, 2125824, 425, 425, 0, 425, 0, 409, 425, 448, 456, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 45441 */ 0, 122880, 122880, 122880, 0, 0, 2105630, 12290, 3, 0, 407, 0, 497, 497, 0, 497, 497, 497, 497, 497, 497,\n' +
'  /* 45462 */ 497, 497, 523, 523, 523, 523, 456, 456, 456, 531, 456, 532, 456, 456, 523, 537, 523, 523, 523, 523, 539,\n' +
'  /* 45483 */ 557, 557, 557, 578, 601, 557, 578, 557, 557, 578, 578, 578, 601, 613, 613, 613, 557, 601, 601, 601, 601,\n' +
'  /* 45504 */ 557, 578, 601, 557, 601, 601, 601, 601, 601, 601, 601, 601, 623, 628, 623, 601, 634, 1, 12290, 3, 0, 648,\n' +
'  /* 45526 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2981, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 363, 363, 363, 0, 0, 0,\n' +
'  /* 45558 */ 0, 0, 0, 0, 1157, 0, 0, 0, 0, 1162, 0, 791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2992, 0, 0, 0, 0,\n' +
'  /* 45590 */ 810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2147, 0, 0, 0, 541, 541, 563, 923, 563, 563, 563, 563, 563, 563,\n' +
'  /* 45617 */ 952, 563, 563, 563, 563, 563, 563, 585, 585, 3110, 585, 585, 585, 585, 585, 585, 585, 585, 2663, 585, 585,\n' +
'  /* 45638 */ 585, 585, 585, 2668, 585, 585, 1022, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 993,\n' +
'  /* 45658 */ 1058, 585, 856, 1061, 541, 541, 0, 0, 0, 585, 541, 563, 993, 541, 541, 541, 541, 541, 3407, 541, 541, 541,\n' +
'  /* 45680 */ 563, 563, 563, 3412, 563, 563, 563, 0, 1165, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2796, 0, 0, 0,\n' +
'  /* 45707 */ 1242, 0, 0, 0, 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541,\n' +
'  /* 45736 */ 3031, 541, 541, 541, 541, 0, 0, 0, 1247, 1256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2978, 0, 0, 0, 0, 1247, 0,\n' +
'  /* 45764 */ 1279, 852, 541, 541, 541, 541, 541, 1287, 541, 541, 541, 1291, 541, 541, 541, 877, 541, 541, 541, 541,\n' +
'  /* 45784 */ 541, 541, 541, 541, 541, 911, 541, 541, 541, 1305, 541, 541, 541, 1310, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 45805 */ 541, 563, 563, 2592, 563, 563, 563, 563, 563, 1302, 541, 541, 1306, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 45825 */ 541, 541, 541, 541, 541, 1802, 1803, 541, 541, 541, 541, 541, 541, 1377, 563, 563, 1388, 563, 563, 1392,\n' +
'  /* 45845 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 1917, 563, 563, 26029, 1922, 585, 585, 585, 585, 1461, 585,\n' +
'  /* 45865 */ 585, 585, 1465, 585, 585, 1476, 585, 585, 1480, 585, 585, 585, 585, 585, 1464, 585, 585, 585, 585, 585,\n' +
'  /* 45885 */ 585, 1479, 585, 585, 585, 541, 541, 541, 541, 1208, 585, 541, 563, 585, 541, 541, 541, 541, 0, 0, 0, 585,\n' +
'  /* 45907 */ 541, 563, 585, 541, 541, 541, 541, 0, 0, 0, 585, 541, 563, 585, 541, 541, 541, 911, 0, 0, 0, 1595, 1596,\n' +
'  /* 45930 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2990, 0, 0, 0, 0, 0, 0, 0, 1641, 0, 1643, 0, 0, 0, 1647, 0, 0, 0, 1651,\n' +
'  /* 45960 */ 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 45994 */ 3512, 541, 541, 1779, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2221, 541,\n' +
'  /* 46014 */ 541, 541, 541, 541, 541, 541, 541, 1828, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 46035 */ 563, 1901, 563, 563, 563, 563, 563, 0, 0, 2077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150976, 0, 0, 0,\n' +
'  /* 46062 */ 0, 0, 2146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225707, 0, 0, 541, 541, 2175, 541, 541, 541, 541,\n' +
'  /* 46090 */ 541, 541, 541, 541, 541, 541, 541, 541, 2539, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 2314, 563,\n' +
'  /* 46111 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 585, 2904, 585, 585, 0, 0, 0, 585, 585, 2333, 585,\n' +
'  /* 46134 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3439, 585, 541, 541, 563, 585, 2386, 585, 585, 585, 585,\n' +
'  /* 46155 */ 585, 585, 585, 585, 585, 585, 585, 585, 2396, 585, 585, 585, 585, 1491, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 46176 */ 585, 585, 585, 585, 585, 2942, 585, 585, 585, 2429, 0, 1568, 0, 1574, 0, 1580, 0, 1586, 0, 0, 0, 0, 0, 0,\n' +
'  /* 46200 */ 0, 0, 172032, 172032, 172032, 172032, 172032, 1, 12290, 3, 2524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541,\n' +
'  /* 46223 */ 541, 541, 541, 541, 541, 541, 541, 541, 563, 2623, 563, 563, 563, 563, 563, 563, 563, 563, 2632, 563, 563,\n' +
'  /* 46244 */ 563, 563, 563, 563, 585, 3109, 585, 585, 585, 585, 585, 585, 585, 585, 1468, 1475, 585, 585, 585, 585,\n' +
'  /* 46264 */ 585, 585, 585, 585, 585, 2685, 585, 585, 585, 585, 585, 585, 585, 585, 2694, 585, 585, 585, 585, 585,\n' +
'  /* 46284 */ 1492, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2941, 585, 585, 585, 585, 0, 0, 0, 0, 2760,\n' +
'  /* 46306 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3002, 0, 0, 0, 0, 0, 2171, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 46333 */ 541, 541, 541, 541, 541, 2566, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 2876, 563, 563, 563, 563,\n' +
'  /* 46354 */ 563, 563, 563, 563, 563, 563, 563, 563, 1870, 563, 563, 563, 585, 2923, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 46375 */ 585, 585, 585, 585, 585, 585, 585, 1539, 585, 0, 0, 0, 2994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2806, 0,\n' +
'  /* 46402 */ 0, 0, 0, 0, 3008, 3009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3020, 3171, 3172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 46432 */ 0, 0, 0, 0, 1134592, 0, 3202, 0, 3204, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 46454 */ 2851, 541, 541, 541, 541, 541, 563, 563, 541, 541, 3227, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563,\n' +
'  /* 46475 */ 563, 563, 563, 563, 2596, 563, 585, 585, 3281, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 585,\n' +
'  /* 46496 */ 541, 541, 541, 907, 0, 0, 0, 585, 541, 563, 585, 541, 541, 907, 541, 0, 0, 0, 3312, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 46522 */ 0, 0, 0, 0, 0, 3177, 0, 0, 0, 0, 0, 3319, 0, 541, 541, 541, 3321, 541, 541, 541, 3324, 541, 541, 541, 541,\n' +
'  /* 46547 */ 541, 3612, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 585, 585, 585, 3357, 585, 585, 563, 563,\n' +
'  /* 46567 */ 3339, 563, 563, 563, 3342, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2280, 563, 563, 2283, 563, 563,\n' +
'  /* 46587 */ 563, 585, 3360, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1941, 585, 541,\n' +
'  /* 46607 */ 3403, 541, 3405, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 1882, 563, 563, 563, 563,\n' +
'  /* 46627 */ 563, 563, 563, 563, 2291, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3418, 563, 3420, 563, 563,\n' +
'  /* 46647 */ 563, 563, 563, 585, 585, 585, 585, 585, 585, 585, 541, 0, 3651, 0, 0, 0, 541, 541, 3571, 541, 541, 563,\n' +
'  /* 46669 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 3583, 563, 563, 563, 563, 563, 1848, 563, 563, 563, 563, 563,\n' +
'  /* 46690 */ 563, 563, 563, 563, 563, 1918, 563, 26029, 0, 585, 585, 3599, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 3606, 541,\n' +
'  /* 46714 */ 3607, 541, 541, 541, 1322, 541, 541, 541, 541, 541, 541, 1330, 541, 541, 1332, 541, 541, 541, 541, 2826,\n' +
'  /* 46734 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1317, 541, 541, 541, 541, 563, 585, 585, 3620, 585,\n' +
'  /* 46755 */ 3621, 585, 585, 585, 585, 585, 585, 585, 541, 0, 0, 0, 0, 0, 810, 0, 0, 791, 0, 0, 0, 0, 810, 0, 0, 0, 0,\n' +
'  /* 46782 */ 0, 0, 0, 810, 0, 408, 354, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 3112960, 0,\n' +
'  /* 46809 */ 0, 0, 0, 0, 0, 2388819, 2126675, 2126675, 2126675, 2126675, 3027795, 2404352, 2179072, 2179072, 2179072,\n' +
'  /* 46824 */ 2179072, 3026944, 2405340, 2126812, 2126812, 2126812, 2126812, 2524124, 2126812, 2126812, 2126812,\n' +
'  /* 46835 */ 2126812, 2126812, 2126812, 2126812, 2126812, 2601948, 2126812, 2126812, 473, 484, 473, 0, 0, 473, 0, 0, 0,\n' +
'  /* 46852 */ 0, 0, 0, 0, 0, 524, 524, 528, 528, 528, 528, 473, 473, 473, 473, 473, 478, 473, 473, 528, 524, 528, 528,\n' +
'  /* 46875 */ 528, 528, 540, 558, 558, 558, 579, 602, 558, 579, 558, 558, 579, 579, 579, 602, 558, 558, 558, 558, 602,\n' +
'  /* 46896 */ 602, 602, 602, 558, 579, 602, 558, 602, 602, 602, 602, 602, 602, 602, 602, 624, 629, 624, 602, 635, 1,\n' +
'  /* 46917 */ 12290, 3, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 743, 0, 0, 0, 649, 743, 0,\n' +
'  /* 46946 */ 749, 750, 649, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254414, 254414, 254414, 254414, 254414,\n' +
'  /* 46970 */ 254414, 254414, 0, 0, 807, 0, 812, 0, 0, 0, 0, 0, 0, 812, 0, 0, 0, 0, 0, 649, 0, 0, 0, 807, 0, 812, 0,\n' +
'  /* 46997 */ 798, 0, 827, 0, 0, 0, 670, 0, 0, 0, 0, 827, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 314, 315, 315, 420, 421,\n' +
'  /* 47023 */ 65536, 428, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 0, 1629, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 47053 */ 111051, 111051, 111051, 111051, 111051, 111051, 111051, 0, 0, 798, 798, 0, 649, 0, 0, 798, 812, 850, 0,\n' +
'  /* 47072 */ 541, 541, 857, 541, 541, 541, 2231, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2213, 541,\n' +
'  /* 47093 */ 541, 541, 541, 541, 563, 924, 563, 563, 563, 563, 943, 947, 953, 957, 563, 563, 563, 563, 563, 563, 1428,\n' +
'  /* 47114 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2292, 563, 563, 563, 563, 563, 563, 563, 973, 563, 563, 563,\n' +
'  /* 47135 */ 563, 563, 0, 585, 585, 994, 585, 585, 585, 585, 1013, 1017, 1023, 1027, 585, 585, 585, 585, 585, 1043,\n' +
'  /* 47155 */ 585, 585, 585, 585, 585, 994, 585, 585, 585, 585, 1505, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 47176 */ 585, 1953, 585, 585, 585, 585, 585, 857, 541, 541, 1063, 0, 0, 0, 585, 541, 563, 994, 541, 541, 906, 541,\n' +
'  /* 47198 */ 541, 541, 2245, 541, 541, 541, 541, 563, 563, 563, 563, 2253, 563, 563, 563, 563, 563, 563, 2304, 563,\n' +
'  /* 47218 */ 563, 563, 563, 563, 563, 563, 563, 563, 2266, 563, 563, 563, 563, 563, 563, 541, 563, 563, 973, 563, 563,\n' +
'  /* 47239 */ 0, 585, 585, 1043, 585, 585, 78113, 1084, 0, 0, 0, 0, 0, 813, 0, 0, 697, 0, 0, 677, 0, 697, 0, 818, 1136,\n' +
'  /* 47264 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 363, 363, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 47295 */ 0, 0, 1602, 0, 0, 0, 1605, 0, 1197, 0, 1200, 0, 0, 0, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 0, 0, 204800, 204800,\n' +
'  /* 47322 */ 205104, 0, 204800, 1, 12290, 3, 0, 0, 0, 0, 1216, 0, 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 820, 0,\n' +
'  /* 47349 */ 817, 800, 0, 0, 822, 0, 672, 0, 796, 0, 0, 0, 1254, 0, 1257, 1205, 0, 1238, 1260, 0, 1263, 0, 0, 0, 0, 0,\n' +
'  /* 47375 */ 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 0, 1135, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 0, 1272, 0, 0,\n' +
'  /* 47401 */ 1154, 1272, 0, 1279, 852, 1281, 541, 541, 541, 1286, 541, 541, 541, 541, 1292, 541, 541, 541, 1323, 541,\n' +
'  /* 47421 */ 541, 1326, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1819, 541, 541, 541, 541, 541, 1824, 541, 1378,\n' +
'  /* 47441 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1399, 563, 563, 563, 563, 563, 563, 1850, 563, 563, 563,\n' +
'  /* 47462 */ 563, 563, 563, 563, 563, 563, 2320, 563, 563, 563, 563, 563, 0, 563, 563, 1420, 563, 563, 563, 1427, 1429,\n' +
'  /* 47483 */ 563, 563, 563, 563, 563, 563, 563, 563, 2265, 563, 563, 563, 563, 563, 563, 563, 585, 1460, 585, 585, 585,\n' +
'  /* 47504 */ 585, 1466, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2407, 585, 585, 2410, 541, 541, 585, 1487,\n' +
'  /* 47524 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1498, 585, 585, 585, 585, 585, 1930, 585, 585, 585, 585,\n' +
'  /* 47545 */ 585, 585, 585, 585, 585, 585, 585, 3275, 585, 585, 585, 585, 1502, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 47565 */ 1508, 585, 585, 585, 1515, 1517, 585, 585, 585, 585, 585, 3134, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 47585 */ 3142, 585, 0, 0, 1574, 0, 0, 0, 1580, 0, 0, 0, 1586, 0, 0, 0, 0, 0, 0, 0, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 47615 */ 2530, 0, 1744, 541, 541, 541, 541, 0, 0, 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3016, 0, 0, 0, 0, 0,\n' +
'  /* 47644 */ 0, 0, 0, 1723, 0, 0, 1726, 0, 0, 0, 0, 0, 0, 0, 1723, 1843, 563, 563, 563, 563, 1849, 563, 563, 563, 563,\n' +
'  /* 47669 */ 563, 563, 563, 563, 563, 563, 2281, 563, 563, 563, 563, 563, 1860, 563, 563, 563, 563, 1864, 563, 563,\n' +
'  /* 47689 */ 563, 563, 563, 563, 563, 563, 563, 563, 2293, 2294, 563, 563, 563, 563, 1875, 563, 563, 1879, 563, 563,\n' +
'  /* 47709 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1904, 1905, 563, 563, 585, 585, 585, 585, 1995, 1996,\n' +
'  /* 47729 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1477, 585, 585, 585, 585, 585, 2023, 541, 541, 563,\n' +
'  /* 47749 */ 2027, 563, 563, 585, 2031, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 3451, 0, 0, 0, 2065, 0, 0,\n' +
'  /* 47776 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2617344, 0, 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 2084, 2085, 0, 0, 2087,\n' +
'  /* 47804 */ 2088, 0, 0, 0, 0, 0, 3112960, 852, 0, 0, 0, 852, 0, 2387968, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 47823 */ 2125824, 3178496, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2494464, 0, 0,\n' +
'  /* 47836 */ 0, 2106, 0, 0, 0, 0, 0, 2110, 0, 0, 0, 0, 2113, 2114, 2187, 541, 541, 2191, 541, 541, 541, 2195, 541, 541,\n' +
'  /* 47860 */ 541, 541, 541, 541, 541, 541, 2580, 541, 541, 541, 541, 541, 541, 541, 2585, 541, 541, 2204, 541, 541,\n' +
'  /* 47880 */ 2207, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2590, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 47900 */ 2643, 563, 563, 563, 2646, 563, 563, 563, 563, 2312, 563, 563, 563, 563, 2317, 563, 563, 563, 563, 563,\n' +
'  /* 47920 */ 563, 563, 563, 0, 585, 585, 585, 585, 585, 585, 1006, 585, 0, 2329, 0, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 47942 */ 585, 585, 585, 585, 585, 585, 2004, 585, 585, 585, 585, 2345, 585, 585, 2349, 585, 585, 585, 2353, 585,\n' +
'  /* 47962 */ 585, 585, 585, 585, 585, 585, 2676, 585, 585, 585, 2679, 585, 585, 2681, 585, 585, 585, 585, 585, 2362,\n' +
'  /* 47982 */ 585, 585, 2365, 585, 585, 585, 585, 585, 585, 585, 585, 1469, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 48002 */ 2399, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 541, 541, 541, 541, 585, 541, 563, 585, 541,\n' +
'  /* 48023 */ 0, 0, 0, 0, 2516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2523, 2559, 541, 2560, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 48049 */ 541, 541, 2570, 541, 541, 541, 541, 2562, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3335,\n' +
'  /* 48069 */ 541, 541, 541, 563, 563, 563, 563, 563, 2599, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1869,\n' +
'  /* 48090 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2614, 563, 563, 563, 2617, 563, 563, 2619, 563, 2620, 563,\n' +
'  /* 48110 */ 563, 563, 563, 563, 1896, 563, 563, 563, 1900, 563, 563, 563, 563, 563, 563, 563, 2263, 563, 563, 2267,\n' +
'  /* 48130 */ 563, 563, 563, 2271, 563, 563, 563, 563, 563, 563, 2641, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 48151 */ 2307, 563, 563, 563, 563, 563, 2682, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2692, 585, 585, 585,\n' +
'  /* 48171 */ 585, 585, 585, 585, 3122, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2406, 585, 585, 585, 541, 541, 541,\n' +
'  /* 48192 */ 2731, 0, 0, 2734, 2735, 0, 0, 2738, 2739, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 221184, 221184,\n' +
'  /* 48214 */ 1, 12290, 3, 2756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2727936, 0, 0, 2785, 0, 0, 0, 0, 2790, 0,\n' +
'  /* 48243 */ 2792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,\n' +
'  /* 48262 */ 541, 541, 2825, 541, 541, 541, 2828, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2829, 541, 541, 541,\n' +
'  /* 48282 */ 541, 541, 541, 541, 541, 2840, 541, 541, 541, 541, 541, 541, 541, 563, 563, 2875, 563, 563, 563, 563, 563,\n' +
'  /* 48303 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 3257, 563, 2922, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 48324 */ 585, 585, 585, 585, 585, 585, 2006, 585, 585, 585, 585, 2947, 585, 585, 585, 2950, 585, 2951, 541, 541,\n' +
'  /* 48344 */ 585, 541, 563, 563, 563, 563, 563, 585, 585, 585, 585, 585, 1084, 1564, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0,\n' +
'  /* 48369 */ 0, 0, 0, 0, 0, 0, 2794, 0, 0, 0, 0, 0, 0, 0, 2983, 0, 0, 2985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0,\n' +
'  /* 48400 */ 0, 0, 0, 0, 0, 0, 0, 3010, 0, 3011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 337, 291, 0, 0, 0, 0, 541, 541, 541,\n' +
'  /* 48429 */ 3051, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2839, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 48450 */ 2845, 541, 3063, 541, 541, 541, 541, 541, 563, 563, 563, 3071, 563, 563, 563, 563, 563, 563, 1391, 563,\n' +
'  /* 48470 */ 563, 563, 1396, 563, 563, 563, 563, 563, 563, 563, 2889, 563, 563, 563, 563, 563, 563, 563, 563, 1899,\n' +
'  /* 48490 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 3091, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 48511 */ 563, 563, 1857, 563, 563, 3103, 563, 563, 563, 563, 563, 585, 585, 585, 3111, 585, 585, 585, 585, 585,\n' +
'  /* 48531 */ 585, 585, 2703, 585, 585, 585, 585, 585, 585, 585, 585, 1470, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 48551 */ 3131, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3143, 541, 3226, 541, 3228, 541,\n' +
'  /* 48571 */ 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 3073, 563, 563, 563, 563, 563, 563, 563, 3238, 563,\n' +
'  /* 48592 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2268, 563, 563, 563, 563, 563, 563, 563, 3248, 563, 563,\n' +
'  /* 48613 */ 563, 563, 563, 3253, 563, 3255, 563, 563, 563, 563, 563, 563, 1880, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 48633 */ 563, 563, 1452, 26029, 1279, 989, 585, 585, 585, 585, 3280, 585, 3282, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 48653 */ 585, 541, 541, 585, 541, 2723, 541, 541, 563, 2725, 563, 563, 585, 2727, 585, 585, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 48677 */ 3181, 0, 0, 0, 3450, 0, 0, 0, 0, 0, 0, 3302, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 2108, 0, 0, 0,\n' +
'  /* 48707 */ 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 3311, 0, 0, 0, 0, 0, 0, 0, 0, 3316, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 48739 */ 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 563, 563, 563, 563, 3340, 563, 563, 563, 3344, 563, 563, 563,\n' +
'  /* 48760 */ 563, 563, 563, 563, 1898, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2644, 563, 563, 563, 563, 563, 563,\n' +
'  /* 48781 */ 585, 585, 585, 3362, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2931, 585, 585, 585, 585,\n' +
'  /* 48802 */ 3371, 585, 585, 585, 585, 541, 541, 541, 541, 563, 563, 585, 585, 0, 0, 0, 0, 0, 0, 0, 3446, 3181, 0, 0,\n' +
'  /* 48826 */ 0, 0, 0, 0, 0, 0, 3162112, 3170304, 0, 0, 3219456, 3035136, 0, 0, 541, 541, 541, 3573, 563, 563, 563,\n' +
'  /* 48847 */ 3577, 563, 563, 563, 563, 563, 563, 563, 563, 2279, 563, 563, 563, 563, 563, 563, 2285, 3585, 585, 585,\n' +
'  /* 48867 */ 585, 3589, 585, 585, 585, 585, 585, 585, 585, 585, 3597, 541, 0, 0, 0, 0, 392, 393, 0, 394, 0, 0, 0, 0, 0,\n' +
'  /* 48892 */ 394, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 3600, 0, 3602, 0, 3603,\n' +
'  /* 48921 */ 3604, 541, 541, 541, 541, 541, 541, 541, 3054, 541, 541, 541, 541, 541, 541, 541, 541, 563, 2250, 563,\n' +
'  /* 48941 */ 563, 563, 563, 563, 563, 541, 541, 3610, 3611, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3617,\n' +
'  /* 48961 */ 3618, 563, 585, 585, 585, 585, 585, 585, 585, 585, 585, 3624, 3625, 585, 541, 0, 0, 0, 0, 0, 1112, 0, 0,\n' +
'  /* 48984 */ 0, 0, 1117, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2519, 0, 0, 0, 0, 0, 0, 3628, 0, 0, 0,\n' +
'  /* 49015 */ 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 939, 563, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 49036 */ 2319, 563, 563, 2322, 2323, 563, 563, 0, 356, 357, 0, 0, 0, 0, 0, 0, 0, 363, 0, 291, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 49063 */ 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0,\n' +
'  /* 49091 */ 0, 0, 0, 0, 474, 474, 488, 0, 0, 488, 357, 357, 357, 510, 357, 357, 357, 357, 474, 474, 580, 580, 580,\n' +
'  /* 49114 */ 603, 559, 559, 559, 559, 603, 603, 603, 603, 559, 580, 603, 559, 603, 603, 603, 603, 603, 603, 603, 603,\n' +
'  /* 49135 */ 559, 580, 559, 603, 603, 1, 12290, 3, 563, 563, 978, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 585,\n' +
'  /* 49157 */ 585, 1014, 541, 563, 563, 563, 978, 563, 0, 585, 585, 585, 1048, 585, 78113, 1084, 0, 0, 0, 0, 0, 1127, 0,\n' +
'  /* 49180 */ 1129, 1130, 0, 0, 0, 1132, 1133, 0, 0, 0, 0, 0, 0, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 2154,\n' +
'  /* 49207 */ 0, 0, 0, 0, 1198, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1685, 1686, 0,\n' +
'  /* 49237 */ 1688, 0, 0, 0, 0, 1279, 852, 541, 541, 541, 541, 541, 541, 541, 1289, 541, 541, 541, 1298, 563, 563, 1384,\n' +
'  /* 49259 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1871, 563, 563, 0, 0, 0, 1575, 0, 0, 0,\n' +
'  /* 49282 */ 1581, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 1681, 0, 0,\n' +
'  /* 49309 */ 0, 0, 0, 0, 0, 0, 1687, 0, 1689, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 816, 541, 541, 541,\n' +
'  /* 49338 */ 861, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 3309, 0, 1734, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 49369 */ 0, 0, 0, 0, 1279, 0, 0, 0, 0, 433, 0, 0, 0, 330, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468,\n' +
'  /* 49394 */ 468, 468, 468, 468, 468, 541, 1795, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1806, 541, 541, 541,\n' +
'  /* 49415 */ 541, 2578, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 3232, 563, 563, 563, 563, 563,\n' +
'  /* 49435 */ 1893, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2270, 563, 563, 563, 563, 563, 563,\n' +
'  /* 49456 */ 563, 1913, 563, 563, 563, 563, 563, 563, 26029, 0, 585, 585, 585, 585, 585, 3364, 585, 585, 585, 585, 585,\n' +
'  /* 49477 */ 585, 585, 585, 585, 585, 585, 3125, 585, 585, 585, 585, 585, 585, 585, 585, 1961, 585, 585, 585, 585, 585,\n' +
'  /* 49498 */ 585, 585, 585, 585, 585, 1973, 2054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3181, 0, 3308, 0, 2172,\n' +
'  /* 49525 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3333, 541, 541, 541, 541, 541,\n' +
'  /* 49546 */ 541, 541, 563, 563, 563, 563, 3072, 563, 563, 563, 563, 0, 0, 2330, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 49567 */ 585, 585, 585, 585, 585, 585, 2370, 585, 585, 541, 2535, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 49588 */ 541, 541, 541, 541, 3520, 541, 541, 541, 541, 541, 563, 563, 563, 563, 3578, 563, 563, 563, 563, 563, 563,\n' +
'  /* 49609 */ 563, 0, 585, 585, 585, 585, 585, 585, 1009, 585, 0, 0, 2733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3187,\n' +
'  /* 49636 */ 0, 0, 0, 0, 0, 2772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3511, 0, 541, 541, 0, 0, 0, 0, 2789, 0, 0, 0,\n' +
'  /* 49667 */ 0, 0, 0, 0, 0, 0, 0, 0, 3186, 0, 0, 0, 3189, 0, 0, 541, 541, 541, 2812, 541, 541, 541, 541, 541, 541,\n' +
'  /* 49692 */ 2819, 541, 2821, 541, 541, 541, 2537, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2545, 563,\n' +
'  /* 49712 */ 2859, 563, 563, 563, 563, 563, 563, 2866, 563, 2868, 563, 563, 563, 563, 563, 563, 1408, 563, 563, 563,\n' +
'  /* 49732 */ 563, 563, 563, 1416, 563, 563, 3329, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 49753 */ 563, 2857, 541, 541, 3572, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3584, 541, 541,\n' +
'  /* 49773 */ 541, 3657, 541, 563, 563, 563, 563, 3661, 563, 585, 585, 585, 585, 3665, 0, 0, 358, 0, 0, 0, 0, 0, 0, 363,\n' +
'  /* 49797 */ 0, 291, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 49825 */ 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 358, 0, 368, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 49854 */ 581, 581, 581, 604, 560, 560, 560, 560, 604, 604, 604, 604, 560, 581, 604, 560, 604, 604, 604, 604, 604,\n' +
'  /* 49875 */ 604, 604, 604, 560, 581, 560, 604, 604, 1, 12290, 3, 541, 541, 872, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 49896 */ 541, 541, 541, 541, 541, 541, 2194, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3409, 541, 563, 563, 563,\n' +
'  /* 49917 */ 563, 563, 563, 563, 1866, 563, 563, 563, 563, 563, 563, 563, 563, 1867, 563, 563, 563, 563, 563, 563, 563,\n' +
'  /* 49938 */ 0, 0, 0, 1125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 49970 */ 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 541,\n' +
'  /* 49999 */ 1303, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2219, 541, 541, 541, 541, 541,\n' +
'  /* 50020 */ 541, 541, 541, 541, 1313, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 1389, 563, 563, 563, 563,\n' +
'  /* 50041 */ 563, 563, 563, 563, 563, 563, 563, 2605, 563, 563, 563, 563, 0, 0, 1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 50067 */ 0, 0, 237568, 0, 0, 0, 0, 0, 0, 359, 360, 361, 362, 0, 0, 363, 0, 291, 0, 0, 0, 0, 0, 0, 0, 184724,\n' +
'  /* 50093 */ 184936, 184936, 184936, 0, 0, 0, 184936, 0, 0, 360, 0, 359, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 426, 65536,\n' +
'  /* 50116 */ 0, 0, 0, 0, 434, 0, 0, 0, 454, 470, 470, 470, 470, 470, 470, 470, 470, 470, 480, 470, 470, 470, 470, 470,\n' +
'  /* 50140 */ 470, 426, 426, 0, 426, 0, 360, 426, 0, 457, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856,\n' +
'  /* 50162 */ 249856, 1, 12290, 3, 0, 0, 0, 498, 498, 0, 505, 505, 505, 505, 511, 512, 505, 505, 525, 525, 525, 525,\n' +
'  /* 50184 */ 457, 457, 457, 457, 457, 457, 457, 457, 525, 525, 525, 525, 525, 525, 525, 561, 561, 561, 582, 605, 561,\n' +
'  /* 50205 */ 582, 561, 561, 582, 582, 582, 605, 561, 561, 561, 561, 605, 605, 605, 605, 561, 582, 605, 561, 605, 605,\n' +
'  /* 50226 */ 605, 605, 605, 605, 605, 605, 625, 630, 625, 605, 636, 1, 12290, 3, 563, 974, 563, 563, 563, 563, 563, 0,\n' +
'  /* 50248 */ 585, 585, 585, 585, 585, 585, 585, 585, 1471, 585, 585, 585, 585, 1481, 585, 585, 541, 563, 563, 974, 563,\n' +
'  /* 50269 */ 563, 0, 585, 585, 1044, 585, 585, 78113, 1084, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1739, 0,\n' +
'  /* 50296 */ 1741, 1715, 1279, 0, 0, 541, 2174, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2552,\n' +
'  /* 50317 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 896, 541, 541, 541, 541, 914, 541, 0, 0, 0, 585, 2332, 585,\n' +
'  /* 50339 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2380, 2381, 585, 585, 585, 583, 583, 583, 606, 562, 562,\n' +
'  /* 50360 */ 562, 562, 606, 606, 606, 606, 562, 583, 606, 562, 606, 606, 606, 606, 606, 606, 606, 606, 562, 583, 562,\n' +
'  /* 50381 */ 606, 606, 1, 12290, 3, 0, 710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 541, 541, 873,\n' +
'  /* 50409 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2564, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 50430 */ 541, 541, 2849, 541, 541, 2852, 541, 541, 2855, 541, 2856, 563, 541, 541, 563, 563, 563, 563, 563, 940,\n' +
'  /* 50450 */ 563, 563, 563, 563, 563, 563, 563, 563, 2616, 563, 563, 563, 563, 563, 563, 563, 0, 0, 0, 0, 1168, 0, 0,\n' +
'  /* 50473 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 106496, 106496, 0, 106496, 0, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 50501 */ 1194, 0, 0, 0, 0, 435, 0, 0, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3314, 0, 0, 0, 0, 0, 0, 585, 585, 585, 585,\n' +
'  /* 50530 */ 1526, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2408, 585, 541, 2411, 541, 1571, 0, 0, 0,\n' +
'  /* 50551 */ 1577, 0, 0, 0, 1583, 0, 0, 0, 0, 0, 0, 0, 0, 254414, 254414, 254414, 254414, 254414, 1, 12290, 0, 2286,\n' +
'  /* 50573 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3088, 0, 0, 2437, 0, 0, 0, 0,\n' +
'  /* 50596 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 652, 0, 0, 0, 0, 0, 0, 748,\n' +
'  /* 50621 */ 541, 541, 541, 541, 1307, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2212, 541, 541, 541, 541,\n' +
'  /* 50642 */ 563, 563, 979, 563, 563, 563, 563, 0, 585, 585, 585, 585, 585, 585, 585, 585, 1530, 585, 585, 585, 585,\n' +
'  /* 50663 */ 585, 585, 585, 541, 1074, 563, 563, 979, 563, 0, 1079, 585, 585, 1049, 585, 78113, 1084, 0, 0, 0, 0, 0,\n' +
'  /* 50685 */ 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 50718 */ 2126675, 2126675, 2126675, 2126675, 0, 0, 0, 1270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111051, 111051,\n' +
'  /* 50740 */ 111051, 0, 111051, 1440, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26029, 1279, 989, 585, 585, 585,\n' +
'  /* 50759 */ 585, 585, 1962, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 1533, 585, 585, 585, 585, 585, 0, 0, 0,\n' +
'  /* 50781 */ 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 1763, 541, 541, 541, 541, 541, 541, 541,\n' +
'  /* 50807 */ 541, 541, 541, 541, 541, 541, 541, 541, 3040, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1314, 1316,\n' +
'  /* 50827 */ 541, 541, 541, 541, 541, 585, 585, 1976, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585,\n' +
'  /* 50848 */ 2382, 585, 585, 0, 0, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 2132, 0, 0, 0,\n' +
'  /* 50877 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 0, 172032, 563, 563, 563, 2275, 563, 2277, 563,\n' +
'  /* 50900 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2321, 563, 563, 563, 563, 0, 2359, 585, 585, 585, 585, 585,\n' +
'  /* 50921 */ 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2358, 2512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 50948 */ 196608, 0, 0, 0, 0, 563, 563, 2624, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2295,\n' +
'  /* 50970 */ 563, 563, 563, 563, 563, 2650, 0, 0, 0, 0, 0, 0, 585, 585, 585, 585, 585, 585, 585, 2338, 585, 585, 585,\n' +
'  /* 50993 */ 585, 2342, 585, 585, 585, 585, 2686, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 2693, 585,\n' +
'  /* 51013 */ 585, 585, 585, 2771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 0, 221184, 0, 0,\n' +
'  /* 51039 */ 0, 3180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 0, 249856, 563, 563, 3247, 563, 563,\n' +
'  /* 51063 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2309, 563, 563, 0, 1134592, 1134592, 0, 0, 0, 0,\n' +
'  /* 51084 */ 1135207, 1135207, 1135207, 1135207, 0, 1134592, 1134592, 1135207, 1134592, 0, 1134592, 0, 0, 0, 1134592,\n' +
'  /* 51099 */ 1135006, 1135006, 0, 0, 0, 0, 0, 1135006, 0, 0, 0, 0, 436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254414,\n' +
'  /* 51124 */ 254414, 254414, 0, 254414, 1135207, 1135207, 1135207, 1135207, 1135207, 1135207, 1135207, 1135207,\n' +
'  /* 51136 */ 1134592, 1134592, 1134592, 1135207, 1135207, 1, 12290, 3, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 51157 */ 1138688, 0, 0, 0, 0, 0, 1217, 1218, 0, 0, 0, 0, 0, 1223, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0,\n' +
'  /* 51186 */ 0, 0, 2871296, 0, 0, 0, 0, 0, 2732032, 0, 0, 0, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824,\n' +
'  /* 51204 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2654208, 2678784, 2760704, 2764800, 2854912,\n' +
'  /* 51215 */ 2969600, 2125824, 3006464, 2125824, 3018752, 2125824, 2125824, 2125824, 3149824, 2179072, 1147355,\n' +
'  /* 51226 */ 1147355, 1147355, 458, 458, 1147355, 458, 458, 458, 458, 458, 458, 458, 458, 1147406, 1147406, 1147406,\n' +
'  /* 51242 */ 1147406, 1147406, 1147406, 1147406, 1147406, 1147406, 1147406, 1147406, 1147406, 1147406, 1147406,\n' +
'  /* 51253 */ 1147406, 1147406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 3608, 1159168, 0, 0, 1159168,\n' +
'  /* 51275 */ 0, 1159168, 1159168, 0, 1159168, 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 0, 0,\n' +
'  /* 51290 */ 0, 0, 0, 0, 0, 0, 0, 688, 689, 690, 0, 0, 0, 694, 1159168, 1159168, 0, 1159168, 1159168, 0, 1159168,\n' +
'  /* 51311 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,\n' +
'  /* 51322 */ 1159168, 1159168, 1159168, 1159168, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0,\n' +
'  /* 51345 */ 458, 0, 0, 0, 1147406, 1147406, 1147406, 1147355, 1147406, 1, 12290, 3, 2732032, 0, 0, 851, 2125824,\n' +
'  /* 51362 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,\n' +
'  /* 51373 */ 3223552, 2125824, 2895872, 2125824, 2895872, 2125824, 2125824, 2125824, 2179072, 106496, 0, 106496,\n' +
'  /* 51385 */ 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,\n' +
'  /* 51399 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0,\n' +
'  /* 51416 */ 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 106496, 0, 106496, 106496, 106496, 106496, 106496,\n' +
'  /* 51439 */ 0, 0, 0, 0, 0, 0, 2454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 0,\n' +
'  /* 51471 */ 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 3006464, 0, 3108864, 3198976, 0, 0,\n' +
'  /* 51496 */ 3043328, 0, 3149824, 2936832, 0, 2760704, 0, 0, 0, 0, 0, 0, 0, 225894, 225894, 225894, 225894, 225741,\n' +
'  /* 51514 */ 225741, 225741, 225894, 225741, 2498560, 0, 0, 0, 0, 2875392, 0, 0, 0, 0, 0, 0, 2834432, 0, 3227648,\n' +
'  /* 51533 */ 2568192\n' +
'];\n' +
'\n' +
'XQueryParser.EXPECTED =\n' +
'[\n' +
'  /*    0 */ 1038, 1046, 1047, 1045, 1041, 1051, 1055, 1059, 1063, 1067, 1673, 1174, 1357, 1355, 1073, 1673, 1078, 1082,\n' +
'  /*   18 */ 1089, 1095, 1099, 1673, 1104, 2937, 1673, 1673, 2822, 1929, 1181, 1322, 1167, 1090, 1090, 1110, 1114, 1673,\n' +
'  /*   36 */ 1673, 1120, 1673, 1105, 1929, 1929, 1200, 1322, 1322, 1124, 1090, 1090, 1130, 1134, 1673, 1673, 1315, 1673,\n' +
'  /*   54 */ 1927, 1929, 1929, 1321, 1322, 1085, 1090, 1090, 1091, 1143, 1673, 1673, 1077, 1106, 1929, 1929, 1321, 1322,\n' +
'  /*   72 */ 1147, 1090, 1090, 1157, 1673, 1423, 1673, 1929, 1199, 1322, 1323, 1090, 1216, 1161, 1423, 1162, 1929, 1166,\n' +
'  /*   90 */ 2244, 1090, 1171, 1075, 2148, 1930, 1322, 1215, 1150, 1333, 1180, 1323, 1126, 1318, 2825, 1185, 2824, 2247,\n' +
'  /*  108 */ 1192, 1196, 1204, 2241, 1208, 1212, 1220, 1223, 1227, 1228, 1232, 1235, 1239, 1243, 1247, 1251, 1255, 1673,\n' +
'  /*  126 */ 2192, 1673, 1335, 2394, 1673, 1673, 1673, 1673, 2524, 1259, 1673, 1673, 1673, 1371, 1673, 1673, 1673, 1673,\n' +
'  /*  144 */ 1673, 1673, 1673, 1673, 2139, 1673, 1673, 1673, 1673, 2141, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,\n' +
'  /*  162 */ 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,\n' +
'  /*  180 */ 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,\n' +
'  /*  198 */ 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,\n' +
'  /*  216 */ 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1300, 2846, 1673, 2121,\n' +
'  /*  234 */ 1264, 1269, 1273, 1277, 1281, 1285, 1294, 1673, 1673, 1304, 2934, 1308, 1312, 1327, 1339, 2368, 1343, 1347,\n' +
'  /*  252 */ 1673, 2162, 1710, 1352, 1361, 1365, 1673, 1435, 1673, 1915, 1673, 1587, 1376, 1295, 1673, 1484, 1380, 1389,\n' +
'  /*  270 */ 1395, 1673, 1673, 1451, 1673, 1673, 1452, 1673, 2283, 2547, 1399, 1673, 1372, 1622, 1405, 1409, 1673, 1747,\n' +
'  /*  288 */ 1427, 1673, 2554, 1672, 1673, 1445, 1432, 1673, 2844, 1442, 2593, 1673, 1747, 1456, 1673, 2654, 1673, 2142,\n' +
'  /*  306 */ 1461, 1673, 1468, 1472, 1673, 1632, 1673, 2363, 1673, 1176, 1673, 2875, 1476, 1265, 2471, 2820, 1673, 1488,\n' +
'  /*  324 */ 1493, 2573, 2572, 2571, 1673, 2366, 1497, 1644, 1501, 1139, 1846, 1812, 2181, 1517, 2010, 1511, 1874, 1849,\n' +
'  /*  342 */ 1515, 1521, 1528, 1673, 1673, 1534, 1673, 1479, 1540, 1547, 1551, 1555, 1559, 2453, 2471, 1482, 1569, 1573,\n' +
'  /*  360 */ 2747, 1577, 1581, 2705, 1585, 1591, 1756, 1673, 1596, 1464, 1602, 1504, 1606, 1610, 1983, 1615, 1673, 1620,\n' +
'  /*  378 */ 1673, 1591, 2454, 1941, 1973, 1877, 1626, 1630, 1562, 1673, 1866, 1636, 1673, 1867, 1637, 1673, 1642, 2432,\n' +
'  /*  396 */ 1673, 1729, 1524, 1565, 1348, 1648, 1673, 2056, 1673, 1673, 1690, 1673, 2548, 2505, 1654, 1936, 1658, 1662,\n' +
'  /*  414 */ 1667, 1673, 2082, 1673, 1673, 1678, 1673, 1754, 1684, 1694, 1698, 1707, 1673, 1714, 1673, 1720, 1428, 1726,\n' +
'  /*  432 */ 1598, 1736, 1740, 1412, 2291, 1746, 1751, 1680, 1760, 2452, 1763, 1762, 2227, 2096, 1778, 1768, 1772, 1776,\n' +
'  /*  450 */ 1782, 2869, 1786, 1790, 1963, 1960, 1794, 1798, 1802, 2089, 1806, 1673, 3143, 1673, 1818, 2657, 1822, 1826,\n' +
'  /*  468 */ 1830, 1834, 1838, 2703, 2302, 2212, 1843, 2500, 1853, 1857, 1861, 2466, 1673, 1673, 1865, 1871, 1881, 1990,\n' +
'  /*  486 */ 1885, 1722, 1415, 1673, 1889, 1673, 3057, 1893, 1673, 1673, 1898, 1903, 1912, 1919, 1924, 1673, 1934, 1673,\n' +
'  /*  504 */ 2415, 1940, 1673, 2416, 1673, 1673, 1673, 2155, 2238, 1945, 1489, 1949, 1401, 1673, 1673, 2224, 1673, 1673,\n' +
'  /*  522 */ 1957, 1673, 1673, 1137, 1967, 1971, 1809, 1894, 1977, 1673, 2999, 1673, 1899, 1982, 1673, 2265, 1987, 3039,\n' +
'  /*  540 */ 1611, 1995, 1616, 1673, 3047, 1673, 2711, 2000, 1673, 1290, 1673, 1299, 2582, 1638, 2004, 1673, 1298, 1297,\n' +
'  /*  558 */ 1296, 1673, 2008, 2157, 2678, 2184, 2281, 2014, 2279, 2027, 2035, 2277, 2319, 2033, 2050, 2039, 2043, 2047,\n' +
'  /*  576 */ 1673, 1673, 2054, 2516, 2060, 2064, 2068, 2072, 2076, 2080, 1116, 1673, 2086, 3149, 2093, 2100, 2104, 2108,\n' +
'  /*  594 */ 2115, 2119, 1673, 1330, 1260, 2125, 2129, 2604, 2133, 1673, 2137, 1673, 2146, 1673, 2700, 1418, 1673, 2866,\n' +
'  /*  612 */ 1716, 1701, 3094, 2152, 2161, 2881, 2197, 1673, 2166, 1673, 1673, 2167, 1536, 1673, 2755, 1260, 2171, 2178,\n' +
'  /*  630 */ 2190, 1673, 2495, 1673, 1866, 2196, 1673, 1650, 2202, 1421, 2831, 2186, 1703, 2207, 1673, 1391, 1673, 1100,\n' +
'  /*  648 */ 2216, 1673, 2221, 1530, 3005, 2210, 2231, 2290, 2235, 1673, 2569, 1673, 2251, 2257, 2262, 2174, 1866, 2269,\n' +
'  /*  666 */ 1952, 2217, 2325, 2274, 2287, 1951, 1950, 2295, 1953, 2898, 2300, 2306, 2322, 2327, 2498, 2310, 2668, 1906,\n' +
'  /*  684 */ 2316, 2312, 2331, 1908, 2333, 1673, 1673, 1673, 1673, 2984, 2761, 1153, 1507, 2337, 2341, 2345, 2349, 1673,\n' +
'  /*  702 */ 2697, 1764, 2140, 2718, 2029, 2356, 2198, 2360, 2740, 2372, 2517, 2378, 1438, 1839, 2817, 2384, 1673, 3193,\n' +
'  /*  720 */ 1673, 3161, 1673, 2203, 2388, 2392, 1866, 2398, 2403, 3011, 2409, 2413, 1673, 3022, 1673, 1866, 2420, 1673,\n' +
'  /*  738 */ 2891, 2426, 2430, 1673, 2436, 1368, 2441, 2647, 1673, 1991, 2478, 1673, 3021, 1673, 1673, 2853, 1385, 2445,\n' +
'  /*  756 */ 2450, 2492, 2458, 2464, 1866, 2470, 1673, 2476, 1673, 2023, 2855, 2483, 2489, 2405, 2460, 1592, 2504, 1920,\n' +
'  /*  774 */ 2421, 2485, 2111, 2509, 2513, 1288, 1670, 1663, 2451, 1687, 2521, 2528, 2532, 2022, 2021, 2020, 2537, 2544,\n' +
'  /*  792 */ 2580, 2552, 2558, 2562, 2352, 2566, 2577, 2586, 2725, 2590, 2597, 2601, 2608, 2612, 2616, 1673, 1673, 2620,\n' +
'  /*  810 */ 1069, 2624, 2628, 2632, 2636, 2640, 1673, 2258, 2644, 2651, 2540, 2661, 2665, 2672, 2676, 2682, 2686, 1673,\n' +
'  /*  828 */ 3205, 1188, 2690, 3113, 2694, 1448, 1673, 2709, 1673, 2715, 1673, 2722, 2729, 1673, 3107, 2733, 2737, 2744,\n' +
'  /*  846 */ 2751, 1673, 1996, 2759, 1673, 3100, 2421, 1673, 3101, 2765, 1673, 3199, 2769, 2773, 2783, 2753, 1673, 2787,\n' +
'  /*  864 */ 1673, 1673, 2791, 1673, 1673, 2800, 2804, 3155, 2810, 1732, 2814, 1673, 3167, 1673, 2399, 2829, 1673, 3173,\n' +
'  /*  882 */ 2838, 3187, 2835, 2842, 1673, 2776, 1673, 2850, 1673, 2859, 2904, 2863, 2873, 2270, 1649, 2879, 2296, 2885,\n' +
'  /*  900 */ 2889, 2895, 2380, 2379, 1673, 2902, 2908, 2912, 1814, 2779, 3041, 2916, 2920, 3087, 3077, 2924, 2931, 2927,\n' +
'  /*  918 */ 2941, 3124, 2945, 1673, 1673, 1673, 2446, 2949, 2953, 2957, 2961, 2965, 2969, 2973, 1673, 2978, 2982, 2988,\n' +
'  /*  936 */ 3002, 2992, 2996, 2253, 3009, 3015, 3019, 1673, 3026, 3033, 3084, 3037, 3045, 1673, 2422, 1673, 2479, 1383,\n' +
'  /*  954 */ 1673, 3051, 3055, 1673, 3061, 1457, 3065, 2806, 1673, 1673, 3134, 1673, 1673, 3069, 1673, 1673, 3070, 3055,\n' +
'  /*  972 */ 1673, 3074, 3081, 3091, 3098, 1673, 1673, 3105, 1673, 2472, 3111, 1673, 2533, 3117, 1673, 3121, 3128, 2017,\n' +
'  /*  990 */ 1673, 1673, 3132, 1673, 2374, 1673, 1673, 3138, 3142, 3147, 3153, 3159, 1673, 3165, 1978, 3171, 1674, 1673,\n' +
'  /* 1008 */ 3177, 3181, 1673, 3185, 2974, 1673, 3191, 3029, 3197, 1866, 2796, 2795, 2794, 1543, 1673, 3203, 3209, 1742,\n' +
'  /* 1026 */ 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 2438, 3213, 3216, 3220, 3232, 3236, 3232,\n' +
'  /* 1044 */ 3239, 3231, 3232, 3232, 3232, 3232, 3227, 3223, 3243, 3232, 3247, 3251, 3254, 3258, 3261, 3263, 3267, 3269,\n' +
'  /* 1062 */ 3273, 3277, 3281, 3285, 3289, 3293, 3307, 4247, 4247, 3300, 5310, 4247, 5259, 4247, 4247, 3368, 4247, 4247,\n' +
'  /* 1080 */ 4247, 3622, 3624, 3624, 4206, 3332, 3332, 3332, 3478, 4207, 3341, 3341, 3341, 3341, 3343, 3345, 3349, 3424,\n' +
'  /* 1098 */ 3360, 3412, 4247, 4247, 4247, 3590, 5293, 4247, 4247, 4247, 3621, 3624, 3344, 3349, 3471, 3373, 3394, 3398,\n' +
'  /* 1116 */ 4247, 4247, 3382, 4635, 4867, 3379, 4247, 3440, 3332, 3387, 3341, 3341, 3336, 3352, 3342, 3417, 3627, 3392,\n' +
'  /* 1134 */ 3375, 3396, 3404, 4247, 3300, 4247, 4247, 4047, 4247, 3418, 3628, 3411, 3405, 3332, 3332, 3334, 3341, 3337,\n' +
'  /* 1152 */ 3429, 4247, 3312, 3441, 4898, 3341, 3416, 3422, 3462, 3448, 4247, 4247, 4247, 3624, 3625, 3332, 3332, 3332,\n' +
'  /* 1170 */ 3388, 3336, 3428, 3433, 4247, 3316, 4247, 4247, 3301, 5724, 3622, 3624, 3624, 3625, 3332, 3341, 3446, 3433,\n' +
'  /* 1188 */ 3311, 3302, 5214, 5450, 3624, 3626, 3332, 3334, 3341, 3453, 4200, 3624, 3624, 3624, 4204, 3332, 4205, 3332,\n' +
'  /* 1206 */ 3630, 3631, 3630, 3452, 3622, 3423, 3335, 3454, 3626, 3629, 3341, 3341, 3341, 3474, 3464, 3628, 3459, 3468,\n' +
'  /* 1224 */ 3482, 3576, 3487, 3491, 3328, 3328, 3328, 3328, 3495, 3499, 3509, 3328, 3328, 3505, 3502, 3513, 3517, 3579,\n' +
'  /* 1242 */ 3521, 3525, 3529, 3533, 3536, 3540, 3544, 3547, 3551, 3327, 3555, 3559, 3563, 3567, 5977, 3369, 5543, 3981,\n' +
'  /* 1260 */ 4247, 4247, 4247, 3732, 3606, 4247, 4247, 4247, 3819, 3613, 5423, 3635, 3639, 3643, 3647, 3649, 3649, 3651,\n' +
'  /* 1278 */ 3655, 3659, 3662, 3666, 3670, 3672, 3676, 3680, 3684, 4411, 4247, 3320, 4247, 4247, 4548, 4247, 3688, 4889,\n' +
'  /* 1296 */ 4247, 4247, 4247, 3996, 4247, 4247, 4247, 4082, 4052, 5672, 3693, 5205, 5460, 4247, 4525, 5504, 4525, 4247,\n' +
'  /* 1314 */ 5328, 4247, 3366, 3310, 4247, 3311, 4200, 3624, 3332, 3332, 3332, 3332, 3335, 5600, 4247, 5960, 4247, 3383,\n' +
'  /* 1332 */ 4636, 4247, 3438, 4247, 4247, 3588, 4247, 4988, 4247, 4247, 5958, 3706, 3707, 4247, 3689, 4890, 4247, 4247,\n' +
'  /* 1350 */ 4247, 4120, 4200, 3720, 3728, 4247, 3439, 4247, 4247, 3324, 5128, 4875, 4874, 5250, 4703, 3742, 3749, 5107,\n' +
'  /* 1368 */ 4247, 3442, 3980, 4197, 4247, 4247, 4247, 3769, 4959, 4199, 4247, 4978, 4247, 5836, 4247, 5929, 4247, 4247,\n' +
'  /* 1386 */ 4247, 5197, 5126, 3758, 5459, 4247, 4247, 3592, 4247, 4038, 4818, 3744, 3764, 4669, 3619, 4247, 4247, 3609,\n' +
'  /* 1404 */ 4498, 4393, 4247, 4247, 3950, 4552, 3779, 3298, 4247, 3570, 4111, 4247, 3696, 4425, 4247, 3708, 3712, 4247,\n' +
'  /* 1422 */ 3711, 4247, 4247, 4252, 4247, 3774, 4247, 4247, 4247, 4173, 4247, 5679, 4891, 4247, 3753, 3296, 4247, 3442,\n' +
'  /* 1440 */ 3980, 4958, 3791, 5630, 4645, 4247, 3783, 3299, 4247, 3716, 5474, 4247, 3745, 3765, 4247, 4247, 3798, 4247,\n' +
'  /* 1458 */ 4247, 4247, 4268, 3301, 3963, 5725, 4247, 3787, 3993, 4004, 5523, 4247, 4296, 3770, 3802, 4247, 4789, 3810,\n' +
'  /* 1476 */ 4305, 4790, 3814, 4247, 3872, 3298, 4247, 3928, 4247, 4247, 3713, 4247, 5723, 4247, 4247, 4247, 4459, 5462,\n' +
'  /* 1494 */ 4247, 5086, 3827, 4247, 5845, 5930, 3838, 4247, 5931, 3298, 4247, 3941, 4011, 4247, 3964, 4958, 5188, 4251,\n' +
'  /* 1512 */ 4521, 4247, 4248, 4175, 4251, 4177, 4247, 4523, 4247, 5980, 3855, 3722, 4247, 4031, 4142, 4299, 3854, 3855,\n' +
'  /* 1530 */ 4247, 4247, 3709, 4247, 4413, 3860, 4247, 4247, 3710, 4247, 3876, 5082, 5029, 4247, 4050, 4410, 4854, 5650,\n' +
'  /* 1548 */ 3885, 3889, 3891, 3897, 3893, 3901, 3905, 3906, 3906, 3910, 3911, 3912, 3916, 3919, 4247, 4062, 4067, 4247,\n' +
'  /* 1566 */ 4093, 3407, 4047, 5108, 4247, 4247, 4961, 4020, 3936, 4300, 5968, 5190, 5838, 3945, 4464, 3949, 3954, 3962,\n' +
'  /* 1584 */ 3968, 5396, 3970, 4247, 4247, 3784, 5470, 3986, 4247, 4247, 4247, 4493, 3930, 4247, 4247, 3979, 5978, 5086,\n' +
'  /* 1602 */ 4298, 4036, 5731, 5017, 3956, 4247, 4247, 4015, 4019, 4247, 4247, 4247, 4540, 4024, 4247, 4247, 4247, 4542,\n' +
'  /* 1620 */ 5398, 4025, 4247, 4247, 3792, 5631, 4035, 4188, 4042, 3406, 4046, 4056, 4247, 4247, 3808, 3298, 4063, 4068,\n' +
'  /* 1638 */ 4247, 4247, 4247, 4630, 4436, 4072, 4247, 4247, 3847, 4247, 4098, 4463, 4247, 4247, 4247, 4799, 4135, 4247,\n' +
'  /* 1656 */ 4247, 4461, 4141, 4298, 4147, 5896, 4979, 4247, 4247, 4247, 4886, 4679, 4156, 4162, 4247, 4103, 5649, 4247,\n' +
'  /* 1674 */ 4247, 4247, 4247, 3355, 4168, 4157, 4463, 4247, 5979, 5916, 4183, 4247, 5175, 4247, 4104, 3298, 4247, 4119,\n' +
'  /* 1692 */ 4124, 4101, 4048, 4247, 5978, 5086, 4147, 5835, 4046, 4247, 4137, 4247, 4266, 3963, 4810, 4678, 4682, 4127,\n' +
'  /* 1710 */ 4247, 4152, 4174, 5215, 4680, 4125, 4247, 4247, 3856, 4451, 4681, 4126, 4247, 4247, 3879, 4247, 5919, 4182,\n' +
'  /* 1728 */ 4247, 4462, 4247, 4247, 3979, 4247, 4247, 5578, 4187, 4193, 4247, 5581, 4211, 4463, 4247, 4247, 3971, 4247,\n' +
'  /* 1746 */ 4212, 4247, 4247, 4247, 4894, 4216, 4247, 4221, 4247, 4173, 4247, 5920, 3924, 4247, 4189, 4195, 5919, 3573,\n' +
'  /* 1764 */ 4247, 4247, 4247, 4970, 4232, 4247, 4247, 5059, 5063, 4247, 4247, 5710, 5977, 5832, 5058, 5062, 4247, 4411,\n' +
'  /* 1782 */ 5919, 5061, 4247, 5060, 4404, 4651, 4258, 4401, 4405, 4652, 4241, 4402, 4257, 4562, 4405, 4767, 4562, 4264,\n' +
'  /* 1800 */ 4262, 4562, 4264, 4273, 4278, 5909, 4283, 5848, 4289, 4247, 4174, 4089, 4247, 4176, 4247, 4247, 3702, 4247,\n' +
'  /* 1818 */ 4188, 3312, 4646, 3850, 3828, 4312, 4316, 4320, 4323, 4323, 4324, 4328, 4332, 4333, 4337, 4340, 4342, 4342,\n' +
'  /* 1836 */ 4342, 4342, 4346, 4247, 4247, 4247, 5026, 5258, 5739, 4574, 4247, 4178, 4247, 4177, 4247, 4711, 4177, 4369,\n' +
'  /* 1854 */ 4375, 4381, 5732, 4370, 4385, 4198, 4391, 5544, 4491, 4247, 3989, 4353, 4247, 4247, 4247, 5064, 4063, 4306,\n' +
'  /* 1872 */ 4359, 3868, 4247, 4178, 4521, 4247, 4030, 3483, 5085, 4397, 4247, 5257, 5670, 5064, 4417, 3595, 4903, 4247,\n' +
'  /* 1890 */ 5412, 4429, 4434, 4435, 4247, 4247, 4247, 5164, 4440, 4247, 4247, 4247, 5165, 4308, 4448, 3298, 4442, 4247,\n' +
'  /* 1908 */ 4148, 4247, 4444, 4443, 4534, 5256, 5668, 4247, 4200, 3754, 3297, 4520, 4247, 4247, 4247, 5170, 4459, 4247,\n' +
'  /* 1926 */ 4468, 4247, 4201, 3624, 3624, 3624, 3624, 3423, 4473, 4498, 4247, 4247, 3980, 4030, 4499, 4247, 4247, 4247,\n' +
'  /* 1944 */ 5176, 4397, 5255, 4514, 4519, 5280, 4247, 4247, 4247, 5294, 4086, 4247, 4902, 3608, 4497, 4891, 4247, 4240,\n' +
'  /* 1962 */ 4563, 4406, 4236, 4247, 4403, 4504, 4509, 4247, 4398, 4513, 4518, 4247, 4247, 4049, 4247, 4481, 4247, 4247,\n' +
'  /* 1980 */ 4247, 5295, 4482, 4247, 4247, 4247, 5397, 4529, 4247, 4533, 4573, 4247, 4247, 4247, 5122, 4544, 4247, 4247,\n' +
'  /* 1998 */ 4247, 5435, 3602, 5228, 4269, 4573, 5420, 4556, 4247, 4574, 3301, 5228, 4250, 4247, 4524, 4175, 5523, 4247,\n' +
'  /* 2016 */ 3713, 4247, 4247, 5864, 4247, 4247, 5885, 4247, 4247, 4247, 5945, 4247, 5461, 4247, 5523, 5064, 5741, 4676,\n' +
'  /* 2034 */ 3713, 4247, 5462, 4247, 4710, 4247, 5524, 4249, 5524, 4676, 4572, 5523, 5524, 5525, 5463, 5875, 4247, 4251,\n' +
'  /* 2052 */ 5524, 3713, 5136, 4755, 4247, 4247, 4108, 4115, 5981, 4578, 5154, 4454, 3982, 5856, 4080, 4582, 4586, 4593,\n' +
'  /* 2070 */ 4589, 4597, 4601, 4604, 4606, 4610, 4613, 4615, 4625, 4622, 4619, 4628, 4247, 4247, 4169, 4158, 3730, 3734,\n' +
'  /* 2088 */ 4891, 5977, 4420, 4421, 4137, 4641, 4650, 4250, 4247, 4274, 4242, 4227, 4656, 4663, 4667, 5975, 4305, 4247,\n' +
'  /* 2106 */ 4673, 5248, 5962, 4247, 4559, 4247, 4347, 5199, 5181, 3584, 4686, 4247, 3303, 4561, 3709, 4247, 4247, 4188,\n' +
'  /* 2124 */ 3599, 3736, 4247, 5979, 4411, 4832, 4247, 4694, 3760, 4707, 4247, 4716, 4726, 4733, 4737, 4247, 4247, 4199,\n' +
'  /* 2142 */ 4247, 4247, 4247, 3785, 4744, 4749, 4247, 4247, 4202, 3624, 4251, 4764, 4701, 4247, 4441, 4247, 4247, 4006,\n' +
'  /* 2160 */ 4247, 4771, 4247, 4247, 4247, 5462, 4247, 5429, 4780, 4247, 4247, 3736, 4247, 4247, 4267, 4860, 4815, 5270,\n' +
'  /* 2178 */ 4658, 4811, 4816, 4710, 4247, 4522, 4247, 4007, 4247, 4247, 4058, 5228, 5271, 4702, 4247, 4247, 4223, 3583,\n' +
'  /* 2196 */ 4795, 4891, 4247, 4247, 4247, 5475, 4804, 4247, 4247, 4247, 5574, 4815, 4709, 5854, 4247, 4460, 5228, 4247,\n' +
'  /* 2214 */ 4399, 5255, 3594, 4247, 4247, 4247, 5580, 4247, 5294, 3593, 4247, 4478, 4486, 4247, 4217, 5709, 4869, 5552,\n' +
'  /* 2232 */ 4860, 4815, 4249, 4247, 5580, 4829, 4247, 4505, 3868, 4247, 4203, 3626, 3332, 3332, 3333, 3341, 3342, 4247,\n' +
'  /* 2250 */ 3621, 5064, 4828, 4247, 4247, 4291, 5862, 4760, 4247, 4247, 4247, 5624, 5918, 4247, 4836, 4247, 4630, 4247,\n' +
'  /* 2268 */ 4307, 4841, 4247, 4247, 4247, 5641, 4371, 4247, 4848, 4247, 4676, 4247, 3769, 4247, 4837, 4247, 4247, 4087,\n' +
'  /* 2286 */ 3786, 4852, 4811, 4817, 5272, 4247, 4247, 4247, 5582, 4086, 4247, 4247, 4247, 5642, 4000, 4871, 4247, 4247,\n' +
'  /* 2304 */ 4357, 3866, 4841, 4247, 4247, 4084, 5083, 4247, 4444, 4247, 4150, 4247, 4442, 4247, 4149, 4247, 4677, 4709,\n' +
'  /* 2322 */ 4247, 4247, 5919, 4830, 4247, 4901, 4247, 4864, 4228, 5083, 4149, 4247, 5083, 4443, 4247, 4907, 4911, 4918,\n' +
'  /* 2340 */ 4920, 4915, 4924, 4928, 4937, 4934, 4930, 4941, 4945, 4952, 4948, 4956, 4247, 4689, 4247, 4688, 4992, 5312,\n' +
'  /* 2358 */ 5042, 5703, 5002, 4247, 4996, 4247, 4788, 3809, 4247, 3832, 4247, 4247, 3700, 5661, 5015, 5022, 4247, 4247,\n' +
'  /* 2376 */ 4377, 5952, 4966, 4247, 4247, 4247, 5658, 4247, 5462, 3932, 5033, 5037, 5047, 4247, 4247, 5198, 5052, 5051,\n' +
'  /* 2394 */ 4247, 4247, 4387, 4247, 4879, 4247, 4247, 4247, 5821, 4073, 5056, 4247, 4199, 5151, 4347, 5073, 4361, 4247,\n' +
'  /* 2412 */ 5553, 3738, 5079, 4247, 4247, 4411, 4474, 4499, 5091, 5174, 4247, 4247, 4247, 5879, 5174, 4247, 4247, 5196,\n' +
'  /* 2430 */ 5095, 5097, 4247, 4247, 4412, 4077, 5101, 5106, 4247, 4247, 4454, 4247, 5863, 5133, 5320, 4631, 4247, 4247,\n' +
'  /* 2448 */ 4247, 5902, 5102, 5107, 4247, 4247, 4247, 5919, 3923, 3298, 5132, 4347, 4037, 4247, 5159, 4247, 5140, 5116,\n' +
'  /* 2466 */ 4247, 4247, 4489, 4247, 5144, 3298, 4247, 4247, 4247, 4376, 4247, 5946, 5146, 4247, 4247, 4247, 5889, 5199,\n' +
'  /* 2484 */ 5126, 4247, 4247, 4492, 5171, 4722, 3298, 4247, 5988, 4247, 4960, 4247, 4800, 4805, 4247, 4442, 4247, 4247,\n' +
'  /* 2502 */ 4365, 4247, 5172, 4247, 4247, 4247, 5921, 4247, 5804, 4247, 3434, 4051, 4960, 5151, 4371, 4247, 4247, 4247,\n' +
'  /* 2520 */ 5446, 5180, 4247, 5805, 4247, 4823, 3302, 5075, 5185, 4247, 4787, 5917, 5513, 4247, 4247, 4247, 5925, 4629,\n' +
'  /* 2538 */ 5181, 4712, 4048, 4247, 4247, 5117, 5380, 4247, 3318, 3302, 4247, 4247, 4247, 4131, 4026, 5194, 4247, 4247,\n' +
'  /* 2556 */ 4551, 3778, 4844, 3299, 5203, 5029, 5256, 5209, 4247, 4690, 5219, 5227, 5392, 4247, 4827, 4247, 4247, 4279,\n' +
'  /* 2574 */ 3821, 4247, 4247, 5005, 4247, 4690, 4247, 4843, 4247, 4247, 4549, 4247, 5006, 5390, 5394, 5003, 4247, 5236,\n' +
'  /* 2592 */ 5003, 4247, 4892, 3796, 5649, 4740, 4247, 5279, 5242, 3957, 4037, 4740, 3957, 4247, 5716, 4698, 5254, 5263,\n' +
'  /* 2610 */ 4739, 5264, 5268, 5276, 5264, 5284, 5286, 5290, 5301, 5302, 4247, 5306, 4247, 4252, 4729, 5316, 4253, 3400,\n' +
'  /* 2628 */ 5325, 5109, 5991, 5341, 5339, 5345, 5349, 5353, 5357, 5361, 5363, 5370, 5367, 5370, 5371, 5375, 4637, 3438,\n' +
'  /* 2646 */ 3300, 3455, 4247, 5554, 5113, 3843, 5452, 5384, 4247, 4893, 3797, 3298, 4148, 3724, 4304, 4568, 4247, 4455,\n' +
'  /* 2664 */ 3823, 5388, 4469, 4247, 5028, 4444, 4247, 4151, 4247, 5402, 5406, 5410, 4247, 5417, 4247, 4247, 4567, 4247,\n' +
'  /* 2682 */ 5427, 4247, 4806, 5419, 5433, 5440, 5444, 5445, 5456, 5943, 4247, 3980, 4247, 5810, 5064, 4247, 4965, 5107,\n' +
'  /* 2700 */ 4247, 4745, 4750, 4247, 4352, 4247, 4247, 3976, 4247, 5479, 5483, 4247, 4247, 4629, 4247, 5815, 5487, 5147,\n' +
'  /* 2718 */ 4247, 4977, 5321, 4983, 4247, 5816, 5488, 3298, 4688, 4247, 5004, 5997, 4164, 4973, 4199, 4631, 4360, 3804,\n' +
'  /* 2736 */ 5605, 5851, 4247, 3978, 4247, 5000, 3815, 5010, 4247, 5496, 5501, 4247, 5018, 4247, 3940, 5512, 4247, 4247,\n' +
'  /* 2754 */ 3716, 4247, 4247, 4784, 4637, 5517, 5173, 4247, 4247, 4883, 4247, 4247, 5522, 5334, 4199, 3439, 3302, 5214,\n' +
'  /* 2772 */ 5450, 5536, 4247, 3980, 4247, 5064, 5617, 4247, 5064, 5684, 5688, 4247, 5579, 4442, 3298, 4247, 5821, 5559,\n' +
'  /* 2790 */ 5564, 5435, 5540, 5548, 4247, 5064, 5995, 4247, 4247, 4247, 5558, 5563, 4247, 5084, 3714, 5335, 4247, 4247,\n' +
'  /* 2808 */ 4986, 5908, 3301, 4361, 5451, 5572, 5637, 4247, 3715, 4247, 5074, 5214, 4247, 4791, 4247, 4247, 3623, 3624,\n' +
'  /* 2826 */ 3477, 3332, 3629, 5588, 5107, 4247, 4247, 5011, 4037, 4361, 5604, 4285, 4247, 5086, 5335, 3716, 4247, 5609,\n' +
'  /* 2844 */ 4247, 5461, 4247, 4247, 3616, 3620, 4247, 5615, 5621, 4247, 5121, 5145, 4247, 4247, 4870, 4247, 5616, 4463,\n' +
'  /* 2862 */ 5086, 3455, 4719, 4174, 4247, 5135, 4754, 4247, 4401, 5977, 4243, 4247, 5635, 5461, 4247, 4296, 4419, 4247,\n' +
'  /* 2880 */ 5646, 4247, 4247, 5064, 4779, 4296, 4774, 4247, 5697, 4247, 5654, 4247, 4247, 5064, 5091, 4244, 4410, 3769,\n' +
'  /* 2898 */ 4247, 5155, 4836, 4858, 5658, 4297, 4775, 4247, 4247, 5629, 5665, 5837, 4247, 5676, 4676, 4247, 4247, 5683,\n' +
'  /* 2916 */ 4536, 4247, 4347, 5696, 4247, 5701, 5134, 4347, 4247, 5707, 4247, 5714, 5229, 4247, 5720, 4247, 5232, 4244,\n' +
'  /* 2934 */ 4247, 5162, 5245, 4247, 3364, 3381, 3310, 5319, 4247, 5707, 5229, 4535, 5882, 4245, 4400, 3881, 3863, 4143,\n' +
'  /* 2952 */ 3834, 5967, 5331, 5729, 4643, 5736, 5745, 5749, 5753, 5757, 5761, 5765, 5769, 5772, 5775, 5779, 5781, 5785,\n' +
'  /* 2970 */ 5789, 5793, 5797, 5801, 4247, 4247, 4247, 5985, 4247, 5506, 4550, 3840, 4247, 5377, 4247, 4247, 5065, 4879,\n' +
'  /* 2988 */ 3958, 5552, 5809, 5691, 4242, 4411, 4247, 5820, 5825, 4247, 5829, 4247, 5166, 4500, 4247, 4247, 5814, 4247,\n' +
'  /* 3006 */ 4247, 5863, 4822, 4247, 5842, 4247, 4247, 5069, 4247, 5860, 5238, 4247, 5868, 5869, 4247, 4247, 4247, 5090,\n' +
'  /* 3024 */ 5173, 4247, 5507, 4360, 3842, 4247, 5213, 4408, 4266, 5379, 4247, 4247, 5551, 4087, 4247, 4247, 4247, 5134,\n' +
'  /* 3042 */ 4247, 4872, 4247, 5873, 4290, 4247, 4247, 5134, 4543, 5890, 4247, 4247, 3998, 5422, 4247, 4247, 4247, 5413,\n' +
'  /* 3060 */ 4430, 5508, 5223, 4247, 4408, 4247, 5692, 4247, 4831, 4247, 5532, 5928, 4247, 5894, 5900, 5936, 3842, 4247,\n' +
'  /* 3078 */ 5230, 4094, 4245, 5379, 4247, 4265, 3723, 3971, 4245, 4247, 5229, 4247, 4348, 3972, 4873, 4247, 3786, 4659,\n' +
'  /* 3096 */ 4759, 4151, 4247, 5906, 4247, 4247, 5436, 5518, 5174, 5294, 5926, 4247, 4247, 5492, 3368, 5913, 4247, 4247,\n' +
'  /* 3114 */ 4247, 5497, 5467, 5929, 4247, 5895, 5153, 5935, 3841, 5064, 4247, 5231, 4872, 4246, 4247, 5940, 3971, 4872,\n' +
'  /* 3132 */ 5064, 5950, 4247, 4247, 5531, 5927, 4376, 5951, 4247, 5421, 5895, 4247, 4247, 4048, 4295, 5222, 5064, 4247,\n' +
'  /* 3150 */ 5550, 4088, 3971, 3963, 4245, 4247, 4247, 5568, 3438, 5956, 4247, 4247, 4247, 5573, 5046, 3356, 4247, 4247,\n' +
'  /* 3168 */ 4247, 5586, 5592, 5966, 4247, 4247, 4247, 5587, 5593, 5212, 3842, 4409, 4265, 3963, 4245, 4247, 5972, 4247,\n' +
'  /* 3186 */ 5296, 4247, 4247, 5597, 4247, 4247, 5297, 4247, 4247, 5611, 5041, 3972, 4873, 4247, 4247, 5623, 5529, 4407,\n' +
'  /* 3204 */ 4247, 4247, 4247, 5625, 4891, 5379, 4247, 4247, 4408, 6480, 6723, 6473, 6487, 6001, 6011, 6405, 6004, 6010,\n' +
'  /* 3222 */ 6024, 7043, 6005, 7043, 6027, 6400, 6406, 6023, 6006, 6007, 7043, 7043, 7043, 7043, 7027, 6022, 6006, 7043,\n' +
'  /* 3240 */ 6026, 7043, 7043, 6029, 7043, 7043, 6046, 6068, 6087, 6069, 6070, 6087, 6082, 6088, 6082, 6082, 6072, 6072,\n' +
'  /* 3258 */ 6082, 6083, 6085, 6084, 6084, 6084, 6084, 6071, 6071, 6071, 6082, 6090, 6086, 6082, 6073, 6092, 6096, 6095,\n' +
'  /* 3276 */ 6098, 6101, 6102, 6093, 6099, 6109, 6104, 6106, 6110, 6108, 6109, 6109, 6108, 6106, 6111, 6112, 6498, 6146,\n' +
'  /* 3294 */ 6473, 6487, 7042, 6525, 6476, 6487, 6487, 6487, 6148, 6487, 6487, 6487, 6055, 6131, 6078, 6134, 6487, 6013,\n' +
'  /* 3312 */ 6487, 6487, 6487, 6034, 6487, 7013, 7014, 6487, 6487, 6531, 6148, 6487, 6487, 6578, 6119, 6487, 6014, 6014,\n' +
'  /* 3330 */ 6014, 6014, 6372, 6372, 6372, 6372, 6129, 6129, 6129, 6060, 6064, 6129, 6129, 6129, 6129, 6064, 6060, 6043,\n' +
'  /* 3348 */ 6578, 6064, 6178, 6060, 6060, 6372, 6129, 6487, 6031, 6141, 7052, 6487, 6129, 6129, 6321, 6076, 6770, 6487,\n' +
'  /* 3366 */ 6487, 6124, 6487, 6487, 6013, 6487, 6269, 6129, 6547, 6131, 6131, 6131, 6570, 7011, 7017, 7017, 6487, 6487,\n' +
'  /* 3384 */ 6487, 6033, 6074, 6372, 6372, 6128, 6129, 6129, 6129, 6130, 6131, 6131, 6134, 6134, 6134, 6134, 6487, 6487,\n' +
'  /* 3402 */ 6013, 6711, 6134, 6154, 6487, 6487, 6487, 6044, 6371, 6130, 6131, 6570, 6134, 6154, 6064, 6060, 6061, 6126,\n' +
'  /* 3420 */ 6064, 6060, 6064, 6060, 6126, 6372, 6372, 6063, 6064, 6167, 6126, 6178, 6062, 6062, 6487, 6487, 6487, 6047,\n' +
'  /* 3438 */ 6487, 6487, 6729, 6487, 6487, 6487, 6030, 6048, 6129, 6129, 6064, 6126, 6178, 6062, 6129, 6129, 6064, 6487,\n' +
'  /* 3456 */ 6487, 6059, 6487, 6062, 6059, 6126, 6178, 6129, 6062, 6487, 6059, 6060, 6062, 6126, 6062, 6126, 6372, 6372,\n' +
'  /* 3474 */ 6129, 6060, 6061, 6126, 6372, 6372, 6372, 6178, 6062, 6487, 6487, 6374, 6322, 6014, 6479, 6140, 6015, 6115,\n' +
'  /* 3492 */ 6160, 6162, 6172, 6014, 6175, 6183, 6114, 6014, 6199, 6184, 6186, 6192, 6189, 6014, 6014, 6016, 6015, 6193,\n' +
'  /* 3510 */ 6188, 6205, 6163, 6014, 6014, 6020, 6195, 6014, 6019, 6014, 6019, 6200, 6201, 6204, 6202, 6190, 6207, 6210,\n' +
'  /* 3528 */ 6210, 6208, 6211, 6209, 6234, 6212, 6212, 6212, 6212, 6213, 6215, 6214, 6215, 6215, 6215, 6216, 6217, 6217,\n' +
'  /* 3546 */ 6218, 6224, 6224, 6219, 6221, 6225, 6223, 6244, 6224, 7048, 6015, 6017, 6227, 6229, 6231, 6233, 6238, 6235,\n' +
'  /* 3564 */ 6240, 6236, 6236, 6242, 6243, 6246, 6487, 6031, 6568, 6074, 7004, 6906, 6535, 6487, 6535, 6490, 6198, 6018,\n' +
'  /* 3582 */ 6196, 6408, 6487, 6487, 6487, 6054, 6487, 6638, 6487, 6487, 6031, 6758, 6463, 6487, 6487, 6487, 6615, 6489,\n' +
'  /* 3600 */ 7001, 7001, 6775, 6034, 6374, 6649, 7007, 6836, 6487, 6487, 6032, 6041, 6168, 7006, 6487, 6996, 7002, 6644,\n' +
'  /* 3618 */ 7012, 6395, 6474, 6487, 6487, 6487, 6060, 6060, 6060, 6060, 6126, 6372, 6178, 6129, 6129, 6129, 6043, 6333,\n' +
'  /* 3636 */ 6487, 6319, 6262, 6487, 6811, 6483, 6563, 6482, 6721, 6265, 6273, 6278, 6282, 6283, 6283, 6283, 6283, 6285,\n' +
'  /* 3654 */ 6286, 6288, 6288, 6288, 6289, 6288, 6291, 6293, 6295, 6295, 6295, 6303, 6302, 6303, 6302, 6302, 6296, 6297,\n' +
'  /* 3672 */ 6297, 6297, 6298, 6305, 6299, 6315, 6316, 6300, 6308, 6307, 6311, 6307, 6310, 6313, 6314, 6318, 6487, 7001,\n' +
'  /* 3690 */ 6334, 7010, 6366, 6487, 6487, 6563, 6487, 6031, 6641, 6143, 6507, 6506, 6487, 6487, 6039, 6940, 6487, 6504,\n' +
'  /* 3708 */ 6487, 6487, 6487, 6077, 6076, 6487, 6487, 6487, 6078, 6157, 6487, 6487, 6364, 6370, 6487, 6487, 6048, 6487,\n' +
'  /* 3726 */ 6487, 6037, 6374, 6249, 6487, 6487, 6048, 6574, 6718, 6487, 6460, 6476, 6484, 6487, 6491, 6726, 6598, 6487,\n' +
'  /* 3744 */ 6487, 6074, 6383, 6145, 7040, 7037, 7039, 7041, 6524, 6059, 6780, 7038, 7040, 7042, 6059, 6270, 6487, 6487,\n' +
'  /* 3762 */ 6076, 6467, 7040, 7042, 6394, 6345, 6487, 6078, 6487, 6487, 6487, 6270, 7041, 6400, 6275, 6345, 6145, 7040,\n' +
'  /* 3780 */ 7042, 6274, 6452, 6487, 6487, 6630, 6629, 6487, 6487, 6487, 6149, 6487, 6487, 6629, 6496, 6487, 6403, 6177,\n' +
'  /* 3798 */ 7041, 6450, 6452, 6476, 6487, 6558, 6487, 6487, 6076, 7003, 6769, 6145, 7040, 6351, 6476, 6487, 6417, 6487,\n' +
'  /* 3816 */ 6487, 6487, 6324, 6078, 6403, 6177, 6351, 6476, 6487, 6911, 6487, 6269, 6487, 6352, 6487, 6573, 6386, 6474,\n' +
'  /* 3834 */ 6487, 6487, 6077, 6322, 6350, 6476, 6487, 6487, 6077, 6487, 6487, 6487, 6905, 6120, 6145, 6759, 6487, 6042,\n' +
'  /* 3852 */ 6643, 6751, 6120, 6487, 6487, 6120, 6487, 6148, 6771, 6750, 6616, 6487, 6043, 6322, 6487, 6043, 6643, 6718,\n' +
'  /* 3870 */ 6721, 6487, 6536, 6574, 6576, 6411, 6487, 6487, 7019, 6487, 6044, 6352, 6487, 6465, 6487, 6725, 6413, 6170,\n' +
'  /* 3888 */ 6419, 6724, 6421, 6424, 6424, 6424, 6424, 6425, 6428, 6424, 6423, 6424, 6424, 6427, 6428, 6428, 6428, 6429,\n' +
'  /* 3906 */ 6430, 6430, 6430, 6430, 6430, 6432, 6432, 6432, 6432, 6436, 6434, 6434, 6432, 6432, 6433, 6436, 6436, 6041,\n' +
'  /* 3924 */ 6584, 6833, 6451, 6476, 6487, 6487, 6718, 6577, 6487, 6487, 6118, 6484, 6470, 6487, 6487, 6349, 6718, 6487,\n' +
'  /* 3942 */ 6487, 6044, 6562, 6448, 6487, 6485, 6485, 6442, 6487, 6487, 6487, 6352, 6487, 7022, 7023, 6487, 6487, 6487,\n' +
'  /* 3960 */ 6386, 6367, 6828, 6487, 6487, 6487, 6371, 6459, 6487, 7024, 6457, 6487, 6487, 6487, 6373, 6487, 6456, 6458,\n' +
'  /* 3978 */ 6487, 6487, 6136, 6487, 6487, 6487, 6374, 6367, 6487, 6580, 6581, 6487, 6049, 6051, 6053, 6725, 6487, 6487,\n' +
'  /* 3996 */ 6037, 6518, 6775, 6487, 6319, 6487, 6076, 6467, 6725, 6472, 6487, 6487, 6137, 6148, 6487, 6252, 6487, 6487,\n' +
'  /* 4014 */ 6158, 6487, 7025, 6258, 6343, 6561, 6487, 6487, 6487, 6413, 6909, 6560, 6487, 6487, 6487, 6443, 6487, 6487,\n' +
'  /* 4032 */ 6725, 6487, 6374, 6487, 6488, 7014, 6487, 6487, 6487, 6381, 6487, 6487, 6726, 7044, 6371, 6002, 6487, 6487,\n' +
'  /* 4050 */ 6487, 6325, 6487, 6487, 6487, 6332, 6487, 6514, 6487, 6487, 6148, 6536, 6488, 6517, 6549, 6772, 6523, 6523,\n' +
'  /* 4068 */ 6553, 6559, 6345, 6487, 6528, 6487, 6487, 6487, 6449, 6745, 6771, 6750, 6367, 6656, 6487, 6490, 6487, 6490,\n' +
'  /* 4086 */ 6761, 6487, 6487, 6487, 6630, 6487, 6487, 6775, 6487, 6487, 6499, 6487, 7018, 6782, 6553, 6559, 6536, 6487,\n' +
'  /* 4104 */ 6487, 6153, 6444, 6452, 6488, 6546, 6169, 6121, 6519, 6553, 6535, 6772, 6551, 6750, 6344, 6487, 6487, 6541,\n' +
'  /* 4122 */ 6179, 6151, 6151, 7018, 6782, 6553, 6535, 6487, 6487, 6487, 6487, 6556, 6557, 6833, 6367, 6487, 6487, 6154,\n' +
'  /* 4140 */ 6487, 6374, 6322, 6487, 6487, 6487, 6465, 6438, 6487, 6487, 6487, 6467, 6487, 6487, 6487, 6475, 6746, 6121,\n' +
'  /* 4158 */ 6772, 6551, 6566, 6536, 6566, 6536, 6487, 6487, 6155, 6157, 6487, 6541, 6042, 6746, 6121, 6727, 6499, 6487,\n' +
'  /* 4176 */ 6487, 6487, 6120, 6012, 6487, 6487, 6041, 6584, 6833, 6487, 6487, 6438, 6487, 6487, 6319, 6487, 6499, 6487,\n' +
'  /* 4194 */ 6499, 6371, 6012, 6487, 6487, 6157, 6487, 6487, 6487, 6059, 6060, 6060, 6060, 6372, 6372, 6372, 6127, 6584,\n' +
'  /* 4212 */ 7018, 6551, 6994, 6536, 6487, 6726, 6727, 6487, 6487, 6480, 6584, 6487, 6487, 6176, 6487, 6775, 6371, 6487,\n' +
'  /* 4230 */ 6487, 6467, 6583, 7004, 6836, 6396, 6487, 6583, 6165, 6391, 6584, 6374, 6487, 7014, 6487, 6487, 6497, 6487,\n' +
'  /* 4248 */ 6487, 6487, 6487, 6012, 6487, 6487, 6487, 6013, 6267, 6078, 6165, 6391, 6487, 6487, 6487, 6584, 6404, 6487,\n' +
'  /* 4266 */ 6487, 6487, 6491, 6487, 6487, 6048, 6481, 6078, 6154, 6487, 6487, 6496, 6589, 6487, 6487, 6078, 6403, 7021,\n' +
'  /* 4284 */ 6487, 7021, 6487, 6325, 6487, 7021, 7021, 6487, 6487, 6487, 6493, 6591, 6487, 6487, 6487, 6496, 6487, 6487,\n' +
'  /* 4302 */ 6438, 6487, 6593, 6352, 6487, 6487, 6487, 6319, 6037, 6487, 6352, 6573, 6487, 6624, 6468, 6623, 6820, 6819,\n' +
'  /* 4320 */ 6595, 6469, 6821, 6822, 6822, 6822, 6822, 6603, 6609, 6608, 6605, 6608, 6607, 6611, 6611, 6611, 6611, 6618,\n' +
'  /* 4338 */ 6611, 6618, 6611, 6612, 6613, 6613, 6613, 6613, 6614, 6487, 6487, 6487, 6497, 6499, 6487, 7018, 6352, 6487,\n' +
'  /* 4356 */ 6487, 6487, 6775, 6037, 6487, 6487, 6043, 6487, 6487, 6487, 6487, 6730, 6620, 6487, 6731, 6487, 6487, 6487,\n' +
'  /* 4374 */ 6515, 6627, 6487, 6487, 6488, 6113, 6042, 6622, 6487, 6487, 6626, 6730, 6157, 6487, 6487, 6248, 6252, 6487,\n' +
'  /* 4392 */ 6633, 6487, 6487, 6249, 6487, 6487, 6487, 6532, 6497, 6487, 6487, 6497, 6584, 6842, 6396, 6487, 6487, 6487,\n' +
'  /* 4410 */ 6489, 6487, 6487, 6487, 6490, 6040, 6745, 6723, 6123, 6487, 6487, 6269, 6487, 6487, 6269, 6320, 6257, 7012,\n' +
'  /* 4428 */ 6330, 6142, 6835, 6321, 6123, 6646, 6646, 6331, 6487, 6487, 6487, 6527, 6487, 7018, 6487, 6487, 6487, 6531,\n' +
'  /* 4446 */ 6487, 6487, 6059, 6374, 6373, 6536, 6459, 6616, 6482, 6487, 6487, 6487, 6543, 6754, 6487, 6487, 6487, 6536,\n' +
'  /* 4464 */ 6487, 6487, 6487, 6454, 6773, 6487, 6487, 6487, 6537, 6490, 6728, 6042, 6169, 6835, 6490, 6728, 6042, 6518,\n' +
'  /* 4482 */ 6415, 6859, 6484, 6487, 6415, 6329, 6276, 6487, 6050, 6052, 6487, 6487, 6487, 6521, 6571, 6168, 6835, 6328,\n' +
'  /* 4500 */ 6859, 6484, 6487, 6487, 6487, 6775, 6034, 6487, 6043, 6642, 6373, 6536, 6476, 7001, 6367, 6487, 6322, 6487,\n' +
'  /* 4518 */ 6487, 6487, 6534, 6487, 6487, 6487, 6533, 6487, 6487, 6487, 6348, 6487, 6643, 6536, 6476, 6531, 6048, 6481,\n' +
'  /* 4536 */ 6487, 6487, 6497, 6940, 6487, 6487, 6726, 6928, 6835, 6647, 6487, 6487, 6487, 6928, 6835, 6487, 6487, 6059,\n' +
'  /* 4554 */ 6769, 6145, 6034, 6373, 6476, 6487, 6055, 6057, 6487, 6487, 6487, 6584, 6842, 6518, 6487, 6487, 6487, 6538,\n' +
'  /* 4572 */ 6078, 6487, 6487, 6386, 6396, 6487, 6536, 6654, 6616, 6483, 6491, 6630, 6659, 6665, 6668, 6667, 6671, 6674,\n' +
'  /* 4590 */ 6674, 6675, 6673, 6675, 6674, 6674, 6679, 6674, 6678, 6677, 6681, 6684, 6683, 6684, 6684, 6685, 6687, 6687,\n' +
'  /* 4608 */ 6688, 6688, 6689, 6687, 6687, 6687, 6690, 6692, 6692, 6692, 6692, 6696, 6696, 6694, 6692, 6693, 6693, 6696,\n' +
'  /* 4626 */ 6696, 6693, 6696, 6487, 6487, 6487, 6574, 6487, 6487, 6074, 7008, 6400, 6484, 6487, 6487, 6487, 6698, 6487,\n' +
'  /* 4644 */ 6487, 6322, 6487, 6352, 6487, 6319, 6066, 6487, 6487, 6487, 6583, 6048, 6700, 6416, 6487, 6487, 6371, 6487,\n' +
'  /* 4662 */ 6487, 6702, 6487, 6704, 6705, 6487, 6707, 6487, 6487, 6371, 6645, 6487, 7045, 6407, 6487, 6075, 6487, 6487,\n' +
'  /* 4680 */ 6487, 6541, 6042, 6584, 7018, 6782, 6056, 6058, 6487, 6487, 6386, 6439, 6487, 6487, 6373, 6487, 7015, 6713,\n' +
'  /* 4698 */ 6321, 6352, 6487, 6715, 6542, 6487, 6487, 6487, 6596, 6720, 6397, 6487, 6487, 6386, 6487, 6487, 6487, 6345,\n' +
'  /* 4716 */ 6487, 6732, 6407, 6487, 6076, 6585, 6487, 6076, 6643, 6535, 6734, 6487, 6734, 6487, 6076, 6775, 6865, 6478,\n' +
'  /* 4734 */ 6736, 6398, 6661, 6544, 6484, 6487, 6487, 6386, 7014, 6487, 6487, 6477, 6041, 6856, 6145, 6145, 6662, 6838,\n' +
'  /* 4752 */ 6487, 6487, 6651, 6399, 6401, 6487, 6487, 6414, 6487, 6487, 6076, 6076, 6487, 6488, 6740, 6487, 6078, 6048,\n' +
'  /* 4770 */ 6154, 6487, 6487, 6742, 6487, 6078, 6078, 6078, 6487, 6744, 6153, 6773, 6662, 6484, 6487, 6726, 6042, 7008,\n' +
'  /* 4788 */ 6487, 6487, 6487, 6769, 6145, 6644, 6417, 6753, 6756, 7009, 6463, 6487, 6541, 6033, 6165, 7042, 7042, 6663,\n' +
'  /* 4806 */ 6487, 6487, 6487, 6599, 6487, 6487, 7015, 6775, 6487, 6487, 6487, 6749, 6487, 6487, 6487, 6597, 6400, 6487,\n' +
'  /* 4824 */ 6487, 6487, 6628, 6488, 6480, 7042, 6464, 6487, 6487, 6487, 6629, 6487, 6718, 6487, 6476, 6487, 6386, 6480,\n' +
'  /* 4842 */ 6464, 6487, 6487, 6444, 6345, 6487, 6487, 6487, 6536, 6721, 6491, 6487, 6487, 6373, 6497, 6487, 6491, 6487,\n' +
'  /* 4860 */ 6373, 6487, 6487, 6414, 6487, 6536, 6476, 6487, 6120, 6048, 6487, 6487, 6487, 6481, 6487, 6487, 6487, 6484,\n' +
'  /* 4878 */ 6487, 6132, 6643, 6535, 6476, 6487, 6487, 6708, 6487, 6120, 6861, 6366, 6995, 6484, 6487, 6487, 6487, 6074,\n' +
'  /* 4896 */ 6403, 6177, 6120, 6122, 6396, 6487, 6131, 6487, 6487, 6487, 6637, 6487, 6763, 6076, 6766, 6763, 6520, 6764,\n' +
'  /* 4914 */ 6768, 6779, 6079, 6080, 6079, 6778, 6079, 6079, 6079, 6079, 6138, 6789, 6792, 6791, 6793, 6795, 6797, 6797,\n' +
'  /* 4932 */ 6798, 6799, 6803, 6797, 6797, 6797, 6804, 6804, 6804, 6799, 6799, 6799, 6799, 6800, 6808, 6801, 6808, 6808,\n' +
'  /* 4950 */ 6808, 6806, 6801, 6799, 6801, 6808, 6807, 6810, 6487, 6487, 6459, 6487, 6487, 6487, 6150, 6813, 6569, 6133,\n' +
'  /* 4968 */ 6924, 6345, 6030, 6048, 6136, 6487, 6156, 6487, 6155, 6783, 6487, 6487, 6487, 6644, 6484, 6487, 6487, 6815,\n' +
'  /* 4986 */ 6487, 6260, 6487, 6487, 6508, 6510, 6487, 6487, 6631, 6484, 6487, 6488, 6825, 6827, 6487, 6824, 6826, 6487,\n' +
'  /* 5004 */ 6487, 6487, 6645, 6476, 6487, 6487, 6323, 6487, 6487, 6487, 6652, 6487, 6529, 6487, 6487, 6462, 6487, 6487,\n' +
'  /* 5022 */ 6530, 6487, 6487, 6530, 6487, 6997, 6487, 6487, 6476, 6487, 6487, 6490, 6377, 6726, 6716, 6487, 6496, 6487,\n' +
'  /* 5040 */ 6832, 6850, 6487, 6487, 6487, 6717, 6845, 6849, 6827, 6487, 6487, 7000, 6487, 6999, 6487, 6487, 6852, 6325,\n' +
'  /* 5058 */ 6487, 6487, 6480, 6584, 7005, 6391, 6487, 6487, 6487, 6488, 6041, 6487, 6487, 7001, 6998, 6487, 6830, 6487,\n' +
'  /* 5076 */ 6487, 6487, 6657, 6531, 6487, 6496, 6574, 6531, 6487, 6487, 6487, 6349, 6487, 6487, 6488, 6065, 6781, 6444,\n' +
'  /* 5094 */ 6451, 6487, 6487, 6999, 6487, 6999, 6487, 6487, 6487, 6854, 6133, 6924, 6924, 6345, 6487, 6487, 6487, 6136,\n' +
'  /* 5112 */ 6325, 6487, 6726, 6531, 6147, 6487, 6487, 6487, 6733, 6487, 6487, 6840, 7036, 6738, 6487, 6574, 6487, 6574,\n' +
'  /* 5130 */ 6117, 6629, 7001, 6774, 6487, 6487, 6487, 6726, 6042, 6651, 6487, 6579, 6487, 6858, 7036, 6738, 6837, 6586,\n' +
'  /* 5148 */ 6476, 6487, 6487, 6487, 7008, 6775, 6487, 6487, 6487, 7014, 6487, 6726, 6554, 6148, 6487, 6279, 6487, 6487,\n' +
'  /* 5166 */ 6032, 6042, 6518, 6415, 6521, 6571, 6444, 6451, 6587, 6487, 6487, 6487, 6718, 6487, 6574, 6574, 6574, 6487,\n' +
'  /* 5184 */ 6487, 6449, 6325, 6487, 6459, 6371, 6487, 6487, 6446, 6486, 6843, 6476, 6487, 6487, 6481, 6497, 6487, 6487,\n' +
'  /* 5202 */ 6574, 6148, 6148, 6487, 6487, 6482, 6722, 7014, 6531, 6148, 6487, 6325, 6059, 6487, 6487, 6487, 6660, 6487,\n' +
'  /* 5220 */ 6487, 6575, 6148, 6043, 6076, 6487, 6487, 6487, 6721, 6487, 6487, 6487, 6498, 6496, 6487, 6499, 6573, 6515,\n' +
'  /* 5238 */ 6487, 6487, 6487, 7044, 6487, 7001, 6515, 6487, 6327, 6337, 6487, 6035, 6487, 6487, 6379, 6721, 7014, 6487,\n' +
'  /* 5256 */ 6487, 7001, 6487, 6487, 6367, 6487, 6487, 7014, 6487, 6487, 6645, 6487, 6487, 6863, 6487, 6487, 6488, 6481,\n' +
'  /* 5274 */ 6487, 6487, 6645, 6487, 6487, 6645, 6487, 6487, 6487, 6773, 7001, 7014, 6386, 7014, 6386, 7014, 7014, 7014,\n' +
'  /* 5292 */ 7014, 7013, 6487, 6487, 6487, 6031, 6141, 6077, 6487, 7013, 7013, 7013, 7013, 7014, 6659, 6256, 7042, 6401,\n' +
'  /* 5310 */ 6013, 6059, 6490, 6487, 6181, 6368, 6487, 6487, 6865, 6726, 6487, 6487, 6497, 7014, 6487, 6867, 6013, 6148,\n' +
'  /* 5328 */ 6487, 6340, 6816, 6487, 6038, 6487, 6157, 6078, 6157, 6078, 6157, 6883, 6888, 6884, 6884, 6884, 6884, 6881,\n' +
'  /* 5346 */ 6882, 6888, 6884, 6887, 6872, 6885, 6872, 6890, 6872, 6873, 6874, 6878, 6875, 6876, 6892, 6894, 6877, 6896,\n' +
'  /* 5364 */ 6878, 6879, 6898, 6898, 6899, 6900, 6898, 6898, 6898, 6898, 6902, 6903, 6902, 6487, 6487, 6488, 6487, 6487,\n' +
'  /* 5382 */ 6487, 7008, 6268, 6487, 6269, 6392, 6487, 6913, 6487, 6476, 6487, 6573, 6515, 6531, 6487, 6487, 6487, 7024,\n' +
'  /* 5400 */ 7026, 6909, 6250, 6259, 6487, 6915, 6539, 6917, 6487, 6253, 6280, 6919, 6487, 6487, 6488, 6640, 6142, 6487,\n' +
'  /* 5418 */ 6599, 6601, 6487, 6487, 6487, 6775, 6487, 6487, 6255, 6600, 6476, 6487, 6487, 6488, 6744, 6487, 6787, 6487,\n' +
'  /* 5436 */ 6487, 6488, 6933, 6756, 6487, 6487, 6784, 6786, 6487, 6785, 6487, 6487, 6487, 6813, 6487, 6905, 6585, 6487,\n' +
'  /* 5454 */ 6726, 6487, 6726, 6487, 6747, 6487, 6342, 6487, 6487, 6487, 6075, 6487, 6075, 6487, 6488, 6376, 6487, 6346,\n' +
'  /* 5472 */ 6266, 6157, 6385, 6487, 6487, 6487, 6824, 6487, 6488, 6927, 6153, 6923, 6365, 6275, 6587, 6756, 6384, 7040,\n' +
'  /* 5490 */ 6274, 6586, 6659, 6256, 7042, 6484, 6487, 6487, 6732, 6487, 6487, 6487, 6487, 6930, 6487, 6355, 6487, 6487,\n' +
'  /* 5508 */ 6033, 7016, 6835, 6487, 6921, 6487, 6487, 6487, 6834, 6756, 6375, 6166, 6466, 6451, 6353, 6487, 6487, 6078,\n' +
'  /* 5526 */ 6487, 6487, 6012, 7041, 6008, 6487, 6487, 6488, 7050, 6065, 6726, 7015, 7021, 6708, 6756, 6135, 6144, 7040,\n' +
'  /* 5544 */ 6487, 6487, 6487, 6050, 6859, 6587, 6487, 6487, 6490, 6487, 6487, 6487, 6578, 6484, 6932, 6041, 6153, 7018,\n' +
'  /* 5562 */ 6166, 6166, 6466, 6586, 6476, 6487, 6487, 6490, 6847, 6484, 6269, 6487, 6487, 6487, 6840, 6845, 6487, 6733,\n' +
'  /* 5580 */ 6487, 6487, 6488, 6480, 6042, 6584, 6487, 6932, 6164, 7018, 6166, 6859, 6166, 6859, 6345, 6487, 6487, 6487,\n' +
'  /* 5598 */ 6659, 6008, 6487, 6357, 6487, 6359, 6521, 6367, 6487, 6499, 7015, 6487, 6733, 6487, 6488, 6065, 6846, 6487,\n' +
'  /* 5616 */ 6488, 6935, 7020, 6669, 6536, 6669, 6536, 6487, 6487, 6490, 6572, 7041, 6400, 6847, 6487, 6487, 6487, 6841,\n' +
'  /* 5634 */ 6322, 6732, 6487, 6489, 6487, 6487, 6921, 6487, 6487, 6937, 6585, 6536, 6487, 6488, 6938, 6452, 6476, 6487,\n' +
'  /* 5652 */ 6487, 6776, 6043, 6487, 6076, 6461, 6488, 6498, 6452, 6487, 6361, 6362, 6505, 6449, 6487, 6059, 6487, 6367,\n' +
'  /* 5670 */ 6487, 6635, 6487, 6487, 6262, 6487, 6487, 6481, 6488, 6487, 6371, 6387, 6995, 6488, 6498, 6536, 6487, 6496,\n' +
'  /* 5688 */ 6075, 6075, 6075, 6487, 6371, 6487, 6497, 6487, 6940, 6487, 6487, 6487, 6847, 6497, 6940, 6496, 6487, 6487,\n' +
'  /* 5706 */ 6818, 6487, 6498, 6487, 6487, 6490, 6583, 6048, 6497, 6499, 6487, 6487, 6500, 6173, 6487, 6497, 6723, 6487,\n' +
'  /* 5724 */ 6371, 6759, 6484, 6487, 6487, 6942, 6465, 6487, 6487, 6503, 6487, 6501, 7015, 6465, 6487, 7015, 6322, 6487,\n' +
'  /* 5742 */ 6487, 6180, 6487, 6271, 6548, 6487, 6944, 6945, 6948, 6120, 6947, 6152, 6120, 6335, 6048, 6950, 6908, 6552,\n' +
'  /* 5760 */ 6952, 6908, 6907, 6907, 6953, 6908, 6956, 6955, 6955, 6958, 6960, 6961, 6963, 6965, 6963, 6967, 6967, 6978,\n' +
'  /* 5778 */ 6977, 6978, 6979, 6968, 6967, 6968, 6969, 6970, 6970, 6981, 6972, 6971, 6972, 6970, 6973, 6974, 6975, 6986,\n' +
'  /* 5796 */ 6985, 6974, 6974, 6983, 6984, 6988, 6989, 6991, 6487, 6374, 6649, 6476, 6487, 6120, 6487, 6487, 6487, 6921,\n' +
'  /* 5814 */ 6993, 6487, 6487, 6487, 6926, 6756, 6564, 6487, 6487, 6487, 6932, 7029, 6487, 6726, 7031, 6487, 6487, 7033,\n' +
'  /* 5832 */ 6487, 6390, 6487, 6319, 6487, 6726, 6487, 6487, 6487, 6158, 6487, 6492, 6494, 6496, 6487, 6487, 7021, 6487,\n' +
'  /* 5850 */ 6487, 7021, 6487, 6708, 6487, 6039, 6487, 6487, 6388, 6487, 6487, 6493, 6495, 6487, 6487, 6487, 7001, 6078,\n' +
'  /* 5868 */ 6339, 6487, 6338, 6487, 6487, 6263, 6487, 6487, 6075, 6386, 6487, 6031, 7035, 6737, 6496, 6487, 6497, 6487,\n' +
'  /* 5886 */ 6374, 6444, 6345, 6487, 6488, 7047, 6855, 6660, 6487, 6775, 6487, 6775, 6487, 6499, 6487, 6487, 6726, 6413,\n' +
'  /* 5904 */ 7018, 6415, 6260, 6487, 6075, 7021, 6487, 6487, 6589, 6042, 6521, 6571, 6496, 6487, 6515, 6487, 6487, 6487,\n' +
'  /* 5922 */ 6480, 6041, 6584, 6031, 6041, 6065, 6153, 6660, 6487, 6487, 6487, 6165, 6350, 6033, 7018, 6775, 6059, 6487,\n' +
'  /* 5940 */ 6491, 6487, 6048, 6487, 6392, 6487, 6487, 6488, 7036, 6738, 6113, 6042, 6521, 6389, 6487, 6487, 7001, 6075,\n' +
'  /* 5958 */ 6487, 6487, 6509, 6511, 6487, 6487, 6036, 6710, 7052, 6487, 6487, 6487, 7015, 6441, 6487, 6487, 6573, 6487,\n' +
'  /* 5976 */ 6409, 6487, 6487, 6374, 6487, 6487, 6487, 6048, 6148, 6488, 6113, 6065, 6487, 6449, 6048, 6136, 6136, 6869,\n' +
'  /* 5994 */ 6871, 6113, 6043, 6487, 6487, 6512, 6487, 1075838976, 2097152, 0x80000000, 4194560, 4196352, -2143289344,\n' +
'  /* 6007 */ -2143289344, 4194304, 0x80000000, 270532608, 2097152, 2097152, 0, 16, 16, 20, 16, 21, 16, 28, 2097552,\n' +
'  /* 6022 */ 37748736, 541065216, 541065216, -2143289344, 4198144, 4196352, 276901888, 8540160, 4194304, 1, 2, 8, 32, 0,\n' +
'  /* 6036 */ 29, 0, 32, 1, 4, 16, 32, 64, 0, 40, 8425488, 4194304, 1024, 0, 59, 140224, 5505024, -1887436800, 0, 63,\n' +
'  /* 6056 */ 351232, 7340032, -2030043136, 0, 64, 64, 96, 0, 96, 64, 128, -2113929216, 37748736, 742391808, 742391808,\n' +
'  /* 6071 */ 775946240, -1371537408, 775946240, 64, 256, 0, 128, 0, 256, 256, 257, 775946240, 775946240, 171966464,\n' +
'  /* 6085 */ 171966464, 775946240, 239075328, -1405091840, -1371537408, 239075328, 171966464, 2097216, 4194368,\n' +
'  /* 6094 */ -2143289280, 4194368, 4718592, 4194400, 541065280, 4194368, -2143285440, 4720640, 541589504, 4194400,\n' +
'  /* 6104 */ -2143285408, 775946336, 775946304, 776470528, -2109730976, -2143285408, -2143285408, 775946304,\n' +
'  /* 6112 */ -1908404384, 2, 16, 48, 80, 8392704, 0, 1792, 0, 1024, 4096, 4194304, 8388608, 4096, 64, 524288, 32, 96,\n' +
'  /* 6130 */ 96, 128, 128, 512, 2048, 2048, 4096, 0, 384, -1879046336, 536936448, 16, 64, 896, 8192, 65536, 262144,\n' +
'  /* 6147 */ 262144, 8192, 0, 260, 512, 1024, 1024, 2048, 0, 288, 8388608, 0, 300, 528, 524304, 1048592, 2097168, 16,\n' +
'  /* 6165 */ 1024, 65536, 524288, 64, 384, 512, 9476, 268435472, 16, 4096, 262160, 16, 262144, 524288, 96, 384, 0, 2432,\n' +
'  /* 6183 */ 536936448, 20, 24, 560, 48, 1048592, 1048592, 16, 2228784, 3146256, 2097680, 3145744, 3146256, 16,\n' +
'  /* 6197 */ 163577856, 2098064, 17, 17, 528, 16, 1049104, 528, 2097168, 2097168, -161430188, -161429680, -161429676,\n' +
'  /* 6210 */ -161430188, -161430188, -161429676, -161429676, -161429675, -161349072, -161349072, -161347728, -161347728,\n' +
'  /* 6219 */ -161298572, -161298576, -160299088, -161298576, -160299084, -161298572, -161298572, -160774288, 21, 53,\n' +
'  /* 6229 */ 146804757, 146812949, 146862101, 146863389, -161429740, -161429676, -160905388, 146863389, 146863389,\n' +
'  /* 6238 */ -161429676, 146863389, 146863421, 146863389, 146863421, -161298572, -160774284, -160774284, -18860267,\n' +
'  /* 6247 */ -18729163, 32768, 100663296, 0, 12545, -1073741824, 0, 12561, 1, 32768, 1048576, 4194304, 25165824, 0,\n' +
'  /* 6261 */ 49152, 164096, 0, 57344, 2621440, 1073741824, 8192, 66048, 0, 65536, 1048576, 4096, 8, 16777216, 100663296,\n' +
'  /* 6276 */ 134217728, 0x80000000, 1073774592, 278528, 0, 78081, 1226014816, 100665360, 100665360, -2046818288,\n' +
'  /* 6286 */ 1091799136, -2044196848, 1091799136, 1091799136, 1091803360, 1091799136, 1158908000, 1158908001,\n' +
'  /* 6294 */ 1192462432, 1192462448, 1192462448, 1870630720, 1870630720, 1870647104, 1870630736, 1870630736, 1200851056,\n' +
'  /* 6303 */ 1200851056, 1091799393, 1870647104, 1870647104, 1870655316, 1870655316, 1870630736, 1870655316, 1870655317,\n' +
'  /* 6312 */ 1870655348, 1879019376, 1879019376, 1870647124, 1870647124, 1870630736, 1879035764, 0, 131072, 262144,\n' +
'  /* 6322 */ 1048576, 0, 4036, 0, 4096, 229440, 1048576, 8388608, 33554432, -1946157056, 0, 131328, 131072, 524288,\n' +
'  /* 6336 */ 4100, 1224736768, 0, 150528, 0, 235712, 2048, 100663296, 402653184, 536870912, 1073741824, 1073741824,\n' +
'  /* 6348 */ -2046820352, 0, 262144, 2097152, 67108864, 0, 327680, 231488, 1090519040, 1157627904, 1191182336, 9437184,\n' +
'  /* 6360 */ 231744, 1862270976, 1862270976, 520000, 98304, 1048576, 16777216, 134217728, 0, 1864, 150994944, 0, 524288,\n' +
'  /* 6373 */ 524288, 0, 2048, 12288, 0, 2304, 128, 6144, 128, 4096, 1536, 2048, 77824, 0, 2097152, 134217728, 2048,\n' +
'  /* 6390 */ 262144, 16777216, 268435456, 49152, 117440512, 134217728, 268435456, 0, 20480, 65536, 4194304, 16777216,\n' +
'  /* 6402 */ 0x80000000, 1536, 65536, 268435456, 4194432, 3145728, 0, 24, 282624, 33554432, 536870912, 32, 512, 131072,\n' +
'  /* 6416 */ 1048576, 67108864, 1073741824, 134218240, 1050624, 50331649, 1275208192, 541065224, 4194312, 4194312,\n' +
'  /* 6426 */ 4194344, 4203820, -869654016, -869654016, 1279402504, 1279402504, 2143549415, 2143549415, 2143549423,\n' +
'  /* 6435 */ 2143549415, 2143549423, 2143549423, 1, 16777216, 1073741824, 139264, 1275068416, 0, 3145728, 16777216, 512,\n' +
'  /* 6447 */ 2760704, 4203520, 0, 4194304, 67108864, 134217728, 536870912, 520, 4333568, 999, 29619200, 2113929216, 0,\n' +
'  /* 6460 */ 8388608, 134217728, 8, 4194304, 50331648, 0, 1048576, 33554432, 0, 1049088, 0, 1050624, 2048, 1048576,\n' +
'  /* 6474 */ 1073741824, 0x80000000, 1073741824, 0, 15, 16, 2, 4, 0, 0x80000000, 0x80000000, 0, -872415232, 0, 0, 1, 0,\n' +
'  /* 6491 */ 2, 0, 3, 240, 19456, 262144, 0, 4, 8, 0, 5, 86528, 139264, 0, 16252928, 0, 511808, 0, 495424, 7864320,\n' +
'  /* 6511 */ 1862270976, 0, 339968, 44, 0, 16777216, 102, 384, 8192, 229376, 128, 1024, 229376, 4194304, 251658240,\n' +
'  /* 6526 */ 536870912, 110, 110, 0, 19947520, 0, 33554432, 1024, 2097152, 268435456, 536870912, 0, 12289, 0, 12305, 1,\n' +
'  /* 6542 */ 6, 0, 50331648, 67108864, 6, 96, 1048576, 512, 5120, 229376, 25165824, 25165824, 33554432, 262144, 104,\n' +
'  /* 6557 */ 104, 0, 67108864, 402653184, 1610612736, 0, 2621440, 0, 58368, 33554432, 402653184, 4, 32, 128, 2048,\n' +
'  /* 6572 */ 16384, 32768, 0, 8192, 8192, 9216, 0, 1536, 0, 1007, 1007, 4, 256, 1024, 134217728, 805306368, 1073741824,\n' +
'  /* 6589 */ 256, 65536, 8192, 67108864, 32, 4100, 270532608, 0, 83886080, 117440512, 0, 605247, 1058013184, 1073741824,\n' +
'  /* 6603 */ 147193865, 5505537, 5591557, 5587465, 5591557, 5587457, 5587457, 147202057, 13894153, 13894153,\n' +
'  /* 6613 */ -1881791493, -1881791493, 0, 134217728, 1073741824, 13894153, 81003049, 4456448, 8388608, 5505024, 0,\n' +
'  /* 6624 */ 134348800, 134348800, 82432, 0, 142606336, 0, 16384, 0, 1856, 41, 75497472, 512, 1048576, 81920, 0,\n' +
'  /* 6639 */ 159383552, 2, 56, 64, 2048, 524288, 2097152, 16777216, 33554432, 0x80000000, 524288, 536870912, 256, 32768,\n' +
'  /* 6653 */ 4194304, 8396800, 4194304, 8396800, 0, 243269632, 2, 16384, 262144, 7340032, 50331648, 0x80000000, 16384,\n' +
'  /* 6666 */ 16777216, 268567040, 16384, 524288, 134217728, -2113929088, 2113544, 72618005, 68423701, 68423701,\n' +
'  /* 6676 */ 68489237, -2079059883, -2079059883, 68423701, 85200917, 68425749, 68423703, 85200919, 69488664, 69488664,\n' +
'  /* 6686 */ 70537244, 70537245, 70537245, -2076946339, 70537245, 70539293, -2022351809, -2022351809, -2022351681,\n' +
'  /* 6695 */ -2022351809, -2022351681, -2022351681, 131584, 268435456, 21, 266240, 331776, 83886080, 5242880,\n' +
'  /* 6705 */ -2080374784, 268288, 23, 0, 268435456, 284672, 0, 268500992, 131072, 268435456, 5242880, 0, 301989888, 0,\n' +
'  /* 6719 */ 536870912, 7, 0, 1073741824, 8, 262144, 512, 0, 8, 8, 16, 0, 9, 0, 12, 0, 13, 32, 3072, 16384, 3145728, 4,\n' +
'  /* 6741 */ 1048576, 12, 3145728, 14, 32, 256, 512, 65536, 128, 33554432, 67108864, 536870912, 6, 8, 8388608, 32, 1024,\n' +
'  /* 6758 */ 4, 2097152, 1073741824, 4, 50331648, 1073743872, 268435968, 16777220, 268435968, 268435968, 268436032, 256,\n' +
'  /* 6770 */ 1536, 1024, 8192, 16384, 65536, 131072, 0, 9476, 256, 536871168, 256, 3584, 16384, 229376, 0, 605503,\n' +
'  /* 6786 */ 1066401792, 0, 867391, -1879046334, 1073744256, -1879046334, -1879046334, -1879046326, -1879046326,\n' +
'  /* 6795 */ -1845491902, -1878784182, 268444480, 268444480, 2100318145, 2100318145, 2100318149, 2100318145, 268436289,\n' +
'  /* 6804 */ 268436288, 268436288, 2100326337, 2100326337, 2100318149, 2100318149, 2100326341, 0, 1073741825, 1, 16,\n' +
'  /* 6815 */ 576, 0, 1090519040, 832, 8192, 1049088, 1049088, 12845065, 12845065, 1, 4032, 19939328, 2080374784, 0,\n' +
'  /* 6829 */ 1275068416, 4, 16777216, 768, 8192, 33554432, 8192, 131072, 16777216, 67108864, 0x80000000, 1, 64, 65536,\n' +
'  /* 6843 */ 16777216, 536870912, 128, 3840, 16384, 4194304, 16384, 19922944, 2080374784, 1, 1024, 1, 128, 3072, 20480,\n' +
'  /* 6858 */ 8, 33554432, 134217728, 2048, 3145728, 32768, 16777216, 134218752, 0, 4243456, 0, 4243456, 4096, 1048588,\n' +
'  /* 6872 */ 12289, 12289, 1098920193, 1132474625, 1124085761, 1124085761, 1132474625, 1132474625, 1400975617,\n' +
'  /* 6881 */ 1124073474, 1124073472, 1124073488, 1124073472, 1124073472, 12289, 1392574464, 1124073472, 1258292224,\n' +
'  /* 6890 */ 1073754113, 12289, 1124085777, 1124085761, 1258304513, 1124085761, 1098920209, 1132474625, 2132360255,\n' +
'  /* 6899 */ 2132360255, 2132622399, 2132622399, 2132360255, 2140749119, 2140749119, 128, 131072, 25165824, 92274688,\n' +
'  /* 6909 */ 25165824, 100663296, 184549376, 0, 318767104, 0, 58720256, 0, 13313, 0, 327155712, 0, 33554432, 1073741824,\n' +
'  /* 6923 */ 77824, 524288, 268435456, 1, 30, 32, 384, 1, 12288, 1, 14, 16, 14, 1024, 1, 12, 1024, 8, 536870912,\n' +
'  /* 6942 */ 9437184, 0, 68157440, 137363456, 0, 137363456, 66, 66, 100680704, 25165824, 26214400, 92274688, 25165952,\n' +
'  /* 6955 */ 92274688, 92274688, 93323264, 92274720, 93323264, 25165890, 100721664, 25165890, 100721928, 100721928,\n' +
'  /* 6965 */ 100787464, 100853000, 125977600, 125977600, 127026176, 281843, 281843, 1330419, 281843, 5524723, 5524723,\n' +
'  /* 6976 */ 92556531, 126895104, 125846528, 125846528, 125846560, 1330419, 1330419, 39079155, 72633587, 5524723,\n' +
'  /* 6986 */ 93605107, 93605107, 127290611, 127290611, 97799411, 131484915, 0, 17408, 33554432, 268435456, 1073741824,\n' +
'  /* 6997 */ 32768, 196608, 0, 24576, 0, 32768, 131072, 1024, 98304, 131072, 32768, 32768, 65536, 2097152, 8388608,\n' +
'  /* 7012 */ 8388608, 16777216, 16777216, 0, 512, 4096, 4096, 8192, 4096, 65536, 0, 520, 0, 999, 259072, 4194304,\n' +
'  /* 7028 */ 4194432, 58624, 0, 124160, 189696, 148480, 50331648, 112, 128, 3584, 98304, 393216, 524288, 1048576,\n' +
'  /* 7042 */ 2097152, 4194304, 4194304, 0, 28, 2, 112, 48, 2, 48, 128, 262144\n' +
'];\n' +
'\n' +
'XQueryParser.TOKEN =\n' +
'[\n' +
'  "(0)",\n' +
'  "PragmaContents",\n' +
'  "DirCommentContents",\n' +
'  "DirPIContents",\n' +
'  "CDataSection",\n' +
'  "Wildcard",\n' +
'  "EQName",\n' +
'  "URILiteral",\n' +
'  "IntegerLiteral",\n' +
'  "DecimalLiteral",\n' +
'  "DoubleLiteral",\n' +
'  "StringLiteral",\n' +
'  "PredefinedEntityRef",\n' +
'  "\'\\"\\"\'",\n' +
'  "EscapeApos",\n' +
'  "ElementContentChar",\n' +
'  "QuotAttrContentChar",\n' +
'  "AposAttrContentChar",\n' +
'  "PITarget",\n' +
'  "NCName",\n' +
'  "QName",\n' +
'  "S",\n' +
'  "S",\n' +
'  "CharRef",\n' +
'  "CommentContents",\n' +
'  "EOF",\n' +
'  "\'!\'",\n' +
'  "\'!=\'",\n' +
'  "\'\\"\'",\n' +
'  "\'#\'",\n' +
'  "\'#)\'",\n' +
'  "\'$\'",\n' +
'  "\'%\'",\n' +
'  "\'\'\'\'",\n' +
'  "\'(\'",\n' +
'  "\'(#\'",\n' +
'  "\'(:\'",\n' +
'  "\')\'",\n' +
'  "\'*\'",\n' +
'  "\'*\'",\n' +
'  "\'+\'",\n' +
'  "\',\'",\n' +
'  "\'-\'",\n' +
'  "\'-->\'",\n' +
'  "\'.\'",\n' +
'  "\'..\'",\n' +
'  "\'/\'",\n' +
'  "\'//\'",\n' +
'  "\'/>\'",\n' +
'  "\':\'",\n' +
'  "\':)\'",\n' +
'  "\'::\'",\n' +
'  "\':=\'",\n' +
'  "\';\'",\n' +
'  "\'<\'",\n' +
'  "\'<!--\'",\n' +
'  "\'</\'",\n' +
'  "\'<<\'",\n' +
'  "\'<=\'",\n' +
'  "\'<?\'",\n' +
'  "\'=\'",\n' +
'  "\'>\'",\n' +
'  "\'>=\'",\n' +
'  "\'>>\'",\n' +
'  "\'?\'",\n' +
'  "\'?>\'",\n' +
'  "\'@\'",\n' +
'  "\'NaN\'",\n' +
'  "\'[\'",\n' +
'  "\']\'",\n' +
'  "\'after\'",\n' +
'  "\'all\'",\n' +
'  "\'allowing\'",\n' +
'  "\'ancestor\'",\n' +
'  "\'ancestor-or-self\'",\n' +
'  "\'and\'",\n' +
'  "\'any\'",\n' +
'  "\'append\'",\n' +
'  "\'array\'",\n' +
'  "\'as\'",\n' +
'  "\'ascending\'",\n' +
'  "\'at\'",\n' +
'  "\'attribute\'",\n' +
'  "\'base-uri\'",\n' +
'  "\'before\'",\n' +
'  "\'boundary-space\'",\n' +
'  "\'break\'",\n' +
'  "\'by\'",\n' +
'  "\'case\'",\n' +
'  "\'cast\'",\n' +
'  "\'castable\'",\n' +
'  "\'catch\'",\n' +
'  "\'check\'",\n' +
'  "\'child\'",\n' +
'  "\'collation\'",\n' +
'  "\'collection\'",\n' +
'  "\'comment\'",\n' +
'  "\'constraint\'",\n' +
'  "\'construction\'",\n' +
'  "\'contains\'",\n' +
'  "\'content\'",\n' +
'  "\'context\'",\n' +
'  "\'continue\'",\n' +
'  "\'copy\'",\n' +
'  "\'copy-namespaces\'",\n' +
'  "\'count\'",\n' +
'  "\'decimal-format\'",\n' +
'  "\'decimal-separator\'",\n' +
'  "\'declare\'",\n' +
'  "\'default\'",\n' +
'  "\'delete\'",\n' +
'  "\'descendant\'",\n' +
'  "\'descendant-or-self\'",\n' +
'  "\'descending\'",\n' +
'  "\'diacritics\'",\n' +
'  "\'different\'",\n' +
'  "\'digit\'",\n' +
'  "\'distance\'",\n' +
'  "\'div\'",\n' +
'  "\'document\'",\n' +
'  "\'document-node\'",\n' +
'  "\'element\'",\n' +
'  "\'else\'",\n' +
'  "\'empty\'",\n' +
'  "\'empty-sequence\'",\n' +
'  "\'encoding\'",\n' +
'  "\'end\'",\n' +
'  "\'entire\'",\n' +
'  "\'eq\'",\n' +
'  "\'every\'",\n' +
'  "\'exactly\'",\n' +
'  "\'except\'",\n' +
'  "\'exit\'",\n' +
'  "\'external\'",\n' +
'  "\'first\'",\n' +
'  "\'following\'",\n' +
'  "\'following-sibling\'",\n' +
'  "\'for\'",\n' +
'  "\'foreach\'",\n' +
'  "\'foreign\'",\n' +
'  "\'from\'",\n' +
'  "\'ft-option\'",\n' +
'  "\'ftand\'",\n' +
'  "\'ftnot\'",\n' +
'  "\'ftor\'",\n' +
'  "\'function\'",\n' +
'  "\'ge\'",\n' +
'  "\'greatest\'",\n' +
'  "\'group\'",\n' +
'  "\'grouping-separator\'",\n' +
'  "\'gt\'",\n' +
'  "\'idiv\'",\n' +
'  "\'if\'",\n' +
'  "\'import\'",\n' +
'  "\'in\'",\n' +
'  "\'index\'",\n' +
'  "\'infinity\'",\n' +
'  "\'inherit\'",\n' +
'  "\'insensitive\'",\n' +
'  "\'insert\'",\n' +
'  "\'instance\'",\n' +
'  "\'integrity\'",\n' +
'  "\'intersect\'",\n' +
'  "\'into\'",\n' +
'  "\'is\'",\n' +
'  "\'item\'",\n' +
'  "\'json\'",\n' +
'  "\'json-item\'",\n' +
'  "\'key\'",\n' +
'  "\'language\'",\n' +
'  "\'last\'",\n' +
'  "\'lax\'",\n' +
'  "\'le\'",\n' +
'  "\'least\'",\n' +
'  "\'let\'",\n' +
'  "\'levels\'",\n' +
'  "\'loop\'",\n' +
'  "\'lowercase\'",\n' +
'  "\'lt\'",\n' +
'  "\'minus-sign\'",\n' +
'  "\'mod\'",\n' +
'  "\'modify\'",\n' +
'  "\'module\'",\n' +
'  "\'most\'",\n' +
'  "\'namespace\'",\n' +
'  "\'namespace-node\'",\n' +
'  "\'ne\'",\n' +
'  "\'next\'",\n' +
'  "\'no\'",\n' +
'  "\'no-inherit\'",\n' +
'  "\'no-preserve\'",\n' +
'  "\'node\'",\n' +
'  "\'nodes\'",\n' +
'  "\'not\'",\n' +
'  "\'object\'",\n' +
'  "\'occurs\'",\n' +
'  "\'of\'",\n' +
'  "\'on\'",\n' +
'  "\'only\'",\n' +
'  "\'option\'",\n' +
'  "\'or\'",\n' +
'  "\'order\'",\n' +
'  "\'ordered\'",\n' +
'  "\'ordering\'",\n' +
'  "\'paragraph\'",\n' +
'  "\'paragraphs\'",\n' +
'  "\'parent\'",\n' +
'  "\'pattern-separator\'",\n' +
'  "\'per-mille\'",\n' +
'  "\'percent\'",\n' +
'  "\'phrase\'",\n' +
'  "\'position\'",\n' +
'  "\'preceding\'",\n' +
'  "\'preceding-sibling\'",\n' +
'  "\'preserve\'",\n' +
'  "\'previous\'",\n' +
'  "\'processing-instruction\'",\n' +
'  "\'relationship\'",\n' +
'  "\'rename\'",\n' +
'  "\'replace\'",\n' +
'  "\'return\'",\n' +
'  "\'returning\'",\n' +
'  "\'revalidation\'",\n' +
'  "\'same\'",\n' +
'  "\'satisfies\'",\n' +
'  "\'schema\'",\n' +
'  "\'schema-attribute\'",\n' +
'  "\'schema-element\'",\n' +
'  "\'score\'",\n' +
'  "\'self\'",\n' +
'  "\'sensitive\'",\n' +
'  "\'sentence\'",\n' +
'  "\'sentences\'",\n' +
'  "\'skip\'",\n' +
'  "\'sliding\'",\n' +
'  "\'some\'",\n' +
'  "\'stable\'",\n' +
'  "\'start\'",\n' +
'  "\'stemming\'",\n' +
'  "\'stop\'",\n' +
'  "\'strict\'",\n' +
'  "\'strip\'",\n' +
'  "\'structured-item\'",\n' +
'  "\'switch\'",\n' +
'  "\'text\'",\n' +
'  "\'then\'",\n' +
'  "\'thesaurus\'",\n' +
'  "\'times\'",\n' +
'  "\'to\'",\n' +
'  "\'treat\'",\n' +
'  "\'try\'",\n' +
'  "\'tumbling\'",\n' +
'  "\'type\'",\n' +
'  "\'typeswitch\'",\n' +
'  "\'union\'",\n' +
'  "\'unique\'",\n' +
'  "\'unordered\'",\n' +
'  "\'updating\'",\n' +
'  "\'uppercase\'",\n' +
'  "\'using\'",\n' +
'  "\'validate\'",\n' +
'  "\'value\'",\n' +
'  "\'variable\'",\n' +
'  "\'version\'",\n' +
'  "\'weight\'",\n' +
'  "\'when\'",\n' +
'  "\'where\'",\n' +
'  "\'while\'",\n' +
'  "\'wildcards\'",\n' +
'  "\'window\'",\n' +
'  "\'with\'",\n' +
'  "\'without\'",\n' +
'  "\'word\'",\n' +
'  "\'words\'",\n' +
'  "\'xquery\'",\n' +
'  "\'zero-digit\'",\n' +
'  "\'{\'",\n' +
'  "\'{{\'",\n' +
'  "\'{|\'",\n' +
'  "\'|\'",\n' +
'  "\'||\'",\n' +
'  "\'|}\'",\n' +
'  "\'}\'",\n' +
'  "\'}}\'"\n' +
'];\n' +
'\n' +
'                                                            // line 1176 "XQueryParser.ebnf"\n' +
'                                                            });\n' +
'                                                            // line 33297 "XQueryParser.js"\n' +
'// End\n' +
';\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/JSONParseTreeHandler.js\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'\n' +
'  var JSONParseTreeHandler = exports.JSONParseTreeHandler = function(code) {\n' +
'\n' +
'    //List of nodes that are not targeted by the parse tree size optimization.\n' +
'    var list = [\n' +
'        "OrExpr", "AndExpr", "ComparisonExpr", "StringConcatExpr", "RangeExpr"\n' +
'        //, "AdditiveExpr", "MultiplicativeExpr"\n' +
'        , "UnionExpr", "IntersectExceptExpr", "InstanceofExpr", "TreatExpr", "CastableExpr"\n' +
'        , "CastExpr", "UnaryExpr", "ValueExpr", "FTContainsExpr", "SimpleMapExpr", "PathExpr", "RelativePathExpr"\n' +
'        , "PostfixExpr", "StepExpr"\n' +
'    ];\n' +
'    \n' +
'    var ast = null;\n' +
'    var ptr = null;\n' +
'    var remains = code;\n' +
'    var cursor = 0;\n' +
'    var lineCursor = 0;\n' +
'    var line = 0;\n' +
'    var col = 0;\n' +
'\n' +
'    function createNode(name){\n' +
'      return { name: name, children: [], getParent: null, pos: { sl: 0, sc: 0, el: 0, ec: 0 } };\n' +
'    }\n' +
'  \n' +
'    function pushNode(name, begin){\n' +
'      var node = createNode(name);\n' +
'      if(ast === null) {\n' +
'        ast = node;\n' +
'        ptr = node;\n' +
'      } else {\n' +
'        node.getParent = ptr;\n' +
'        ptr.children.push(node);\n' +
'        ptr = ptr.children[ptr.children.length - 1];\n' +
'      }\n' +
'    }\n' +
'    \n' +
'    function popNode(){\n' +
'     \n' +
'      if(ptr.children.length > 0) {\n' +
'        var s = ptr.children[0];\n' +
'        var e = null;\n' +
'        //We want to skip empty non terminals. For instance PredicateList:\n' +
'        // [108] AxisStep ::= (ReverseStep | ForwardStep) PredicateList\n' +
'        // [120] PredicateList ::= Predicate*\n' +
'        for(var i= ptr.children.length - 1; i >= 0;i--) {\n' +
'          e = ptr.children[i];\n' +
'          if(e.pos.el !== 0 || e.pos.ec !== 0) {\n' +
'            break;\n' +
'          }\n' +
'        }\n' +
'        ptr.pos.sl = s.pos.sl;\n' +
'        ptr.pos.sc = s.pos.sc;\n' +
'        ptr.pos.el = e.pos.el;\n' +
'        ptr.pos.ec = e.pos.ec;\n' +
'      }\n' +
'      \n' +
'      //Normalize EQName && FunctionName\n' +
'      if(ptr.name === "FunctionName") {\n' +
'        ptr.name = "EQName";  \n' +
'      }\n' +
'      if(ptr.name === "EQName" && ptr.value === undefined) {\n' +
'        ptr.value = ptr.children[0].value;\n' +
'        ptr.children.pop();\n' +
'      }\n' +
'      \n' +
'      if(ptr.getParent !== null) {\n' +
'        ptr = ptr.getParent;\n' +
'        //for(var i in ptr.children) {\n' +
'          //delete ptr.children[i].getParent;\n' +
'        //}\n' +
'      } else {\n' +
'        //delete ptr.getParent;\n' +
'      }\n' +
'\n' +
'      //Parse tree size optimization\n' +
'      if(ptr.children.length > 0) {\n' +
'        var lastChild = ptr.children[ptr.children.length - 1];\n' +
'        if(lastChild.children.length === 1 && list.indexOf(lastChild.name) !== -1) {\n' +
'          ptr.children[ptr.children.length - 1] = lastChild.children[0];\n' +
'        }\n' +
'      }\n' +
'    }\n' +
'    \n' +
'    this.closeParseTree = function() {\n' +
'      while(ptr.getParent !== null) {\n' +
'        popNode();\n' +
'      }\n' +
'      popNode();\n' +
'    };\n' +
'\n' +
'    this.peek = function() {\n' +
'      return ptr;    \n' +
'    };\n' +
'    \n' +
'    this.getParseTree = function() {\n' +
'      return ast;\n' +
'    };\n' +
' \n' +
'    this.reset = function(input) {};\n' +
'\n' +
'    this.startNonterminal = function(name, begin) {\n' +
'      pushNode(name, begin);\n' +
'    };\n' +
'\n' +
'    this.endNonterminal = function(name, end) {\n' +
'      popNode();\n' +
'    };\n' +
'\n' +
'    this.terminal = function(name, begin, end) {\n' +
'      name = (name.substring(0, 1) === "\'" && name.substring(name.length - 1) === "\'") ? "TOKEN" : name;\n' +
'      pushNode(name, begin); \n' +
'      setValue(ptr, begin, end);\n' +
'      popNode();\n' +
'    };\n' +
'\n' +
'    this.whitespace = function(begin, end) {\n' +
'      var name = "WS";\n' +
'      pushNode(name, begin);\n' +
'      setValue(ptr, begin, end);\n' +
'      popNode();\n' +
'    };\n' +
'\n' +
'    function setValue(node, begin, end) {\n' +
'      \n' +
'      var e = end - cursor;\n' +
'      ptr.value = remains.substring(0, e); \n' +
'      remains = remains.substring(e);\n' +
'      cursor = end;\n' +
'      \n' +
'      var sl = line;\n' +
'      var sc = lineCursor;\n' +
'      var el = sl + ptr.value.split("\\n").length - 1;\n' +
'      var lastIdx = ptr.value.lastIndexOf("\\n");\n' +
'      var ec = lastIdx === -1 ? sc + ptr.value.length : ptr.value.substring(lastIdx + 1).length;\n' +
'//      ec = ec === 0 ? 0 : ec - 1;\n' +
'      \n' +
'      line = el;\n' +
'      //lineCursor = ec === 0 ? 0 : ec;\n' +
'      lineCursor = ec;\n' +
'\n' +
'      ptr.pos.sl = sl; \n' +
'      ptr.pos.sc = sc; \n' +
'      ptr.pos.el = el; \n' +
'      ptr.pos.ec = ec; \n' +
'    } \n' +
'  };\n' +
'});\n' +
'\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/Errors\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'    \n' +
'   \n' +
'var ERROR = "error";\n' +
'var WARNING = "warning";\n' +
'var LANG = "xquery";\n' +
'    \n' +
'exports.Errors = {\n' +
'    \n' +
'    warning: function(pos, msg) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: WARNING,\n' +
'        level: WARNING,\n' +
'        message: msg\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    unusedVar: function(pos, name) {\n' +
'      var msg = \'$\' + name + \': unused variable.\';\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: WARNING,\n' +
'        level: WARNING,\n' +
'        message: msg,\n' +
'        hasResolution: true\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    countOnGroupingVar: function(pos, name) {\n' +
'      var msg = "Count on grouping variable ($" + name + ") always returns 1. Use count clause instead.";\n' +
'      return {\n' +
'        pos: pos,\n' +
'        type: WARNING,\n' +
'        level: WARNING,\n' +
'        message: msg\n' +
'      };\n' +
'    },\n' +
'\n' +
'    XPST0008: function(pos, varname) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        message: \'[XPST0008] "\' + varname + \'": undeclared variable.\'\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    XQST0033: function(pos, prefix, ns) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        message: \'[XQST0033] "\' + prefix + \'": namespace prefix already bound to "\' + ns + \'".\'\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    XPST0081: function(pos, prefix, localName) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        prefix: prefix,\n' +
'        localName: localName,\n' +
'        message: \'[XPST0081] "\' + prefix + \'": can not expand namespace prefix to URI.\'\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    XQST0039: function(pos, varname) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        message: \'[XQST0039] "\' + varname + \'": duplicate parameter name.\'\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    XQST0049: function(pos, varname) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        message: \'[XQST0049] "\' + varname + \'": duplicate variable declaration.\'\n' +
'      };\n' +
'    },\n' +
'\n' +
'    XQST0034: function(pos, functionName) {\n' +
'      return {\n' +
'        pos: pos,\n' +
'        lang: LANG,\n' +
'        type: ERROR,\n' +
'        level: ERROR,\n' +
'        message: \'[XQST0034] "\' + functionName + \'": duplicate function declaration.\'\n' +
'      };\n' +
'    }\n' +
'  };\n' +
'});\n' +
'\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/StaticContext\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'  var StaticContext = exports.StaticContext = function(pos, parent){\n' +
'    \n' +
'    this.pos = pos;\n' +
'\n' +
'    this.parent = parent;\n' +
'    \n' +
'    this.children = [];\n' +
'    \n' +
'    this.varDecls = {};\n' +
'    this.varRefs = {};\n' +
'    \n' +
'    this.getVarRefs = function(name) {\n' +
'      if(this.varDecls[name] !== undefined) {\n' +
'        return this.varRefs[name];\n' +
'      } else if(this.parent !== undefined) {\n' +
'        return this.parent.getVarRefs(name); \n' +
'      } else {\n' +
'        return null;\n' +
'      }\n' +
'    };\n' +
'\n' +
'    this.getVarDecl = function(name) {\n' +
'      if(this.varDecls[name] !== undefined) {\n' +
'        return this.varDecls[name];\n' +
'      } else if(this.parent !== undefined) {\n' +
'        return this.parent.getVarDecl(name); \n' +
'      } else {\n' +
'        return null;\n' +
'      }\n' +
'    };\n' +
'\n' +
'    this.getVarDecls = function(parent) {\n' +
'      if(this.parent === undefined) {\n' +
'        return this.varDecls;\n' +
'      } else {\n' +
'        var varDecls = this.parent.getVarDecls(true);\n' +
'        for(var i in this.varDecls) {\n' +
'          //if(parent === true || FLWORDecls.indexOf(this.varDecls[i].kind) === -1)\n' +
'            varDecls[i] = this.varDecls[i]; \n' +
'        }\n' +
'        return varDecls;\n' +
'      }\n' +
'    };\n' +
'  };\n' +
'});\n' +
'\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/Translator.js\',[\'require\',\'exports\',\'module\',\'./Errors\',\'./StaticContext\'],function(require, exports, module){\n' +
'  \n' +
'  var Errors = require("./Errors").Errors;\n' +
'  var StaticContext = require("./StaticContext").StaticContext;\n' +
'  \n' +
'  var Translator = exports.Translator = function(ast){\n' +
'    \n' +
'    var markers = [];\n' +
'    var outline = [];\n' +
'    \n' +
'    var isMainModule = true;\n' +
'    \n' +
'    var defaultFnNs = "http://www.w3.org/2005/xpath-functions";\n' +
'    \n' +
'    var namespaces = {\n' +
'      "local": "http://www.w3.org/2005/xquery-local-functions",\n' +
'      "xs": "http://www.w3.org/2001/XMLSchema",\n' +
'      "fn": "http://www.w3.org/2005/xpath-functions",\n' +
'      "jn": "http://www.jsoniq.org/functions",\n' +
'      "an": "http://www.zorba-xquery.com/annotations",\n' +
'      "db": "http://www.zorba-xquery.com/modules/store/static/collections/dml",\n' +
'      "idx": "http://www.zorba-xquery.com/modules/store/static/indexes/dml",\n' +
'      "zerr": "http://www.zorba-xquery.com/errors",\n' +
'      "err": "http://www.w3.org/2005/xqt-error"\n' +
'    };\n' +
'    \n' +
'    var declaredNS = {\n' +
'      "jn": { ns: "http://www.jsoniq.org/functions", pos: { sl: 0, sc: 0, el: 0, ec: 0 }, type: "module", auto: true },\n' +
'      "fn": { ns: "http://www.w3.org/2005/xpath-functions", pos: { sl: 0, sc: 0, el: 0, ec: 0 }, type: "module", auto: true }\n' +
'    };\n' +
'    \n' +
'    var referencedPrefixes = {};\n' +
'   \n' +
'    var declaredFunctions = {};\n' +
'    var functionReferences = {};\n' +
'\n' +
'    var rootSctx = new StaticContext(ast.pos);\n' +
'    var sctx = rootSctx;\n' +
'    \n' +
'    function pushSctx(pos) {\n' +
'      sctx.children.push(new StaticContext(pos, sctx));\n' +
'      sctx = sctx.children[sctx.children.length - 1];\n' +
'    }\n' +
'    \n' +
'    function popSctx(pos) {\n' +
'     \n' +
'      if(pos !== undefined) {\n' +
'        sctx.pos.el = pos.el;\n' +
'        sctx.pos.ec = pos.ec;\n' +
'      }\n' +
'\n' +
'      var varDecls = sctx.varDecls;\n' +
'      var varRefs  = sctx.varRefs;\n' +
'      \n' +
'      for(var i in varDecls) {\n' +
'        var varDecl = varDecls[i];\n' +
'        var varRef  = varRefs[i];\n' +
'        //We don\'t throw unused variable warnings for public VarDecl\n' +
'        if(varRef === undefined && varDecl.kind !== "VarDecl") {\n' +
'          markers.push(Errors.unusedVar(varDecl.pos, i));\n' +
'        }\n' +
'      }\n' +
'      \n' +
'      for(var i in varRefs) {\n' +
'        var varDecl = varDecls[i];\n' +
'        var varRef  = varRefs[i];\n' +
'        if(varDecl === undefined){\n' +
'          if(sctx.parent.parent === undefined) {\n' +
'            for(var j = 0; j < varRef.length; j++) {\n' +
'              var v = varRef[j];\n' +
'              markers.push(Errors.XPST0008(v.pos, i));\n' +
'            }\n' +
'          } else {\n' +
'            if(sctx.parent.varRefs[i] === undefined) {\n' +
'              sctx.parent.varRefs[i] = [];\n' +
'            }\n' +
'            sctx.parent.varRefs[i] = sctx.parent.varRefs[i].concat(varRef);\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'      \n' +
'      sctx = sctx.parent;\n' +
'    }\n' +
'    \n' +
'    function resolvesEQName(value) {\n' +
'      if(value.substring(0, 2) === "Q{") {\n' +
'          \n' +
'      } else {\n' +
'        return value;\n' +
'      }\n' +
'    }\n' +
'\n' +
'    this.XQuery = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      this.visitChildren(node);\n' +
'      popSctx(node.pos);\n' +
'      \n' +
'      //Check for duplicates in namespaces declarations and unused namespace declarations\n' +
'      var dNS = {};\n' +
'      for(var prefix in declaredNS) {\n' +
'        var ns = declaredNS[prefix].ns;\n' +
'        var pos = declaredNS[prefix].pos;\n' +
'        var type = declaredNS[prefix].type;\n' +
'        if(referencedPrefixes[prefix] === undefined && declaredNS[prefix].auto === undefined) {\n' +
'          var msg = \'"\' + prefix + \'": unused namespace prefix.\';\n' +
'          var err = Errors.warning(pos,msg);\n' +
'          err.prefix = prefix;\n' +
'          err.ns = ns;\n' +
'          err.nsType = type;\n' +
'          markers.push(err);\n' +
'        }\n' +
'        if(dNS[ns] === undefined) {\n' +
'          dNS[ns] = {prefix: prefix, positions: [pos]};\n' +
'        } else if(type !== "schema"){\n' +
'          dNS[ns].positions.push(pos);\n' +
'        }\n' +
'      }\n' +
'      for(var ns in dNS) {\n' +
'        var prefix = dNS[ns].prefix;\n' +
'        var positions = dNS[ns].positions;\n' +
'        if(positions.length > 1) {\n' +
'          for(var i = 1; i < positions.length; i++) {\n' +
'            var msg = \'"\' + ns + \'": is already available with the prefix "\' + prefix + \'".\';\n' +
'            markers.push(Errors.warning(positions[i], msg));\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.ModuleDecl = function(node) {\n' +
'      isMainModule = false;\n' +
'     \n' +
'      var Handler = function() {\n' +
'        var prefix = "";\n' +
'        var ns = "";\n' +
'        \n' +
'        this.NCName = function(ncname) {\n' +
'          prefix = getNodeValue(ncname);\n' +
'        };\n' +
'        \n' +
'        this.URILiteral = function(uri) {\n' +
'          ns = getNodeValue(uri);\n' +
'          ns = ns.substring(1, ns.length - 1);\n' +
'          namespaces[prefix] = ns;\n' +
'        };\n' +
'      };\n' +
'      \n' +
'      this.visitChildren(node, new Handler());\n' +
'      \n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.ModuleImport = function(node) {\n' +
'     \n' +
'      var handler = new function() {\n' +
'        var prefix = "";\n' +
'        var moduleURI = null;\n' +
'        //var locationHints = [];\n' +
'        \n' +
'        this.NCName = function(ncname) {\n' +
'          prefix = getNodeValue(ncname);\n' +
'        };\n' +
'        \n' +
'        this.URILiteral = function(uri) {\n' +
'          uri = getNodeValue(uri);\n' +
'          uri = uri.substring(1, uri.length - 1);\n' +
'          if(moduleURI === null) {\n' +
'            moduleURI = uri;\n' +
'            if (declaredNS[prefix] === undefined) {\n' +
'              declaredNS[prefix] = { ns: moduleURI, pos: node.pos, type: "module" };\n' +
'              namespaces[prefix] = moduleURI;\n' +
'            } else {\n' +
'              markers.push(Errors.XQST0033(node.pos, prefix, moduleURI));\n' +
'            }\n' +
'          } else {\n' +
'            //locationHints.push(uri);\n' +
'          }\n' +
'        };\n' +
'      };\n' +
'      \n' +
'      this.visitChildren(node, handler);\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.SchemaImport = function(node) {\n' +
'      var that = this;\n' +
'      \n' +
'      var handler = new function() {\n' +
'        var prefix = "";\n' +
'        var schemaURI = null;\n' +
'        //var locationHints = [];\n' +
'        \n' +
'        this.SchemaPrefix = function(schemaPrefix) {\n' +
'          var Handler = function() {\n' +
'            this.NCName = function(ncname) {\n' +
'              prefix = getNodeValue(ncname);\n' +
'            }\n' +
'          };\n' +
'          that.visitChildren(schemaPrefix, new Handler());\n' +
'        };\n' +
'        \n' +
'        this.URILiteral = function(uri) {\n' +
'          uri = getNodeValue(uri);\n' +
'          uri = uri.substring(1, uri.length - 1);\n' +
'          if(schemaURI === null) {\n' +
'            schemaURI = uri;\n' +
'            if (declaredNS[prefix] === undefined) {\n' +
'              declaredNS[prefix] = { ns: schemaURI, pos: node.pos, type: "schema" };\n' +
'            } else {\n' +
'              markers.push(Errors.XQST0033(node.pos, prefix, schemaURI));\n' +
'            }\n' +
'          } else {\n' +
'            //locationHints.push(uri);\n' +
'          }\n' +
'        };\n' +
'      };\n' +
'      \n' +
'      this.visitChildren(node, handler);\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.NamespaceDecl = function(node) {\n' +
'     \n' +
'      var handler = new function() {\n' +
'        var prefix = "";\n' +
'        var moduleURI = "";\n' +
'        \n' +
'        this.NCName = function(ncname) {\n' +
'          prefix = getNodeValue(ncname);\n' +
'        };\n' +
'        \n' +
'        this.URILiteral = function(uri) {\n' +
'          moduleURI = getNodeValue(uri);\n' +
'          moduleURI = moduleURI.substring(1, moduleURI.length - 1);\n' +
'          if (declaredNS[prefix] === undefined) {\n' +
'            declaredNS[prefix] = { ns: moduleURI, pos: node.pos, type: "decl" };\n' +
'          } else {\n' +
'             markers.push(Errors.XQST0033(node.pos, prefix, moduleURI));\n' +
'          }\n' +
'        };\n' +
'      };\n' +
'      \n' +
'      this.visitChildren(node, handler);\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.DefaultNamespaceDecl = function(node) {      \n' +
'      var Handler = function() {\n' +
'        var fn = false;\n' +
'        var ns = "";\n' +
'        \n' +
'        this.TOKEN = function(token) {\n' +
'          fn = fn ? true : (token.value === "function");\n' +
'        };\n' +
'        \n' +
'        this.URILiteral = function(uri) {\n' +
'          ns = getNodeValue(uri);\n' +
'          ns = ns.substring(1, ns.length - 1);\n' +
'          if(fn) {\n' +
'            defaultFnNs = ns;\n' +
'          }\n' +
'        };\n' +
'      };\n' +
'      \n' +
'      this.visitChildren(node, new Handler());\n' +
'      \n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    //this.AnnotatedDecl = function(node) {\n' +
'        \n' +
'    //};\n' +
'    \n' +
'    var fnParams = [];\n' +
'    var isExternal = false;\n' +
'    this.FunctionDecl = function(node) {\n' +
'      isExternal = node.children[node.children.length - 1].value &&\n' +
'                   node.children[node.children.length - 1].value === "external";\n' +
'      fnParams = [];\n' +
'      var eQName = "";\n' +
'      var name = "";\n' +
'      var displayPos = null;\n' +
'      pushSctx(node.pos);\n' +
'      var Handler = function(){\n' +
'        this.EQName = function(node) {\n' +
'          eQName = getNodeValue(node);\n' +
'          name = eQName + "(";\n' +
'          displayPos = node.pos;\n' +
'        };\n' +
'      };\n' +
'      this.visitChildren(node, new Handler());\n' +
'      popSctx();\n' +
'     \n' +
'      var arity = fnParams.length;\n' +
'      node.arity = "" + arity;\n' +
'      if(declaredFunctions[eQName] && declaredFunctions[eQName][arity] !== undefined) {\n' +
'        markers.push(Errors.XQST0034(displayPos, eQName)); \n' +
'      } else {\n' +
'        name +=  fnParams.join(", ") +")";\n' +
'        outline.push({\n' +
'          displayPos: displayPos,\n' +
'          icon: "method",\n' +
'          name: name,\n' +
'          pos: node.pos,\n' +
'          items: []\n' +
'        });\n' +
'        if(declaredFunctions[eQName] === undefined) {\n' +
'          declaredFunctions[eQName] = {};\n' +
'        }\n' +
'        declaredFunctions[eQName][arity] = displayPos;\n' +
'      }\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    var statementCount = [];\n' +
'    this.StatementsAndOptionalExpr = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      statementCount.push(0);\n' +
'      this.visitChildren(node);\n' +
'      for(var i = 1; i <= statementCount[statementCount.length - 1]; i++) {\n' +
'        popSctx(node.pos);\n' +
'      }\n' +
'      statementCount.pop();\n' +
'      popSctx();\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.StatementsAndExpr = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      statementCount.push(0);\n' +
'      this.visitChildren(node);\n' +
'      for(var i = 1; i <= statementCount[statementCount.length - 1]; i++) {\n' +
'        popSctx(node.pos);\n' +
'      }\n' +
'      statementCount.pop();\n' +
'      popSctx();\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.BlockStatement = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      statementCount.push(0);\n' +
'      this.visitChildren(node);\n' +
'      for(var i = 1; i <= statementCount[statementCount.length - 1]; i++) {\n' +
'        popSctx(node.pos);\n' +
'      }\n' +
'      statementCount.pop();\n' +
'      popSctx();\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.visitExprSingles = function(node) {\n' +
'      for(var i=0; i < node.children.length; i++) {\n' +
'        var child = node.children[i];\n' +
'        if(child.name === "ExprSingle" || child.name === "VarValue" || child.name === "VarDefaultValue") {\n' +
'          this.visit(child);\n' +
'        }\n' +
'      }\n' +
'    };\n' +
'    \n' +
'    var VarDeclHandler = function(node) {\n' +
'        \n' +
'        this.ExprSingle = this.VarValue = this.VarDefaultValue = function(exprSingle) {\n' +
'          return true;\n' +
'        };\n' +
'        \n' +
'        this.VarName = this.EQName = function(varName) {\n' +
'          var value = getNodeValue(varName);\n' +
'          if(value.substring(0, 2) !== "Q{") {\n' +
'            if(sctx.varDecls[value] === undefined) {\n' +
'              sctx.varDecls[value] = { pos: varName.pos, kind: node.name };\n' +
'            } else if(node.name == "Param"){\n' +
'              markers.push(Errors.XQST0039(node.pos, value));\n' +
'            } else {\n' +
'              markers.push(Errors.XQST0049(node.pos, value));\n' +
'            }\n' +
'            //var prefix = value.substring(0, value.indexOf(":"));\n' +
'            //var name = value.substring(value.indexOf(":") + 1);\n' +
'            //sctx.varRefs[value] = true; //({ prefix: prefix, name: name });\n' +
'          }\n' +
'        };\n' +
'    };\n' +
'    \n' +
'    this.Param = function(node) {\n' +
'      fnParams.push("$" + getNodeValue(node.children[1]));\n' +
'      //We don\'t process external functions\n' +
'      if(!isExternal)\n' +
'        this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;  \n' +
'    };\n' +
'\n' +
'    \n' +
'    this.QuantifiedExpr = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      this.visitExprSingles(node);\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      popSctx();\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    var clauseCount = [];\n' +
'    this.FLWORExpr = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      \n' +
'      clauseCount.push(0);\n' +
'      this.visitChildren(node);\n' +
'      for(var i = 1; i <= clauseCount[clauseCount.length - 1]; i++) {\n' +
'        popSctx(node.pos);\n' +
'      }\n' +
'      clauseCount.pop();\n' +
'      \n' +
'      popSctx();\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    //this.Statements = function(node) {\n' +
'      //pushSctx();\n' +
'      //this.visitChildren(node);\n' +
'      //popSctx();\n' +
'    //};\n' +
'    \n' +
'    //this.Statement = function(node) {\n' +
'    //  this.visitChildren(node);\n' +
'    //  return true;\n' +
'    //};\n' +
'    \n' +
'    this.VarDeclStatement = function(node){\n' +
'      this.visitExprSingles(node);\n' +
'      pushSctx(node.pos);\n' +
'      statementCount[statementCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'\n' +
'    this.LetBinding = function(node){\n' +
'      this.visitExprSingles(node);\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'\n' +
'    this.ForBinding = function(node) {\n' +
'      this.visitExprSingles(node);\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.TumblingWindowClause = function(node) {\n' +
'      this.visitExprSingles(node);\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.WindowVars = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    }\n' +
'    \n' +
'    //this.SlidingWindowClause = function(node) {\n' +
'    //  pushSctx(node.pos);\n' +
'    //  clauseCount[clauseCount.length - 1]++;\n' +
'    //  this.visitChildren(node, new VarDeclHandler(node));\n' +
'    //  return true;\n' +
'    //};\n' +
'\n' +
'    this.SlidingWindowClause = function(node) {\n' +
'      this.visitExprSingles(node);\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.PositionalVar = function(node) {\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.CurrentItem = function(node) {\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.PreviousItem = function(node) {\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.NextItem = function(node) {\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.CountClause = function(node) {\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    var isDecl = false;\n' +
'    this.GroupingSpec = function(node) {\n' +
'      isDecl = false;\n' +
'      pushSctx(node.pos);\n' +
'      clauseCount[clauseCount.length - 1]++;\n' +
'\n' +
'      for(var i = 0; i < node.children.length; i++) {\n' +
'        var child = node.children[i];\n' +
'        if(child.value === ":=") {\n' +
'          isDecl = true;\n' +
'        }\n' +
'      }\n' +
'      \n' +
'      return false;\n' +
'    };\n' +
'    \n' +
'    this.GroupingVariable = function(node) {\n' +
'      if(isDecl) {\n' +
'        this.visitChildren(node, new VarDeclHandler(node));\n' +
'      } else {\n' +
'        if(node.children.length === 2) {\n' +
'          var name = getNodeValue(node.children[1]);\n' +
'          var decl = sctx.getVarDecl(name);\n' +
'          if(decl) { \n' +
'            decl.kind = "GroupingVariable";\n' +
'          }\n' +
'        }\n' +
'        this.VarRef(node);\n' +
'      }\n' +
'      return false;\n' +
'    };\n' +
'\n' +
'    var name = "";\n' +
'    var displayPos = null;\n' +
'    this.VarDecl = function(node) {\n' +
'      var Handler = function(){\n' +
'        this.VarName = function(node) {\n' +
'          name = getNodeValue(node);\n' +
'          displayPos = node.pos;\n' +
'        };\n' +
'      };\n' +
'      pushSctx(node.pos);\n' +
'      this.visitExprSingles(node);\n' +
'      popSctx();\n' +
'      this.visitChildren(node, new Handler(node));\n' +
'      this.visitChildren(node, new VarDeclHandler(node));\n' +
'      outline.push({\n' +
'        displayPos: displayPos,\n' +
'        icon: "property",\n' +
'        name:  "$" + name,\n' +
'        pos: node.pos,\n' +
'        items: []\n' +
'      });\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    var fnCall = false;\n' +
'    var fnName = "";\n' +
'    var arity = 0;\n' +
'    this.FunctionCall = function(node) {\n' +
'      fnCall = true;\n' +
'      arity = 0;\n' +
'      fnName = "";\n' +
'      this.visitChildren(node);\n' +
'      fnCall = false;\n' +
'\n' +
'      //For fn:count($grouping-var), we throw a warning\n' +
'      if(node.children.length === 2 && node.children[0].value === "count" && defaultFnNs === "http://www.w3.org/2005/xpath-functions") {\n' +
'        var params = getNodeValue(node.children[1]);\n' +
'        if(params.substring(0, 2) === "($") {\n' +
'          var varName = params.substring(2, params.length - 1);\n' +
'          var decl = sctx.getVarDecl(varName);\n' +
'          if(decl && decl.kind === "GroupingVariable") {\n' +
'            var warning = Errors.countOnGroupingVar(node.pos, varName);\n' +
'            markers.push(warning);\n' +
'          }\n' +
'        }\n' +
'      }\n' +
'\n' +
'      if(functionReferences[fnName] === undefined) {\n' +
'        functionReferences[fnName] = {};\n' +
'      }\n' +
'      if(functionReferences[fnName][arity] === undefined) {\n' +
'        functionReferences[fnName][arity] = [];\n' +
'      }\n' +
'      functionReferences[fnName][arity].push(node.children[0].pos);\n' +
'      node.arity = arity;\n' +
'      return true;\n' +
'    };\n' +
'   \n' +
'    this.Argument = function(node) {\n' +
'      arity++;\n' +
'      return false;\n' +
'    };\n' +
'    \n' +
'    this.EQName = function(node) {\n' +
'      var value = getNodeValue(node);\n' +
'      if(fnCall) {\n' +
'        fnName = value;\n' +
'      }\n' +
'      if(value.substring(0, 2) !== "Q{" && value.indexOf(":") !== -1) {\n' +
'        var prefix = value.substring(0, value.indexOf(":"));\n' +
'        var localName = value.substring(value.indexOf(":") + 1);\n' +
'        if(declaredNS[prefix] === undefined && namespaces[prefix] === undefined) {\n' +
'          markers.push(Errors.XPST0081(node.pos, prefix, localName));\n' +
'        } else {\n' +
'          referencedPrefixes[prefix] = true;\n' +
'        }\n' +
'        //if(fnCall && declaredNS[prefix] !== undefined && declaredNS[prefix].type !== "module") {\n' +
'        //  markers.push(Errors.warning(node.pos, \'"\' + prefix + \'" is not a module prefix.\'));\n' +
'        //}\n' +
'      }   \n' +
'      return false;\n' +
'    };\n' +
'    \n' +
'    this.QName = function(node) {\n' +
'      var value = getNodeValue(node);\n' +
'      if(value.indexOf(":") !== -1) {\n' +
'        var prefix = value.substring(0, value.indexOf(":"));\n' +
'        referencedPrefixes[prefix] = true;\n' +
'      }\n' +
'      return false;  \n' +
'    };\n' +
'    \n' +
'    this.Wildcard = function(node) {\n' +
'      var value = getNodeValue(node);\n' +
'      var prefix = value.substring(0, value.indexOf(":"));\n' +
'      if(prefix != "*") {\n' +
'        referencedPrefixes[prefix] = true;\n' +
'      }\n' +
'      return true;\n' +
'    };\n' +
'    \n' +
'    this.VarRef = function(node) {\n' +
'      var value = getNodeValue(node).substring(1);\n' +
'      if(value.substring(0, 2) !== "Q{" && value.indexOf(":") === -1) {\n' +
'        //var prefix = value.substring(0, value.indexOf(":"));\n' +
'        //var name = value.substring(value.indexOf(":") + 1);\n' +
'        //console.log("VarRef: " + value);\n' +
'        if(sctx.varRefs[value] === undefined) {\n' +
'          sctx.varRefs[value] = [];\n' +
'        }\n' +
'        node.pos.sc++;\n' +
'        sctx.varRefs[value].push({ pos: node.pos }); //({ prefix: prefix, name: name });\n' +
'      }\n' +
'      this.visitChildren(node);\n' +
'      return true;\n' +
'    };\n' +
'\n' +
'    function getNodeValue(node) {\n' +
'      var value = "";\n' +
'      if(node.value === undefined) {\n' +
'        for(var i=0; i < node.children.length; i++)\n' +
'        {\n' +
'          var child = node.children[i];\n' +
'          value += getNodeValue(child);\n' +
'        }\n' +
'      } else {\n' +
'        value += node.value;\n' +
'      }\n' +
'      return value;\n' +
'    }\n' +
'    \n' +
'    this.visit = function(node) {\n' +
'      var name = node.name;\n' +
'      var skip = false;\n' +
'     \n' +
'     if(typeof this[name] === "function")\n' +
'       skip = this[name](node) === true ? true : false ;\n' +
'     \n' +
'     if(!skip) {\n' +
'       this.visitChildren(node);\n' +
'     }\n' +
'    };\n' +
'    \n' +
'    this.visitChildren = function(node, handler) {\n' +
'      for(var i = 0; i < node.children.length; i++) {\n' +
'        var child = node.children[i];\n' +
'        if(handler !== undefined && typeof handler[child.name] === "function") {\n' +
'            handler[child.name](child);\n' +
'        } else {\n' +
'          this.visit(child);\n' +
'        }\n' +
'      }\n' +
'    };\n' +
'    \n' +
'    this.translate = function() {\n' +
'      this.visit(ast);\n' +
'      ast.markers = markers;\n' +
'      ast.outline = outline;\n' +
'      ast.sctx = rootSctx;\n' +
'      ast.sctx.namespaces = namespaces;\n' +
'      ast.sctx.declaredNS = declaredNS;\n' +
'      ast.sctx.defaultFnNs = defaultFnNs;\n' +
'      ast.sctx.functionReferences = functionReferences;\n' +
'      ast.sctx.declaredFunctions = declaredFunctions;\n' +
'      return ast;\n' +
'    };\n' +
'  };\n' +
'});\n' +
'\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'lib/Compiler.js\',[\'require\',\'exports\',\'module\',\'lib/XQueryParser.js\',\'lib/JSONParseTreeHandler.js\',\'lib/utils.js\',\'lib/Translator.js\'],function(require, exports, module){\n' +
'  \n' +
'  var XQueryParser = require(\'lib/XQueryParser.js\').XQueryParser;\n' +
'  var JSONParseTreeHandler = require(\'lib/JSONParseTreeHandler.js\').JSONParseTreeHandler;\n' +
'  var Utils = require(\'lib/utils.js\').Utils;  \n' +
'  var Translator = require(\'lib/Translator.js\').Translator;\n' +
'  \n' +
'  var Compiler = exports.Compiler = function() {\n' +
'    this.compile = function(code) {\n' +
'      var h = new JSONParseTreeHandler(code);\n' +
'      var parser = new XQueryParser(code, h);\n' +
'      var ast = null;\n' +
'      var error = null;\n' +
'      try {\n' +
'        parser.parse_XQuery();\n' +
'     } catch(e) {\n' +
'        if(e instanceof parser.ParseException) {\n' +
'          h.closeParseTree();\n' +
'          var pos = Utils.convertPosition(code, e.getBegin(), e.getEnd());\n' +
'          var message = parser.getErrorMessage(e);\n' +
'          if(pos.sc === pos.ec) {\n' +
'            pos.ec++;\n' +
'          }\n' +
'          error = {\n' +
'            pos: pos,\n' +
'            type: "error",\n' +
'            level: "error",\n' +
'            rexError: true,\n' +
'            message: message\n' +
'          };\n' +
'        } else {\n' +
'          throw e;\n' +
'        }\n' +
'      }\n' +
'      ast = h.getParseTree();\n' +
'      if (this.showAST !== undefined){\n' +
'        Utils.removeParentPtr(ast);\n' +
'        console.log(JSON.stringify(ast, null, 2));\n' +
'      }\n' +
'      var translator = new Translator(ast);\n' +
'      ast = translator.translate();\n' +
'      if(error !== null) {\n' +
'        ast.markers.push(error);  \n' +
'        ast.error = true;\n' +
'      }\n' +
'      return ast;\n' +
'    }\n' +
'  }\n' +
'});\n' +
'\n' +
'/* ***** BEGIN LICENSE BLOCK *****\n' +
' * Distributed under the BSD license:\n' +
' *\n' +
' * Copyright (c) 2010, Ajax.org B.V.\n' +
' * All rights reserved.\n' +
' * \n' +
' * Redistribution and use in source and binary forms, with or without\n' +
' * modification, are permitted provided that the following conditions are met:\n' +
' *     * Redistributions of source code must retain the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer.\n' +
' *     * Redistributions in binary form must reproduce the above copyright\n' +
' *       notice, this list of conditions and the following disclaimer in the\n' +
' *       documentation and/or other materials provided with the distribution.\n' +
' *     * Neither the name of Ajax.org B.V. nor the\n' +
' *       names of its contributors may be used to endorse or promote products\n' +
' *       derived from this software without specific prior written permission.\n' +
' * \n' +
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n' +
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n' +
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n' +
' * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n' +
' * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n' +
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n' +
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n' +
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n' +
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n' +
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n' +
' *\n' +
' * ***** END LICENSE BLOCK ***** */\n' +
' \n' +
'define(\'refactoring\',[\'require\',\'exports\',\'module\'],function(require, exports, module){\n' +
'  exports.Refactoring = {\n' +
'    \n' +
'    equalPositions: function(node1, node2) {\n' +
'      return node1.pos.sl === node2.pos.sl &&\n' +
'             node1.pos.sc === node2.pos.sc &&\n' +
'             node1.pos.el === node2.pos.el &&\n' +
'             node1.pos.ec === node2.pos.ec;\n' +
'    },\n' +
'    \n' +
'    nsDecls: ["NamespaceDecl", "ModuleDecl", "SchemaPrefix", "ModuleImport"],\n' +
'    \n' +
'    findPrefixDeclaration: function (prefix, node) {\n' +
'      if(node.name === "NCName" && node.value === prefix && node.getParent && node.getParent.getParent && this.nsDecls.indexOf(node.getParent.getParent.name) !== -1) {\n' +
'        return node.pos;      \n' +
'      }\n' +
'      for(var i = 0; i < node.children.length; i++) {\n' +
'        var child = node.children[i];\n' +
'        var pos = this.findPrefixDeclaration(prefix, child);\n' +
'        if(pos !== undefined) {\n' +
'          return pos;        \n' +
'        }\n' +
'      }\n' +
'    },\n' +
'    \n' +
'    findPrefixReferences: function (prefix, node) {\n' +
'      var references = [];\n' +
'      if(["QName", "Wildcard"].indexOf(node.name) !== -1 && node.value.indexOf(":") !== -1 && node.value.substring(0, node.value.indexOf(":")) === prefix) {\n' +
'        var idx = node.value.indexOf(":");\n' +
'        var pos = node.pos;\n' +
'        references.push({ sl: pos.sl, sc: pos.sc, el: pos.el, ec: pos.sc + idx });  \n' +
'      } else if(node.name === "EQName" && node.value && node.value.substring(0, 2) !== "Q{" && node.value.indexOf(":") !== -1 && \n' +
'        node.value.substring(0, node.value.indexOf(":")) === prefix) {\n' +
'        var idx = node.value.indexOf(":");\n' +
'        var pos = node.pos;\n' +
'        references.push({ sl: pos.sl, sc: pos.sc, el: pos.el, ec: pos.sc + idx });  \n' +
'      }\n' +
'      for(var i = 0; i < node.children.length; i++) {\n' +
'        var child = node.children[i];\n' +
'        references = references.concat(this.findPrefixReferences(prefix, child));\n' +
'      }\n' +
'      return references;\n' +
'    },\n' +
'    \n' +
'    isNodePrefix: function(currentNode, cursorPos){\n' +
'      return ["EQName", "QName"].indexOf(currentNode.name) !== -1\n' +
'          && currentNode.value.indexOf(":") !== -1\n' +
'          && (currentNode.pos.sc + currentNode.value.indexOf(":") >= cursorPos.column);\n' +
'    },\n' +
'    \n' +
'    isNSDecl: function(currentNode, cursorPos){\n' +
'      return currentNode.name === "NCName" && currentNode.getParent && currentNode.getParent.getParent && this.nsDecls.indexOf(currentNode.getParent.getParent.name) !== -1;\n' +
'    },\n' +
'    \n' +
'    isFunctionDecl: function(currentNode){\n' +
'      return currentNode.name === "EQName" &&\n' +
'             currentNode.getParent && currentNode.getParent.name === "FunctionDecl";\n' +
'    },\n' +
'    \n' +
'    isFunctionCall: function(currentNode) {\n' +
'      return currentNode.name === "EQName" &&\n' +
'             currentNode.getParent &&\n' +
'             currentNode.getParent.name === "FunctionCall";\n' +
'    },\n' +
'    \n' +
'    isTagName: function(currentNode) {\n' +
'      return currentNode.name === "QName" && currentNode.getParent && currentNode.getParent.name === "DirElemConstructor";    \n' +
'    },\n' +
'    \n' +
'    isVariable: function(currentNode) {\n' +
'      var parent = currentNode.getParent;\n' +
'      if(!parent) return false;\n' +
'      if(parent.name === "VarName") return true;\n' +
'      for(var i = 0; i < parent.children.length - 1; i++) {\n' +
'        var child = parent.children[i];\n' +
'        var nextChild = parent.children[i + 1];\n' +
'        if(child.value === "$" && nextChild.name === "EQName" &&\n' +
'           this.equalPositions(nextChild, currentNode)) {\n' +
'          return true;\n' +
'        }\n' +
'      }\n' +
'      return false;\n' +
'    },\n' +
'    \n' +
'    getFunctionDeclarationsAndReferences: function(ast, name, arity) {\n' +
'      var hasDecl = ast.sctx.declaredFunctions[name] && ast.sctx.declaredFunctions[name][arity];\n' +
'      var hasReferences = ast.sctx.functionReferences[name] && ast.sctx.functionReferences[name][arity];\n' +
'      var declaration = hasDecl ? ast.sctx.declaredFunctions[name][arity] : null;\n' +
'      var references  = hasReferences ? ast.sctx.functionReferences[name][arity] : [];\n' +
'      return {\n' +
'        declaration: declaration,\n' +
'        references: references\n' +
'      };\n' +
'    },\n' +
'    \n' +
'    getTags: function(dirElemConstructor) {\n' +
'        var result = {};\n' +
'        for (var i = 0; i < dirElemConstructor.children.length; i++) {\n' +
'            var child = dirElemConstructor.children[i];\n' +
'            if (child.name === "QName") {\n' +
'                if (result.open !== undefined) {\n' +
'                    result.close = child.pos;\n' +
'                }\n' +
'                else {\n' +
'                    result.open = child.pos;\n' +
'                }\n' +
'            }\n' +
'        }\n' +
'        return result;\n' +
'    }\n' +
'  };\n' +
'});\n' +
'/**\n' +
' * XQuery linter worker.\n' +
' *\n' +
' * @copyright 2011, Ajax.org B.V.\n' +
' * @license GPLv3 <http://www.gnu.org/licenses/gpl.txt>\n' +
' */\n' +
'define(\'xquery-worker\',[\'require\',\'exports\',\'module\',\'ext/codecomplete/complete_util\',\'xquery_completion.js\',\'ext/language/base_handler\',\'lib/XQueryParser.js\',\'lib/Compiler.js\',\'lib/utils.js\',\'refactoring\'],function(require, exports, module) {\n' +
'\n' +
'    var completeUtil = require("ext/codecomplete/complete_util");\n' +
'    var xqCompletion = require(\'xquery_completion.js\');\n' +
'    var baseLanguageHandler = require(\'ext/language/base_handler\');\n' +
'    var XQueryParser = require(\'lib/XQueryParser.js\').XQueryParser;\n' +
'    //var JSONParseTreeHandler = require(\'lib/JSONParseTreeHandler.js\').JSONParseTreeHandler;\n' +
'    //var CodeFormatter = require(\'lib/visitors/CodeFormatter.js\').CodeFormatter;\n' +
'    var Compiler = require(\'lib/Compiler.js\').Compiler;\n' +
'    var Utils = require(\'lib/utils.js\').Utils;\n' +
'    // var XQueryResolver = require(\'./XQueryResolver\').XQueryResolver; // Waiting for quickfix integration\n' +
'    var Refactoring = require(\'refactoring\').Refactoring;\n' +
'    \n' +
'    var handler = module.exports = Object.create(baseLanguageHandler);\n' +
'\n' +
'    var builtin = null;\n' +
'    var schemas = null;\n' +
'    \n' +
'    var paths = [];\n' +
'    \n' +
'    handler.init = function(callback) {\n' +
'      handler.sender.on("updateFileCache", function(event) {\n' +
'        paths = event.data.split("\\n");\n' +
'      });\n' +
'      callback();  \n' +
'    };\n' +
'\n' +
'    handler.handlesLanguage = function(language) {\n' +
'        return language === \'xquery\';\n' +
'    };\n' +
'\n' +
'    handler.parse = function(code, callback) {\n' +
'        var compiler = new Compiler();\n' +
'        var ast = compiler.compile(code);\n' +
'        callback(ast);\n' +
'    };\n' +
'\n' +
'    handler.isParsingSupported = function() {\n' +
'        return true;\n' +
'    };\n' +
'\n' +
'    handler.findNode = function(ast, pos, callback) {\n' +
'        callback(Utils.findNode(ast, pos));\n' +
'    };\n' +
'\n' +
'    handler.getPos = function(node, callback) {\n' +
'        callback(node.pos);\n' +
'    };\n' +
'\n' +
'    handler.analyze = function(doc, ast, callback) {\n' +
'                \n' +
'        if(builtin === null) {\n' +
'          // TODO does this path work?\n' +
'          var text = completeUtil.fetchText(\'/static\', \'ext/xquery/lib/builtin.json\'); // TODO staticprefix is hardcoded here!\n' +
'          builtin = JSON.parse(text);  \n' +
'          if (!builtin){\n' +
'              throw "Failed to init builtin @analyze, this.staticPrefix=" + this.staticPrefix;\n' +
'          }\n' +
'        }\n' +
'        \n' +
'        callback(handler.analyzeSync(doc, ast, builtin));\n' +
'    };\n' +
'\n' +
'    handler.analyzeSync = function(doc, ast, builtin) {\n' +
'        var markers = ast.markers;\n' +
'        \n' +
'        // Generate resolutions\n' +
'        // Commented out on purpose - waiting for quickfix extension to be \n' +
'        // integrated into cloud9\n' +
'        /*\n' +
'        var resolver = new XQueryResolver(ast);\n' +
'        markers.forEach(function(curMarker){\n' +
'            curMarker.resolutions = resolver.getResolutions(curMarker, builtin);\n' +
'        });\n' +
'        */\n' +
'        \n' +
'        var error = ast.error;\n' +
'        //If syntax error, don\'t show warnings?\n' +
'        return markers;\n' +
'    };\n' +
'\n' +
'    handler.outline = function(doc, ast, callback) {\n' +
'        if (!ast) return callback();\n' +
'        callback({\n' +
'            body: ast.outline\n' +
'        });\n' +
'    };\n' +
'\n' +
'    handler.complete = function(doc, fullAst, pos, currentNode, callback) {\n' +
'\n' +
'        \n' +
'        if(builtin === null) {\n' +
'          var text = completeUtil.fetchText(this.staticPrefix, \'ext/xquery/lib/builtin.json\');\n' +
'          builtin = JSON.parse(text); \n' +
'        }\n' +
'        \n' +
'        if(schemas === null) {\n' +
'          var text = completeUtil.fetchText(this.staticPrefix, \'ext/xquery/lib/schemas.json\');\n' +
'          schemas = JSON.parse(text);  \n' +
'        }\n' +
'        \n' +
'        var line = doc.getLine(pos.row);\n' +
'        \n' +
'        if(currentNode !== undefined && currentNode.name === "URILiteral" && currentNode.getParent && currentNode.getParent.name === "SchemaImport") {\n' +
'            var p = currentNode.getParent;\n' +
'            var idx = 0;\n' +
'            for(var i=0; i < p.children.length; i++) {\n' +
'              var child = p.children[i];\n' +
'              if(child.pos.sl === currentNode.pos.sl && child.pos.sc === currentNode.pos.sc &&\n' +
'                 child.pos.el === currentNode.pos.el && child.pos.ec === currentNode.pos.ec) {\n' +
'                if(idx > 0) {\n' +
'                  callback(xqCompletion.completePath(line, pos, paths));\n' +
'                } else {\n' +
'                  callback(xqCompletion.completeSchemaURI(line, pos, schemas));\n' +
'                }\n' +
'              } else if(child.name === "URILiteral") {\n' +
'                idx++;\n' +
'              }\n' +
'            }\n' +
'        } else if (currentNode !== undefined && currentNode.name === "URILiteral" && currentNode.getParent) {\n' +
'            var p = currentNode.getParent;\n' +
'            var idx = 0;\n' +
'            for(var i=0; i < p.children.length; i++) {\n' +
'              var child = p.children[i];\n' +
'              if(child.pos.sl === currentNode.pos.sl && child.pos.sc === currentNode.pos.sc &&\n' +
'                 child.pos.el === currentNode.pos.el && child.pos.ec === currentNode.pos.ec) {\n' +
'                if(idx > 0) {\n' +
'                  callback(xqCompletion.completePath(line, pos, paths));\n' +
'                } else {\n' +
'                  callback(xqCompletion.completeURI(line, pos, builtin));\n' +
'                }\n' +
'              } else if(child.name === "URILiteral") {\n' +
'                idx++;\n' +
'              }\n' +
'            }\n' +
'        }\n' +
'        else {\n' +
'            callback(xqCompletion.completeExpr(line, pos, builtin, fullAst));\n' +
'        }\n' +
'        \n' +
'    };\n' +
'\n' +
'    /**\n' +
'     * Invoked when an automatic code formating is wanted\n' +
'     * @param doc the Document object repersenting the source\n' +
'     * @return a string value representing the new source code after formatting or null if not supported\n' +
'     */\n' +
'    handler.codeFormat = function(doc, callback) {\n' +
'//        var code = doc.getValue();\n' +
'//        var h = new JSONParseTreeHandler(code);\n' +
'//        var parser = new XQueryParser(code, h);\n' +
'//        parser.parse_XQuery();\n' +
'//        var ast = h.getParseTree();\n' +
'//        var codeFormatter = new CodeFormatter(ast);\n' +
'//        var formatted = codeFormatter.format();\n' +
'//        callback(formatted);\n' +
'    };\n' +
'\n' +
'    handler.onCursorMovedNode = function(doc, fullAst, cursorPos, currentNode, callback) {\n' +
'        if (!fullAst || !currentNode) { return callback(); }\n' +
'\n' +
'        var markers = [];\n' +
'        var enableRefactorings = [];\n' +
'        //Is it a QName prefix?\n' +
'        if (Refactoring.isNodePrefix(currentNode, cursorPos) || Refactoring.isNSDecl(currentNode, cursorPos)) {\n' +
'            enableRefactorings.push("renameVariable");\n' +
'            var value = Refactoring.isNSDecl(currentNode, cursorPos) ? currentNode.value : currentNode.value.substring(0, currentNode.value.indexOf(":"));\n' +
'            var decl = Refactoring.findPrefixDeclaration(value, fullAst);\n' +
'            var refs = Refactoring.findPrefixReferences(value, fullAst);\n' +
'            if(decl !== undefined) {\n' +
'              markers.push({\n' +
'                pos: decl,\n' +
'                type: "occurrence_main"\n' +
'              });\n' +
'            }\n' +
'            \n' +
'            for(var i = 0; i < refs.length; i++) {\n' +
'              var ref = refs[i];\n' +
'              markers.push({\n' +
'                pos: ref,\n' +
'                type: "occurrence_other"\n' +
'              });\n' +
'            }\n' +
'        }\n' +
'        //Is it a Function name?\n' +
'        else if(Refactoring.isFunctionDecl(currentNode) || Refactoring.isFunctionCall(currentNode)) {\n' +
'            enableRefactorings.push("renameVariable");\n' +
'            var declAndRefs = Refactoring.getFunctionDeclarationsAndReferences(fullAst, currentNode.value, currentNode.getParent.arity);\n' +
'            var declaration = declAndRefs.declaration;\n' +
'            var references  = declAndRefs.references;\n' +
'            if(declaration !== null) {\n' +
'              markers.push({\n' +
'                pos: declaration,\n' +
'                type: "occurrence_main"\n' +
'              });\n' +
'            }\n' +
'           for (var i=0; i < references.length; i++) {\n' +
'              var pos = references[i];\n' +
'              markers.push({\n' +
'                  pos: pos,\n' +
'                  type: "occurrence_other"\n' +
'              });\n' +
'           }            \n' +
'        }\n' +
'        //Is it a Tag name?\n' +
'        else if(Refactoring.isTagName(currentNode)) {\n' +
'          enableRefactorings.push("renameVariable");\n' +
'          var tags = Refactoring.getTags(currentNode.getParent);\n' +
'          if(tags.close) {\n' +
'            markers.push({\n' +
'              pos: tags.close,\n' +
'              type: "occurrence_other"\n' +
'            });\n' +
'          }\n' +
'          if(tags.open) {\n' +
'            markers.push({\n' +
'              pos: tags.open,\n' +
'              type: "occurrence_main"\n' +
'            });\n' +
'          }\n' +
'        }\n' +
'        //Is it a variable name?\n' +
'        else if(Refactoring.isVariable(currentNode)) {\n' +
'          enableRefactorings.push("renameVariable");\n' +
'          var name = currentNode.value;\n' +
'          var sctx = fullAst.sctx;\n' +
'          var currentSctx = Utils.findNode(sctx, {\n' +
'            line: cursorPos.row,\n' +
'            col: cursorPos.column\n' +
'          });\n' +
'\n' +
'          var varRefs = currentSctx.getVarRefs(name) || [];\n' +
'          for (var i=0; i < varRefs.length; i++) {\n' +
'            var varRef = varRefs[i];\n' +
'            markers.push({\n' +
'                pos: varRef.pos,\n' +
'                type: "occurrence_other"\n' +
'            });\n' +
'          }\n' +
'          \n' +
'          var varDecl = currentSctx.getVarDecl(name);\n' +
'          if (varDecl) {\n' +
'            markers.push({\n' +
'                pos: varDecl.pos,\n' +
'                type: "occurrence_main"\n' +
'            });\n' +
'          }\n' +
'        }\n' +
'        //console.log(markers);\n' +
'        callback({\n' +
'            markers: markers,\n' +
'            enableRefactorings: enableRefactorings\n' +
'        });\n' +
'    };\n' +
'    \n' +
'    handler.getVariablePositions = function(doc, fullAst, cursorPos, currentNode, callback) {\n' +
'        if (!fullAst || !currentNode) { return callback(); }\n' +
'        \n' +
'        if (Refactoring.isNodePrefix(currentNode, cursorPos) || Refactoring.isNSDecl(currentNode, cursorPos)) {\n' +
'            var nsDecl = Refactoring.isNSDecl(currentNode, cursorPos);\n' +
'            var value =  nsDecl ? currentNode.value : currentNode.value.substring(0, currentNode.value.indexOf(":"));\n' +
'            var decl = nsDecl ? currentNode.pos : Refactoring.findPrefixDeclaration(value, fullAst);\n' +
'            var refs = Refactoring.findPrefixReferences(value, fullAst);\n' +
'\n' +
'            var declarations = [];\n' +
'            var uses = [];\n' +
'            if(decl !== undefined) {\n' +
'              declarations.push({ row: decl.sl, column: decl.sc });\n' +
'            }\n' +
'            \n' +
'            for(var i = 0; i < refs.length; i++) {\n' +
'              var ref = refs[i];\n' +
'              uses.push({ row: ref.sl, column: ref.sc });\n' +
'            }\n' +
'            \n' +
'            callback({\n' +
'                length: nsDecl ?  currentNode.pos.ec - currentNode.pos.sc : currentNode.value.indexOf(":"),\n' +
'                pos: {\n' +
'                    row: currentNode.pos.sl,\n' +
'                    column: currentNode.pos.sc\n' +
'                },\n' +
'                others: declarations.concat(uses),\n' +
'                declarations: declarations,\n' +
'                uses: uses\n' +
'            });\n' +
'        }\n' +
'        //Is it a Function name?\n' +
'        else if(Refactoring.isFunctionDecl(currentNode) || Refactoring.isFunctionCall(currentNode)) {\n' +
'          var declAndRefs = Refactoring.getFunctionDeclarationsAndReferences(fullAst, currentNode.value, currentNode.getParent.arity);\n' +
'          var declaration = declAndRefs.declaration;\n' +
'          var references  = declAndRefs.references;\n' +
'          var declarations = [];\n' +
'          if(declaration !== null) {\n' +
'             declarations.push({\n' +
'              row: declaration.sl,\n' +
'              column: declaration.sc\n' +
'            });\n' +
'          }\n' +
'          var uses = [];\n' +
'          for (var i = 0; i < references.length; i++) {\n' +
'            var pos = references[i];\n' +
'            uses.push({\n' +
'              row: pos.sl,\n' +
'              column: pos.sc\n' +
'            });\n' +
'          }\n' +
'          callback({\n' +
'            length: currentNode.pos.ec - currentNode.pos.sc,\n' +
'            pos: {\n' +
'                row: currentNode.pos.sl,\n' +
'                column: currentNode.pos.sc\n' +
'            },\n' +
'            others: declarations.concat(uses),\n' +
'            declarations: declarations,\n' +
'            uses: uses\n' +
'          });\n' +
'        }\n' +
'        //Is it a Tag name?\n' +
'        else if(Refactoring.isTagName(currentNode)) {\n' +
'          var tags = Refactoring.getTags(currentNode.getParent);\n' +
'          var declarations = [];\n' +
'          var uses = [];\n' +
'          if(tags.open !== undefined) {\n' +
'            declarations.push({\n' +
'              row: tags.open.sl,\n' +
'               column: tags.open.sc\n' +
'            });\n' +
'          }\n' +
'          if(tags.close !== undefined) {\n' +
'            uses.push({\n' +
'              row: tags.close.sl,\n' +
'              column: tags.close.sc\n' +
'            });\n' +
'              \n' +
'          }\n' +
'          callback({\n' +
'            length: currentNode.pos.ec - currentNode.pos.sc,\n' +
'            pos: {\n' +
'                row: currentNode.pos.sl,\n' +
'                column: currentNode.pos.sc\n' +
'            },\n' +
'            others: declarations.concat(uses),\n' +
'            declarations: declarations,\n' +
'            uses: uses\n' +
'          });\n' +
'        }\n' +
'        //Is it a variable name?\n' +
'        else if(Refactoring.isVariable(currentNode)) {\n' +
'          var name = currentNode.value;\n' +
'          var sctx = fullAst.sctx;\n' +
'          var currentSctx = Utils.findNode(sctx, {\n' +
'            line: cursorPos.row,\n' +
'            col: cursorPos.column\n' +
'          });\n' +
'\n' +
'          var varRefs = currentSctx.getVarRefs(name) || [];\n' +
'          var uses = [];\n' +
'\n' +
'          for (var i=0; i < varRefs.length; i++) {\n' +
'            var varRef = varRefs[i];\n' +
'            uses.push({\n' +
'                row: varRef.pos.sl,\n' +
'                column: varRef.pos.sc\n' +
'            });\n' +
'          }\n' +
'\n' +
'          var varDecl = currentSctx.getVarDecl(name);\n' +
'          var declarations = [];\n' +
'          if(varDecl) {\n' +
'            declarations.push({\n' +
'              row: varDecl.pos.sl,\n' +
'              column: varDecl.pos.sc\n' +
'            });\n' +
'          }\n' +
'\n' +
'          callback({\n' +
'            length: currentNode.pos.ec - currentNode.pos.sc,\n' +
'            pos: {\n' +
'                row: currentNode.pos.sl,\n' +
'                column: currentNode.pos.sc\n' +
'            },\n' +
'            others: declarations.concat(uses),\n' +
'            declarations: declarations,\n' +
'            uses: uses\n' +
'          });\n' +
'        }\n' +
'    };\n' +
'\n' +
'});\n' +
'';});
